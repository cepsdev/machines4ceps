kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"
"

);


macro equality_test{
   symbolic_equality(as_nodeset(arglist.at(0)),as_nodeset(arglist.at(1))).diff.equal.content();
};


val the_stack = undef;
val the_data  = undef;
val the_code  = undef;
val the_vm    = undef;

kind OblectamentaOpcode;
kind OblectamentaDataLabel;
kind OblectamentaModifier;
kind OblectamentaCodeLabel;

OblectamentaOpcode
  halt,   addi32,     ldi32,   sti32,  beq, 
  buc,    duptopi32,  ldsi32,  muli32, lea,
  subi32, bnzeroi32,bltzeroi32,  bgteq,  stsi32,  bgteqzeroi32, blteqzeroi32,blteq ;

OblectamentaModifier addr;

macro verdict{
  if(force_int(arglist.at(0))){
        label Passed title = "" type="check";
  } else {
         label Failed title = "" type="error";
  }
};


Scenario{
     title{label _ title = "Maximal element in vector.";};
     Given{
		let the_stack = obj(stack{});
        the_stack;
     };
     And{
		let the_data = obj(
            data{
                OblectamentaDataLabel array;
                OblectamentaDataLabel i;
                OblectamentaDataLabel n;
                OblectamentaDataLabel x;
                OblectamentaDataLabel j;
                OblectamentaDataLabel cur_m;
                cur_m; -1;
                i; 0;
                array; 4;1;7;9;2;5;8;10;3;6;
                n; 10;
            }
        );
        the_data;
     };
     And{
		let the_code = obj(
            text{
                 OblectamentaDataLabel array;
                 OblectamentaDataLabel i;
                 OblectamentaDataLabel cur_m, n;
                 OblectamentaCodeLabel done,loop,loop_tail;
                 loop;
                  ldi32(i);
                  ldi32(n);
                  subi32;
                  blteqzeroi32(done); // if (i >= n) goto done;

                  ldi32(i);
                  ldi32(4);
                  muli32;
                  lea(array);
                  addi32;
                  ldsi32; // array[i] on top of stack
                  ldi32(cur_m); 
                  bgteq(loop_tail);

                  ldi32(i);
                  ldi32(4);
                  muli32;
                  lea(array);
                  addi32;
                  ldsi32; // array[i] on top of stack
                  sti32(cur_m); // cur_m = array[i] 


                 loop_tail;
                  ldi32(1);
                  ldi32(i);
                  addi32;
                  sti32(i); // i = i +1 ;
                  buc(loop);

                 done; 
                  halt;
           });
        the_code;
     };
     When{
        let the_vm = run_oblectamenta_bytecode(
            vm{
                the_stack;
                the_data;
                the_code;
            }
        );
        docinfo_se("Run");
     };
     Then
     {
        input{
            the_stack;
            the_data;
        };
        output{
            the_vm.vm.stack;
            the_vm.vm.data;
        };
        verdict{equality_test{the_vm.vm.data.content().at(0); 10; };};
     };
};