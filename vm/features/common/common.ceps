kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(
"
"
);

macro equality_test{
   symbolic_equality(as_nodeset(arglist.at(0)),as_nodeset(arglist.at(1))).diff.equal.content();
};

macro equality_test_verbose{
   symbolic_equality(as_nodeset(arglist.at(0)),as_nodeset(arglist.at(1)));
};

val the_stack         = undef;
val the_data          = undef;
val the_code          = undef;
val the_vm            = undef;
val the_compute_stack = undef;

kind OblectamentaOpcode;
kind OblectamentaDataLabel;
kind OblectamentaModifier;
kind OblectamentaCodeLabel;
kind OblectamentaReg;

OblectamentaOpcode
    halt,
    noop,
    ldi32,
    ldsi32,
    ldi64,
    lddbl,
    sti32,
    stsi32,
    sri64,
    stdbl,
    ldptr,
    stptr,
    lea,
    addi32,
    addi64,
    adddbl,
    subi32,
    subi64,
    subdbl,
    buc,
    beq,
    bneq,
    blt,
    blteq,
    bgt,
    bgteq,
    bgteqzeroi32,
    blteqzeroi32,
    bltzeroi32,
    bzeroi32,
    bnzeroi32,
    bzeroi64,
    bnzeroi64,
    bzerodbl,
    bnzerodbl,
    call,
    ret,
    swp,
    andni32,
    andni64,
    andi32,
    andi64,
    ori32,
    ori64,
    noti32,
    noti64,
    xori32,
    xori64,
    duptopi32,
    muli32,
    muli64,
    muldbl,
    divi32,
    divi64,
    divdbl,
    remi32,
    remi64,
    lti32,
    lti64,
    ltdbl,
    lteqi32,
    lteqi64,
    lteqdbl,
    gti32,
    gti64,
    gtdbl,
    gteqi32,
    gteqi64,
    gteqdbl,
    eqi32,
    eqi64,
    eqdbl,
    cpysi32,
    wrsi32,
    setframe, 
    popi32,
    pushi32;


OblectamentaModifier addr;
OblectamentaModifier reg;
OblectamentaReg SP, FP; 

macro verdict{
result{
  if(force_int(arglist.at(0))){
        label Passed title = "" type="check";
  } else {
         label Failed title = "" type="error";
  }
};
};

val size_opcode_buc = 2;
val size_opcode_call = 2;
val size_opcode_ret = 1;

