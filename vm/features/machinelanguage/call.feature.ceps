kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(
"
"
);


macro equality_test{
   symbolic_equality(as_nodeset(arglist.at(0)),as_nodeset(arglist.at(1))).diff.equal.content();
};


val the_stack = undef;
val the_data  = undef;
val the_code  = undef;
val the_vm    = undef;

kind OblectamentaOpcode;
kind OblectamentaDataLabel;
kind OblectamentaModifier;
kind OblectamentaCodeLabel;

OblectamentaOpcode
  halt,   addi32,     ldi32,   sti32,  beq, 
  buc,    duptopi32,  ldsi32,  muli32, lea,
  subi32, bnzeroi32,  bgteq,  stsi32,  bgteqzeroi32,
  noop, call, ret;

OblectamentaModifier addr;

macro verdict{
  if(force_int(arglist.at(0))){
        label Passed title = "" type="check";
  } else {
         label Failed title = "" type="error";
  }
};


Scenario{
     title{label __ title = "call instruction.";};
     Given{
		let the_stack = obj(stack{});
        the_stack;
     };
     And{
		let the_data = obj(
            data{
            }
        );
        the_data;
     };
     And{
		let the_code = obj(
            text{
                OblectamentaCodeLabel proc;
                call(proc);
                noop;
                noop;
                proc;
                halt;
           });
        the_code;
     };
     When{
        let the_vm = run_oblectamenta_bytecode(
            vm{
                the_stack;
                the_data;
                the_code;
            }
        );
     };
     Then
     {
        stack{2;};
        verdict{equality_test{ 
            stack{2;};
            the_vm.vm.stack;
        };};
     };
};