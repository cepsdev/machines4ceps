
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

Scenario{
    OblectamentaCodeLabel l1;
    Given{
        OblectamentaDataLabel operand1, operand2;
        let the_vm = obj(
            vm{
                compute_stack{
                    3;
                    2; //top of compute stack at the bottom of the initializing structure
                };
                text{
                    asm{
                        buc(l1);
                        addi32;
                        noop;
                        noop;
                        noop;
                        l1;
                        halt;
                    };
                };
            }
        );
     };
    When{
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };
    Then
    {
        verdict{equality_test{ 
            {the_vm.vm.compute_stack;}
            {
                obj(compute_stack{3;2;});
            }
        };};

     };
};

Scenario{
    OblectamentaCodeLabel l1;
    Given{
        OblectamentaDataLabel operand1, operand2;
        let the_vm = obj(
            vm{
                compute_stack{
                    3;
                    2; 
                    0; //top of compute stack at the bottom of the initializing structure
                };
                text{
                    asm{
                        bnzeroi32(l1);
                        addi32;
                        noop;
                        noop;
                        noop;
                        l1;
                        halt;
                    };
                };
            }
        );
     };
    When{
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };
    Then
    {
        verdict{equality_test{ 
            {the_vm.vm.compute_stack;}
            {
                obj(compute_stack{5;});
            }
        };};

     };
};

Scenario{
    OblectamentaCodeLabel l1;
    Given{
        OblectamentaDataLabel operand1, operand2;
        let the_vm = obj(
            vm{
                compute_stack{
                    3;
                    2; 
                    1; //top of compute stack at the bottom of the initializing structure
                };
                text{
                    asm{
                        bnzeroi32(l1);
                        addi32;
                        noop;
                        noop;
                        noop;
                        l1;
                        halt;
                    };
                };
            }
        );
     };
    When{
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };
    Then
    {
        verdict{equality_test{ 
            {the_vm.vm.compute_stack;}
            {
                obj(compute_stack{3;2;});
            }
        };};

     };
};

Scenario{
    OblectamentaCodeLabel l1, l2;
    Given{
        OblectamentaDataLabel operand1, operand2;
        let the_vm = obj(
            vm{
                compute_stack{
                    3;
                    2; 
                    1; //top of compute stack at the bottom of the initializing structure
                };
                text{
                    asm{
                        bnzeroi32(l1);
                        addi32;
                        l1;
                        buc(l2);
                        noop;
                        noop;
                        noop;
                        l2;
                        halt;
                    };
                };
            }
        );
     };
    When{
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };
    Then
    {
        verdict{equality_test{ 
            {the_vm.vm.compute_stack;}
            {
                obj(compute_stack{3;2;});
            }
        };};

     };
};


docinfo_se("==================================== SUMMARY ======================================
");

Summary{
 for( e : root.Scenario.Then.result){
  e;
 }
};