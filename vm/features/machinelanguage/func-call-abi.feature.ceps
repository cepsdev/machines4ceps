Scenario{
     title{label _oblectamenta_instruction_ret title = "The ret instruction.";};
     OblectamentaDataLabel r, one, two, four;
     When{
        let the_vm = operation(
            run{
                vm{
                    data{
                        one; 1;
                        two; 2;
                        four; 4;
                        r; -1;
                    };        
                    text{
                        OblectamentaCodeLabel exit,proc; // declare the label proc
                        asm{    
                                ldi32(one);
                                ldi64(SP-4);
                                stsi32;       // MEM[SP-4] = 1
                                ldi64(SP-4);
                                ldsi32;
                                sti32(r);    // r = MEM[SP-4]
                                halt;        
            
                                subi32;
                                //sti32(SP);
                                halt;
                                call(proc);
                                buc(exit);
                            proc;
                                ret;                  
                            exit;
                                halt;                     
                            };
                    };
                };
            }
        );
     };
     "!!!!";the_vm;
     Then
     {
        verdict{equality_test{ 
            {as_uint8(7);as_uint8(0);as_uint8(0);as_uint8(0);}
            {the_vm.vm.compute_stack.content();}
        };};
     };
};

Summary{
 for( e : root.Scenario.Then.result){
  e;
 }
};