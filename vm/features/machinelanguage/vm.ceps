
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

Scenario{
    title{label __ title = "Basic objects controlled by the Oblectamenta-VM.";};
    
    Given{
        docinfo_se("A stack");
        let the_stack = obj(stack{}); 
    };
    And{
        docinfo_se("statically allocated data ");
	    let the_data = obj(data{}); 
    };
    And{
        docinfo_se("code (text segment) ");
	    let the_code = obj(text{});
    };
    And{
        docinfo_se(" the stack where computations are performed");
	    let the_compute_stack = obj(compute_stack{});
    };

    Then
     {
        docinfo_se("These pieces form a complete environment for running Oblectamenta machine code");
        verdict{equality_test{ 
            run_environment{
                stack{};
                data{};
                text{};
                compute_stack{};
            };
            run_environment{
                the_stack;
                the_data;
                the_code;
                the_compute_stack;
            };
        };};
     };
};

Scenario{
    title{label __ title = "A VM contains code, data, stack and a compute stack.";};
    
    let the_stack = obj(stack{}); 
	let the_data = obj(data{}); 
	let the_code = obj(text{});
	let the_compute_stack = obj(compute_stack{});


    Given{
        the_stack; 
    };
    And{
        the_data;
    };
    And{
        the_code;
    };
    And{
        the_compute_stack;
    };

    When{
        let the_vm = obj(vm{});
     };
    Then
     {
        verdict{equality_test{ 
            the_vm;
            vm{
                the_stack;
                the_data;
                the_code;
                the_compute_stack;
            };
        };};
     };
};

Scenario{
    title{label __ title = "The data, stack and compute stack of a VM can be initialized with data.";};
    
    let the_stack = obj(stack{3; 2; 1;}); 
	let the_data = obj(data{9;4;1;}); 
	let the_code = obj(text{});
	let the_compute_stack = obj(compute_stack{81;16;1;});


    Given{
        the_stack; 
    };
    And{
        the_data;
    };
    And{
        the_code;
    };
    And{
        the_compute_stack;
    };

    When{
        let the_vm = obj(
            vm{
                the_stack;
                the_data;
                the_compute_stack;
            }
        );
     };
    Then
     {
        verdict{equality_test{ 
            the_vm;
            vm{
                the_stack;
                the_data;
                the_code;
                the_compute_stack;
            };
        };};
     };
};

Summary{
 for( e : root.Scenario.Then.result){
  e;
 }
};