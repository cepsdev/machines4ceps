
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

Scenario{
    title{label __ title = "Basic objects controlled by the Oblectamenta-VM.";};
    
    Given{
        docinfo_se("A stack");
        let the_stack = obj(stack{}); 
    };
    And{
        docinfo_se("statically allocated data ");
	    let the_data = obj(data{}); 
    };
    And{
        docinfo_se("code (text segment) ");
	    let the_code = obj(text{});
    };
    And{
        docinfo_se(" the stack where computations are performed");
	    let the_compute_stack = obj(compute_stack{});
    };
    And{
        docinfo_se(" the register file");
        let the_register_file = obj(registers{});
    };

    Then
     {
        docinfo_se("These pieces form a complete environment for running Oblectamenta machine code");
        verdict{equality_test{ 
            run_environment{
                stack{};
                data{};
                text{};
                compute_stack{};
                registers{
                    CSP{as_int64(0);};
                    FP{as_int64(0);};
                    PC{as_int64(0);};
                    SP{as_int64(4096);};
                };
            };
            run_environment{
                the_stack;
                the_data;
                the_code;
                the_compute_stack;
                the_register_file;
            };
        };};
     };
};

Scenario{
    title{label __ title = "A VM contains code, data, stack, a compute stack and a registers file.";};
    
    let the_stack = obj(stack{}); 
	let the_data = obj(data{}); 
	let the_code = obj(text{});
	let the_compute_stack = obj(compute_stack{});
    let the_register_file = obj(registers{});

    Given{
        docinfo_se("An empty stack");
        the_stack; 
    };
    And{
        docinfo_se("statically allocated data with no entries");
        the_data;
    };
    And{
        docinfo_se("code (text segment) with no code");
        the_code;
    };
    And{
        docinfo_se(" the stack where computations are performed without any data");
        the_compute_stack;
    };
    And{
        docinfo_se(" the register file");
        the_register_file;
    };

    When{
        docinfo_se(" A default constructed VM");
        let the_vm = obj(vm{});
     };
    Then
     {
        docinfo_se(" The constructed VM contains stack,data, code, and the compute stack which are all empty.");
        verdict{equality_test{ 
            the_vm;
            vm{
                the_stack;
                the_data;
                the_code;
                the_compute_stack;
                the_register_file;
            };
        };};
     };
};

Scenario{
    title{label __ title = "The data, stack and compute stack of a VM can be initialized with data.";};
    
    let the_stack = obj(stack{3; 2; 1;}); 
	let the_data = obj(data{9;4;1;}); 
	let the_code = obj(text{});
	let the_compute_stack = obj(compute_stack{81;16;1;});


    Given{
        docinfo_se("A stack initialized with data");
        the_stack; 
    };
    And{
        docinfo_se("non empty statically allocated data");
        the_data;
    };
    And{
        docinfo_se("code (text segment) with no code");
        the_code;
    };
    And{
        docinfo_se("compute stack with data");
        the_compute_stack;
    };

    When{
        docinfo_se(" Creating a VM with initialized stack, data and compute stack");
        let the_vm = obj(
            vm{
                the_stack;
                the_data;
                the_compute_stack;
            }
        );
     };
    Then
     {
        docinfo_se(" The created VM's stack, data, and compute stack are initialized with the given data.");

        verdict{equality_test{ 
            the_vm;
            vm{
                the_stack;
                the_data;
                the_code;
                the_compute_stack;
                registers{     
                    CSP{as_int64(12);     };
                    FP{as_int64(0);};
                    PC{as_int64(0);};     
                    SP{as_int64(4084);};     
                };          
            };
        };};
     };
};

Scenario{
    title{label __ title = "Data entries can contain labels.";};
    kind OblectamentaDataLabel;
    OblectamentaDataLabel l1,l2,l3;
    

    Given{
        docinfo_se("non empty statically allocated data with labels");
	    let the_data = obj(
            data{
                l1;
                9;
                4;
                l2;
                1;
                l3;
                "gargamel";
            }
        );
        the_data;
    };

    When{
        docinfo_se(" Creating a VM with initialized data ");
        let the_vm = obj(
            vm{
                the_data;
            }
        );
     };

    Then
     {
        docinfo_se(" The created VM's stack, data, and compute stack are initialized with the given data.");
        verdict{
          equality_test{ 
            the_vm;
            vm{
                stack{};
                data{
                   l1;
                   as_uint8(9); 
                   as_uint8(0); 
                   as_uint8(0); 
                   as_uint8(0); 
                   as_uint8(4); 
                   as_uint8(0); 
                   as_uint8(0); 
                   as_uint8(0);
                   l2; 
                   as_uint8(1); 
                   as_uint8(0); 
                   as_uint8(0); 
                   as_uint8(0); 
                   l3;
                   as_uint8(103); 
                   as_uint8(97); 
                   as_uint8(114); 
                   as_uint8(103); 
                   as_uint8(97); 
                   as_uint8(109); 
                   as_uint8(101); 
                   as_uint8(108); 
                };
                text{};
                compute_stack{};
                registers{     
                    CSP{as_int64(0);};
                    FP{as_int64(0);};
                    PC{as_int64(0);};     
                    SP{as_int64(4096);};     
                };          

            };
        };
      };
     };
};


Scenario{
    title{label __ title = "The text segment contains a sequence of opcodes (machine language).
Oblectamenta's assembler translates assembler code, i.e. symbols
representing opcodes, into machine language.
Assembler code has to be placed within an asm-struct.";};
    
	let the_code = obj(
        text{
            asm{
             noop; // noop stands for 'no operation'
             noop;
             noop;
             noop;
             noop;
            };
        }
    );
    Given{
        docinfo_se("code (text segment) with 5 noops");
         text{
            asm{
             noop; // noop stands for 'no operation'
             noop;
             noop;
             noop;
             noop;
            };
         };
    };

    When{
        docinfo_se(" Creating a VM with the code.");
        vm{
            the_code;
        };

        let the_vm = obj(
            vm{
                the_code;
            }
        );
     };
    Then
     {
        docinfo_se(" The created VM's text segment contains the machine code version of the code.");

        verdict{equality_test{ 
            the_vm;
            vm{
                stack{};
                data{};
                text{as_uint8(1);as_uint8(0);as_uint8(0);as_uint8(0); 
                     as_uint8(1);as_uint8(0);as_uint8(0);as_uint8(0);
                     as_uint8(1);as_uint8(0);as_uint8(0);as_uint8(0);
                     as_uint8(1);as_uint8(0);as_uint8(0);as_uint8(0);
                     as_uint8(1);as_uint8(0);as_uint8(0);as_uint8(0);};
                compute_stack{};
                registers{     
                    CSP{as_int64(0);};
                    FP{as_int64(0);};
                    PC{as_int64(0);};     
                    SP{as_int64(4096);};     
                };          
            };
        };};
     };
};

Scenario{
    title{label __ title = "Running the program stored in a VM changes the registers.";};
    
	let the_code = obj(
        text{
            asm{
             noop; // noop stands for 'no operation'
             noop;
             noop;
             noop;
             noop;
             halt;
            };
        }
    );
    Given{
        docinfo_se("code (text segment) with 5 noops");
         text{
            asm{
             noop; // noop stands for 'no operation'
             noop;
             noop;
             noop;
             noop;
             halt;
            };
         };
    };

    And{
        docinfo_se(" Creating a VM with the code.");
        vm{
            the_code;
        };
        let the_vm = obj(
            vm{
                the_code;
            }
        );
     };
     When{
        docinfo_se(" Running the VM.");
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };
 
    Then
     {
        docinfo_se(" The PC register points to the halt instruction which terminated the execution.");

        verdict{equality_test{ 
            the_vm.vm.registers.PC;
            PC{as_int64(20);};
        };};
     };
};



docinfo_se("==================================== SUMMARY ======================================
");


Summary{
 for( e : root.Scenario.Then.result){
  e;
 }
};