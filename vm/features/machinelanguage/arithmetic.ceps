
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

Scenario{
    title{label __ title = "Arithmetic: addi32";};
    
	let the_code = obj(
        text{
            asm{
             addi32;
             halt;
            };
        }
    );
    Given{
        docinfo_se("code (text segment) with an addi32 instruction");
        text{
            asm{
             addi32;
             halt;
            };
        };
    };

    And{
        docinfo_se(" Creating a VM");
        vm{
            the_code;
            compute_stack{
                1;
                1;
            };
        };
        let the_vm = obj(
            vm{
                the_code;
                compute_stack{
                    1;
                    1;
                };
            }
        );
     };
     When{
        docinfo_se(" Running the VM.");
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };

     Then
     {
        docinfo_se(" .");
        verdict{equality_test{ 
            {the_vm.vm.registers.PC;the_vm.vm.compute_stack;}
            {PC{as_int64(4);};compute_stack{as_uint8(2);as_uint8(0);as_uint8(0);as_uint8(0);};}
        };};
     };
};


Scenario{
    title{label __ title = "Arithmetic: addi64";};
    
	let the_code = obj(
        text{
            asm{
             addi64;
             halt;
            };
        }
    );
    Given{
        docinfo_se("code (text segment) with an addi64 instruction");
        text{
            asm{
             addi64;
             halt;
            };
        };
    };

    And{
        docinfo_se(" Creating a VM");
        vm{
            the_code;
            compute_stack{
                1;0;
                1;0;
            };
        };
        let the_vm = obj(
            vm{
                the_code;
                compute_stack{
                    1;0;
                    1;0;
                };
            }
        );
     };
     When{
        docinfo_se(" Running the VM.");
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };

     Then
     {
        docinfo_se(" .");
        verdict{equality_test{ 
            {the_vm.vm.registers.PC;the_vm.vm.compute_stack;}
            {PC{as_int64(4);};compute_stack{as_uint8(2);as_uint8(0);as_uint8(0);as_uint8(0);as_uint8(0);as_uint8(0);as_uint8(0);as_uint8(0);};}
        };};
     };
};



Scenario{
    title{label __ title = "Arithmetic: adddbl";};
    
	let the_code = obj(
        text{
            asm{
             adddbl;
             halt;
            };
        }
    );
    Given{
        docinfo_se("code (text segment) with an addi64 instruction");
        text{
            asm{
             adddbl;
             halt;
            };
        };
    };
    And{
        docinfo_se(" Creating a VM");
        vm{
            the_code;
            compute_stack{
                1.0;
                1.0;
            };
        };
        let the_vm = obj(
            vm{
                the_code;
                compute_stack{
                    1.0;
                    1.0;
                };
            }
        );
     };
     When{
        docinfo_se(" Running the VM.");
        let the_vm = operation(
         run{
            the_vm;    
          }
        );
     };
     Then
     {
        docinfo_se(" .");
        verdict{equality_test{ 
            {the_vm.vm.registers.PC;the_vm.vm.compute_stack;}
            {
                PC{as_int64(4);};
                obj(compute_stack{2.0;});
            }
        };};
     };
};