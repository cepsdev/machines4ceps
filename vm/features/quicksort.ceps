
Algorithm{
  docinfo_se("QuickSort");
  repeat{
    b = TRUE;
    for (i : range(1 ,N-1)) {
        if (a[i] > a[i+1]){
            b = FALSE;
            swap(a[i],a[i+1]);
        }
    }
    until{ b;};
  };
};

Scenario{
     title{label _ title = "QuickSort.";};
     Given{
		let the_stack = obj(stack{});
        the_stack;
     };
     And{
		let the_data = obj(
            data{
                OblectamentaDataLabel array;
                OblectamentaDataLabel n;
                OblectamentaDataLabel r;
                OblectamentaDataLabel l;
                array; 4;1;7;9;2;5;8;10;3;6;
                i; 0;
                b; 0;
                n; 10;
            }
        );
        the_data;
     };
     And{
		let the_code = obj(
            text{
                OblectamentaDataLabel array;
                OblectamentaDataLabel b;
                OblectamentaDataLabel n;
                OblectamentaDataLabel i;
                OblectamentaCodeLabel partition, qsort, qsort_exit, done;

                  ldi32(0);  // pivot's index
                  ldi32(0);  // left boundary
                  ldi32(n);  // right boundary

                  call(qsort); //r = qsort(0,n);
                  
                  popi32;     // remove the constant 0 from stack
                  popi32;     // remove n from stack
                  popi32;     // remove r from stack
                  buc(done);   // branch unconditionally to done
                qsort;
                  ldi32(3);
                  pushi32(reg(SP));
                  subi32;
                  popi32(reg(FP)); // prolog for call frame
                  pushi32(reg(FP));

                  cpysi32(1);      // left 
                  cpysi32(0);      // right
                  subi32;
                  ldi32(1);
                  bgteq(qsort_exit);




                  ldi32(0);        // pivot
                  cpysi32(1);      // left 
                  cpysi32(0);      // right
                  

                  call(partition);
                  popi32;
                  popi32;
                                 //pivot on top of the stack
                  halt;
                  
                  
                  popi32;
                qsort_exit;
                  popi32;
                  ret; 
                partition;
                  ldi32(3);
                  pushi32(reg(SP));
                  subi32;
                  popi32(reg(FP)); // prolog for call frame
                  ldi32(0);
                  wrsi32(2); // write return value
                 ret;

                done; 
                 halt;       // halt execution
           });
        the_code;
     };
     When{
        let the_vm = run_oblectamenta_bytecode(
            vm{
                the_stack;
                the_data;
                the_code;
            }
        );
     };
     Then
     {
        input{
            the_stack;
            the_data;
        };
        output{
            the_vm.vm.stack;
            the_vm.vm.data;
        };
        verdict{
            equality_test{
                v{for( i : 1 .. 10){i; 0 ; 0; 0;}};
                v{for( i : 0 .. 9){the_vm.vm.data.content().at(i*4); 0 ; 0; 0;}};
            };
        };
     };
};