/*
Copyright 2025 Tomas Prerovsky (cepsdev@hotmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


/*
Tests serialization and deserialization of messages to and from global data.
What: Read existing member of a nested message from a previously serialized message.
Expected Behaviour: Success  
*/

kind Event;         // Make available events
kind Guard;         // Make available guards
kind Systemstate;   // Make available system states

Event AnEvent;      // Declare the event AnEvent

kind OblectamentaMsgDefDirective;  // Make available message serialization
kind OblectamentaMsgReadDirective; // Make available message deserialization

OblectamentaDataLabel zip,street,firstname1,initial1,lastname1,msg_buffer2, 
                      msg_buffer,msg_text, one, some_number, address_street_read, salary_read, address_no_read; // a bnch of data labels

//Global Data
oblectamenta{
 global{
   data{
        //Notation                    // How it ends up in memory
                                      // rel. offset    content (bytes delimited by |)
        msg_text;"Hello there!";0;    // 0              |'H'|'e'|'l'|'l'|'o'|' '|'t'|'h'|'e'|'r'|'e'|'!'|0|0|0|0|  //0 is an signed 32 bit integer
        
        firstname1;"Max";0;
        initial1;"M";0;
        lastname1;"Mustermann";0;
        street;"Pennsylvania Avenue";0;
        zip;"78996-5643";0;
        msg_buffer; for (i : 1 .. 256){0;} // here goes the serialized message as generated in S::Actions::doSendEvent()
        address_street_read;0;0;
        salary_read;0;0;
        address_no_read;0;0;
    };
 };
};

sm/*state machine*/{
    /*name*/S;
    states{Initial; A;};
    Actions{
        doSendEvent{
            oblectamenta{
                    OblectamentaMessageTag i32;
                    OblectamentaMessageTag i64;
                    OblectamentaMessageTag f64;
                    OblectamentaMessageTag sz;                                   
                    OblectamentaMsgDefDirective write;
                    OblectamentaMsgReadDirective read;
            text{
                asm{

                  msg{
                    write; // we want this to be treated as a message. 
                    msg_buffer; // Location the resulting byte stream should be written to
                    //Code for the creation of the message's root has been created at this point

                   age{ //Define the sub message age
                    ldi32(33); // Put i32 value 33 on top of the computation stack (cs)
                    i32;       // At this point code is injected to write the top i32 element of the cs to the message structure.
                   };

                   id{ // Define the sub-message id
                    // There are no restrictions regarding the instructions which may be used inside
                    // a sub message defining structure, i.e. we can compute values.
                    ldi32(1);
                    ldi32(10);
                    addi32;
                    i32;
                   };
                   firstName{ // Define the sub-message firstName
                    lea(firstname1); // which contais the value labeled with firstname1
                    sz;       // of type zero terminated signed char string
                   };
                   initialName{
                    lea(initial1);
                    sz;
                   };
                   lastName{
                    lea(lastname1);
                    sz;
                   };
                   address{
                    street{lea(street);sz;};
                    no{
                        ldi32(1000);i32;
                    };
                    zip{lea(zip);sz;};
                   };
                   salary{ //Define the sub-message salary
                    lddbl(33.3); // It contans the double value 33.3.
                    f64;
                   };

                  };//msg

                  msg{
                    read;  // The name of the structure is irrelevant, the read symbol qualifies the content as a deserialization routine
                    msg_buffer; // Label identifiyig the message content
/*=========>*/      address{
                      no{
                        i32;
                        asserti32(1000,"address.no has incorrect value.");
                        ldi64(1);
                        lea(address_no_read);
                        stsi64;
                     };
                    }; //doesn't exist should trigger error
                  };           
                  //Invariant: CS is empty
                  assert_empty_cs;
                  ldi64(address_no_read);
                  asserti64(1,"address.no was not processed properly.");                             
              };//asm
             };//text
            };//oblectamenta
        };//doSendEvent
    };//Actions
    t/*transition*/{/*from*/Initial; /*to*/A;/*action*/doSendEvent;};
};

Simulation{
    Start{S;};
};


/*

Static data (1241 bytes) :
    0:  72 101 108 108 111  32 116 104   H e l l o   t h 
    8: 101 114 101  33   0   0   0   0   e r e ! . . . . 
   16:  77  97 120   0   0   0   0  77   M a x . . . . M 
   24:   0   0   0   0  77 117 115 116   . . . . M u s t 
   32: 101 114 109  97 110 110   0   0   e r m a n n . . 
   40:   0   0  80 101 110 110 115 121   . . P e n n s y 
   48: 108 118  97 110 105  97  32  65   l v a n i a   A 
   56: 118 101 110 117 101   0   0   0   v e n u e . . . 
   64:   0  55  56  57  57  54  45  53   . 7 8 9 9 6 - 5 
   72:  54  52  51   0   0   0   0   1   6 4 3 . . . . . 
   80:   0   0   0 119   1   0   0   0   . . . w . . . . 
   88:   0   0   0   2   0   0   0  32   . . . . . . .   
   96:   0   0   0   0   0   0   0  97   . . . . . . . a 
  104: 103 101   0   3   0   0   0  16   g e . . . . . . 
  112:   0   0   0   0   0   0   0  33   . . . . . . . ! 
  120:   0   0   0   2   0   0   0  31   . . . . . . . . 
  128:   0   0   0   0   0   0   0 105   . . . . . . . i 
  136: 100   0   3   0   0   0  16   0   d . . . . . . . 
  144:   0   0   0   0   0   0  11   0   . . . . . . . . 
  152:   0   0   2   0   0   0  38   0   . . . . . . & . 
  160:   0   0   0   0   0   0 102 105   . . . . . . f i 
  168: 114 115 116  78  97 109 101   0   r s t N a m e . 
  176:   7   0   0   0  16   0   0   0   . . . . . . . . 
  184:   0   0   0   0  77  97 120   0   . . . . M a x . 
  192:   2   0   0   0  38   0   0   0   . . . . & . . . 
  200:   0   0   0   0 105 110 105 116   . . . . i n i t 
  208: 105  97 108  78  97 109 101   0   i a l N a m e . 
  216:   7   0   0   0  14   0   0   0   . . . . . . . . 
  224:   0   0   0   0  77   0   2   0   . . . . M . . . 
  232:   0   0  44   0   0   0   0   0   . . , . . . . . 
  240:   0   0 108  97 115 116  78  97   . . l a s t N a 
  248: 109 101   0   7   0   0   0  23   m e . . . . . . 
  256:   0   0   0   0   0   0   0  77   . . . . . . . M 
  264: 117 115 116 101 114 109  97 110   u s t e r m a n 
  272: 110   0   2   0   0   0 141   0   n . . . . . . . 
  280:   0   0   0   0   0   0  97 100   . . . . . . a d 
  288: 100 114 101 115 115   0   2   0   d r e s s . . . 
  296:   0   0  51   0   0   0   0   0   . . 3 . . . . . 
  304:   0   0 115 116 114 101 101 116   . . s t r e e t 
  312:   0   7   0   0   0  32   0   0   . . . . .   . . 
  320:   0   0   0   0   0  80 101 110   . . . . . P e n 
  328: 110 115 121 108 118  97 110 105   n s y l v a n i 
  336:  97  32  65 118 101 110 117 101   a   A v e n u e 
  344:   0   2   0   0   0  31   0   0   . . . . . . . . 
  352:   0   0   0   0   0 110 111   0   . . . . . n o . 
  360:   3   0   0   0  16   0   0   0   . . . . . . . . 
  368:   0   0   0   0 232   3   0   0   . . . . . . . . 
  376:   2   0   0   0  39   0   0   0   . . . . ' . . . 
  384:   0   0   0   0 122 105 112   0   . . . . z i p . 
  392:   7   0   0   0  23   0   0   0   . . . . . . . . 
  400:   0   0   0   0  55  56  57  57   . . . . 7 8 9 9 
  408:  54  45  53  54  52  51   0   2   6 - 5 6 4 3 . . 
  416:   0   0   0  39   0   0   0   0   . . . ' . . . . 
  424:   0   0   0 115  97 108  97 114   . . . s a l a r 
  432: 121   0   8   0   0   0  20   0   y . . . . . . . 
  440:   0   0   0   0   0   0 102 102   . . . . . . f f 
  448: 102 102 102 166  64  64   0   0   f f f . @ @ . . 
 ...
 1112:   0   0   0   0   0   0   0   0   . . . . . . . . 
 1120:   0   0   0   0   0   0   0  97   . . . . . . . a 
 1128: 103 101   0 105 100   0 102 105   g e . i d . f i 
 1136: 114 115 116  78  97 109 101   0   r s t N a m e . 
 1144: 105 110 105 116 105  97 108  78   i n i t i a l N 
 1152:  97 109 101   0 108  97 115 116   a m e . l a s t 
 1160:  78  97 109 101   0  97 100 100   N a m e . a d d 
 1168: 114 101 115 115   0 115 116 114   r e s s . s t r 
 1176: 101 101 116   0 110 111   0 122   e e t . n o . z 
 1184: 105 112   0 115  97 108  97 114   i p . s a l a r 
 1192: 121   0  97 100 100 114 101 115   y . a d d r e s 
 1200: 115   0  97 100 100 114 101 115   s . a d d r e s 
 1208: 115  46 110 111  32 119  97 115   s . n o   w a s 
 1216:  32 110 111 116  32 112 114 111     n o t   p r o 
 1224:  99 101 115 115 101 100  32 112   c e s s e d   p 
 1232: 114 111 112 101 114 108 121  46   r o p e r l y . 
 1240:   0 

Symboltable:

address_no_read      1119  
address_street_read  1103  
firstname1           16    
initial1             23    
lastname1            28    
msg_buffer           79    
msg_text             0     
salary_read          1111  
street               42    
zip                  65



Registers: ARG0:  415 | ARG1:  0 | ARG2:  0 | ARG3:  0 | ARG4:  0 | ARG5:  0 | CSP :  48 | FP  :  0 | PC  :  12972 | RES :  39 | SP  :  4096

Compute Stack:

 Top Element (int32, uint32): 0   0
 Top Element (int64, uint64): 0   0

 Bytes:
79   0    0    0    0    0    0    0    
180  0    0    0    0    0    0    0       = 180
18   1    0    0    0    0    0    0       = 274    address node type = 2 size = 141
38   1    0    0    0    0    0    0       = 294    address.street type = 2 size 51
121  0    0    0    0    0    0    0       = 121    remaining content size of address node (141 - (sizeof(NODE) + len("address") + 1) ) 
0    0    0    0    0    0    0    0        <== Top offset

After match:

 Bytes:
79   0    0    0    0    0    0    0    
180  0    0    0    0    0    0    0    
0    0    0    0    0    0    0    0    
18   1    0    0    0    0    0    0        274 = addr of parent node = address
89   1    0    0    0    0    0    0        345 addr of matched node  = address.no
70   0    0    0    0    0    0    0        70 remaining content-size

            //Invariant:|content-size|offset|addr of message|addr of matched node|remaining content-size| Node Matched (flag) |



*/




