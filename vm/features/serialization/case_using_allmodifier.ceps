/*
Copyright 2025 Tomas Prerovsky (cepsdev@hotmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

kind Event;
kind Guard;
kind Systemstate;

kind OblectamentaMsgDefDirective;
kind OblectamentaMsgReadDirective;
kind OblectamentaMessageModifier;

OblectamentaMessageTag i32;
OblectamentaMessageTag i64;
OblectamentaMessageTag f64;
OblectamentaMessageTag sz;
OblectamentaMessageModifier all;

OblectamentaMsgDefDirective write;
OblectamentaMsgReadDirective read;
   
OblectamentaDataLabel msg_buffer, item_counter, expectation;

oblectamenta{
 global{
   data{
        msg_buffer; for (i : 1 .. 128){0;}
        item_counter;0;
        expectation;0;for(e : 1 .. 10) { 2*e;}
    };
 };
};

sm{
    S;
    states{Initial; A;};
    Actions{
        doSendEvent{
            oblectamenta{
            text{
                asm{
                   //dbg_print_data(0);
                   msg{
                    write;  
                    msg_buffer;
                    for(e : 1 .. 10){ // for loop evaluated during AST creation, i.e. before runtime 
                        item{
                            ldi32(2*e);
                            i32;
                        };
                     }
                    };//msg
                   msg{
                    read;
                    msg_buffer;
                    item{
                        i32;
                        all; // loops through all instances of 'item'
                        lea(item_counter);
                        ldsi32;
                        ldi32(1);
                        addi32;
                        lea(item_counter);
                        stsi32;
                        lea(item_counter);
                        ldsi32;
                        ldi32(4);
                        muli32;
                        ui32toui64;
                        lea(expectation);
                        addi64;
                        ldsi32;
                        asserteqi32("item[i] != expectation[i].");
                    };
                   };
                   assert_empty_cs;
              };//asm
             };//text
            };//oblectamenta
        };//doSendEvent
    };//Actions
    t{Initial;A;doSendEvent;};
};

Simulation{
    Start{S;};
};
