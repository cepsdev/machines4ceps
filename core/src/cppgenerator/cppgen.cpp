#define _CRT_SECURE_NO_WARNINGS

#include "core/include/state_machine_simulation_core.hpp"
#include "core/include/base_defs.hpp"
#include <map>
#include <iostream>

using namespace ceps::ast;

struct Indent{
	int indentation = 0;

	void print_indentation(std::ostream& out, int n)
	{
		for(int i = 0; i < n; ++i)
			out << " ";
	}

	int indent_incr(){
		return ++indentation;
	}

	int indent_decr(){
		return --indentation;
	}
};

void write_copyright_and_timestamp(std::ostream& out, std::string title,bool b){
	if(!b) return;
	time_t timer;time(&timer);tm * timeinfo;timeinfo = localtime(&timer);
	out
		<< "/* "<< title <<" " << std::endl
		<< "   CREATED " << asctime(timeinfo) << std::endl
		<< "   GENERATED BY the sm4ceps C++ Generator VERSION 0.1 (c) Tomas Prerovsky <tomas.prerovsky@gmail.com>, ALL RIGHTS RESERVED. \n"
		<< "   BASED ON CEPS "<< ceps::get_version_info() << std::endl
		<< "   THIS IS A GENERATED FILE. DO NOT MODIFY.\n*/\n"
		<< std::endl << std::endl;
}

struct Type{
	enum {Int,String,Double,Struct,Undefined} t;
	std::string name;
};

struct sysstate{
	std::string name;
	int pos;
	Type type;
	bool operator < (sysstate const & rhs) const {return pos < rhs.pos;}
	bool operator == (sysstate const & rhs) const {return pos == rhs.pos;}
};


Type determine_type(Nodebase_ptr node){
	if (node->kind() == Ast_node_kind::int_literal) return Type{Type::Int};
	if (node->kind() == Ast_node_kind::float_literal) return Type{Type::Double};
	if (node->kind() == Ast_node_kind::string_literal) return Type{Type::String};
	return Type{Type::Undefined};
}

std::map<sysstate,Nodebase_ptr> systemstate_first_def; //systemstate name => first definition

template<typename F> void for_all_nodes(State_machine_simulation_core* smp, Nodeset& ns,F f){
	int node_no = 0;
	std::set<std::string> util_already_seen;

	for(auto e: ns.nodes()) f(smp,e, node_no++,util_already_seen);
}

void store_first_state_assign(State_machine_simulation_core* smp,Nodebase_ptr p,int node_no,std::set<std::string>& already_seen){
	if(!smp->is_assignment_op(p)) return;
	std::string lhs_id;
	auto& binop = as_binop_ref(p);
	if(!smp->is_assignment_to_state(binop, lhs_id)) return;
	sysstate s{lhs_id,node_no,Type::Undefined};
	if (already_seen.find(lhs_id) != already_seen.end()) return;
	already_seen.insert(lhs_id);
	systemstate_first_def[s] = binop.right();
}

void print_first_state_assigns(){
	for(auto e : systemstate_first_def){
		std::cout << e.first.name << " at " << e.first.pos << std::endl;
	}
}

void write_cpp_type(std::ostream& os,Type t){
	if(t.t == Type::Int) os << "int";
	else if(t.t == Type::Double) os << "double";
	else if(t.t == Type::String) os << "std::string";
	else if(t.t == Type::Struct) os << t.name;
	else os << "UNKNOWN_TYPE";
}

void write_cpp_systemstate_declaration(std::ostream& os,sysstate const & state){
	write_cpp_type(os,state.type);
	os << " ";
	os << state.name;
}

void State_machine_simulation_core::do_generate_cpp_code(ceps::Ceps_Environment& ceps_env,
													  ceps::ast::Nodeset& universe){
	DEBUG_FUNC_PROLOGUE

	std::string sysstates_namespace = "systemstates";
	auto globals = universe["Globals"];
	auto struct_defs = universe["typedef"];
	auto global_functions = universe["global_functions"];
	auto sym = ceps_env.get_global_symboltable();

	for_all_nodes(this,globals,store_first_state_assign);
	//print_first_state_assigns();

	std::vector<sysstate> sys_states;
	for(auto & state_entry : systemstate_first_def){
		auto type = determine_type(state_entry.second);
		if (type.t == Type::Undefined){
			this->warn_(-1,"Couldn't determine type of '"+state_entry.first.name+"' will assume int.");
			type.t = Type::Int;
		}
		sysstate s = state_entry.first;
		s.type = type;
		sys_states.push_back(s);
	}




	//Write files
	std::string out_cpp;
	std::string out_hpp;

	std::ofstream o_cpp{out_cpp = "out.cpp"};
	std::ofstream o_hpp{out_hpp = "out.hpp"};

	write_copyright_and_timestamp(o_cpp,out_cpp,true);
	write_copyright_and_timestamp(o_hpp,out_hpp,true);

	Indent indent;
	o_hpp << "\n\n#include<iostream>\n#include<string>\n\n";
	o_cpp << "\n\n#include \""<< out_hpp <<"\"\n\n";
	o_hpp << "namespace "<< sysstates_namespace <<"{\n";
	indent.indent_incr();
	for(auto & state_entry : sys_states){
		o_hpp << "extern ";write_cpp_systemstate_declaration(o_hpp,state_entry);o_hpp << ";\n";
	}
	indent.indent_decr();o_hpp<<"\n}\n";
}


