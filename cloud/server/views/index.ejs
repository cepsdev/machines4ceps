<% include header %>

<style>
</style>
    
<body>
    <div id="wrapper">
        
    <% include navbar %>
      
    <div id="page-wrapper">
        <div class="row">
            <div class="col-lg-1"></div>
            <div class="col-lg-10">
                <h1 class="page-header">Available Simulations</h1>
            </div>
            <div class="col-lg-1" style="text-align:right;">
             <span id="available_simulations_table_loading_info" >
              <div class="loader"  style="margin:10px;float:right;"></div>
             </span>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-1"></div>
            <div class="col-lg-10">
             <table width="100%" class="table table-striped table-bordered table-hover" id="available_simulations_table">                                
             </table>
             <hr/>
            </div>            
        </div>
            <!-- /.row -->

   
        <div class="row">
                <div class="col-lg-12" id="tasks_list">
                    <div class="alert alert-info alert-dismissable">
                    <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                    <strong>Streaming CAN messages from/to your computer requires the </strong>
                      <button type="button" class="btn btn-default navbar-btn" onclick="$('#action_download_canmapper_dialog').modal();">
                        <span class="glyphicon glyphicon-cloud-download" aria-hidden="true"></span>&nbsp;CAN Mapping Tool
                      </button>
                    .
                    </div>
                </div>
            <!-- /.row -->
        </div>



        <!-- /#page-wrapper -->
    </div>

    <!-- /#wrapper -->
</div>


<script src="/jquery/js/jquery.min.js"></script>
<script src="/bootstrap/js/bootstrap.min.js"></script>
<script src="/jquery-ui/jquery-ui.min.js"></script>
<script src="/datatables/js/jquery.dataTables.min.js"></script>
<script src="/datatables-plugins/dataTables.bootstrap.min.js"></script>
<script src="/datatables-responsive/dataTables.responsive.js"></script>
<script src="/chartjs/Chart.js"></script>
<script src="/bootstrap-notify/bootstrap-notify.js"></script>
<script src="/cepscloud-ui/widget_properties_panel.js"></script>
<script src="/cepscloud-ui/widget_toggle_signal.js"></script>
<script src="/cepscloud-ui/widget_plot_signal.js"></script>
<script src="/cepscloud-ui/persistence.js"></script>

<script>
  let sim_cores = undefined;
  let current_info = undefined;
  let hub_url = undefined;
  let update_available_simulations_table_time_elapsed_to_retry_connect = undefined;
  let command_ws_url = "<%=command_ws_url%>";
  let update_available_simulations_table_retry_timeout = undefined;
  let loader_icon_timeout = undefined;
  let cmd_ws = undefined;

</script>

<script>
    var available_simulations_table_ctrl= undefined;
    var available_simulations_table_columns = [
            { title: "Name" },
            { title: "Repository" },
            { title: "Status" },
            { title: "Action" }
       ];
    function stop_update_available_simulations_table_retry_timeout() {
            if (update_available_simulations_table_retry_timeout == undefined) return;
            window.clearTimeout(update_available_simulations_table_retry_timeout);
            update_available_simulations_table_retry_timeout = undefined;
    }

    function kill_loader_icon_timeout() {
        if (loader_icon_timeout == undefined) return;
        window.clearTimeout(loader_icon_timeout);
        loader_icon_timeout = undefined;
    }

    function sim_core_info_changed(a,b){
        if (b == undefined) return true;
        if (a.length != b.length) return true;
        for(let e of a){
            let found = false;
            for(ee of b){
                if (ee.name == e.name){
                    if (ee.status != e.status) return true;
                    found=true;break;
                }
            }
            if (!found) return true;
        }        
        return false;
    }

    function setup_cmd_socket(ws_url){
        if (cmd_ws != undefined) return;
        cmd_ws = new WebSocket(ws_url);
        cmd_ws.addEventListener("open", () => {

        });
        cmd_ws.addEventListener("close", () => {cmd_ws = undefined;});
        cmd_ws.addEventListener("error", () => {cmd_ws = undefined;});
    }

    function kill_sim_core(idx){
        if (cmd_ws == undefined) return;
        let sc = sim_cores[idx];
        sc.status = "terminating";        
        cmd_ws.send(`{"cmd":"kill","name":"${sc.name}"}`);
        $(`#stop_${idx}`).prop("disabled",true);
    }

    function delete_sim_core(idx){
        if (cmd_ws == undefined) return;
        let sc = sim_cores[idx];
        cmd_ws.send(`{"cmd":"delete","name":"${sc.name}"}`);
        $(`#delete_${idx}`).prop("disabled",true);
    }

    function start_sim_core(idx){
        if (cmd_ws == undefined) return;
        let sc = sim_cores[idx];
        cmd_ws.send(`{"cmd":"launch","name":"${sc.name}"}`);
        $(`#run_${idx}`).prop("disabled",true);
    }

    function update_available_simulations_table(){
        
        loader_icon_timeout = setTimeout(() => {$("#available_simulations_table_loading_info").css("display","");}, 1000 );        
        
        function main(info){           
         if (sim_core_info_changed(info.sim_cores,sim_cores)){ 
            console.log("Simulation Cores Table Changed");
            sim_cores = info.sim_cores;
            do_update_available_simulations_table(available_simulations_table_columns);            
         }
         setTimeout(() => {$("#available_simulations_table_loading_info").css("display","none");},0);
         setTimeout(() => {update_available_simulations_table();},1000);
         kill_loader_icon_timeout();
        }

        let command_ws = new WebSocket(command_ws_url);
        command_ws.addEventListener("open", on_ws_initial_connect);
        command_ws.addEventListener("close", on_ws_close);
        command_ws.addEventListener("error", on_ws_error);        
        function on_ws_initial_connect(){
            command_ws.addEventListener("message", (msg_raw)=>{
                command_ws.close();
                console.log(msg_raw.data);
                let msg = JSON.parse(msg_raw.data);
                if (msg.ok){
                    setup_cmd_socket(command_ws_url);
                    main(msg.result);
                }
            });
            command_ws.send('{"cmd":"info"}');
        }

        function on_ws_close(){}
        function on_ws_error(){
            update_available_simulations_table_time_elapsed_to_retry_connect = 10;
            let msgbox = $.notify({/* options*/message: `Failed to connect with cepSCloud <small>(url:${command_ws_url})</small>
                <p></p>
                <button type="button" 
                        class="btn btn-primary btn-xs" 
                        data-dismiss="alert" 
                        onclick="stop_update_available_simulations_table_retry_timeout();update_available_simulations_table();">
                        Try again in
                        <span id="info_btn_log_again">${update_available_simulations_table_time_elapsed_to_retry_connect}</span> seconds</button>&nbsp;&nbsp;`
            },
                {/*settings*/ delay: 0, type: 'danger', showProgressbar: false,
                    animate: { enter: 'animated zoomInDown', exit: 'animated zoomOutUp' }
                }
            );
            function time_elapsed_to_retry_connect_fn(){
                --update_available_simulations_table_time_elapsed_to_retry_connect;
                if (update_available_simulations_table_time_elapsed_to_retry_connect <= 0) {
                    if (msgbox != undefined) {
                        msgbox.close();
                        setTimeout(() => { update_available_simulations_table(); }, 100);
                    }
                } else {
                    $("#info_btn_log_again").html(update_available_simulations_table_time_elapsed_to_retry_connect.toString());
                    update_available_simulations_table_retry_timeout = setTimeout(time_elapsed_to_retry_connect_fn, 1000);
                }
            }
            update_available_simulations_table_retry_timeout = setTimeout(time_elapsed_to_retry_connect_fn, 1000);
        }

        function do_update_available_simulations_table(cols){
            let dt = [];
            let ctr = 0;
            for (let e of sim_cores) {
                let status_html = `<span class="label label-danger">Not Available</span>`;
                let link_html = "";
                let actions_html = "";
                let id = ctr;

                let run_btn = `<button 
                                  id="run_${id}" 
                                  type="button"
                                  onclick="start_sim_core(${id});" 
                                  class="btn btn-default btn-xs" ${ e.status == "terminated" ? "" : "disabled"}><span class="glyphicon glyphicon-play" aria-hidden="true"></span></button>`;

                let stop_btn = `<button 
                                  id="stop_${id}" 
                                  type="button"
                                  onclick="kill_sim_core(${id});" 
                                  class="btn btn-default btn-xs"
                                  ${ e.status != "running" ? "disabled" : ""}><span class="glyphicon glyphicon-stop" aria-hidden="true"></span></button>`;
                let remove_btn = `<button 
                                  id="delete_${id}"
                                  onclick="delete_sim_core(${id});" 
                                  type="button" 
                                  class="btn btn-default btn-xs"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>`;
                let upload_btn = `<button 
                                  id="run_${id}" 
                                  type="button" 
                                  class="btn btn-default btn-xs"><span class="glyphicon glyphicon-cloud-upload" aria-hidden="true"></span></button>`;

                if (e.status == "down")
                 status_html = `<span class="label label-warning">Down</span>`;
                else if (e.status == "terminated")
                 status_html = `<span class="label label-danger">Terminated</span>`;
                else if (e.status == "launching")
                 status_html = `<span class="label label-info">Launching</span>`;
                else if (e.status == "running")
                 status_html = `<span class="label label-success">Running</span>`;
                else if (e.status == "create")
                 status_html = `<span class="label label-info">Initializing</span>`;
                else if (e.status == "git_init")
                 status_html = `<span class="label label-info">Creating Repo</span>`;
                else if (e.status == "terminating")
                 status_html = `<span class="label label-warning">Shutting Down</span>`;

                if (e.status == "running")
                 link_html = `<a href="#" id="sel_sim_${ctr}">${e.name}</a>`;
                else 
                 link_html = `<span class="disabled" style="color:grey;">${e.name}</span>`;

                 actions_html = `<div class="btn-group btn-group-xs" role="group">${run_btn}${stop_btn}${upload_btn}</div>
                                 &nbsp;&nbsp;&nbsp;<div class="btn-group btn-group-xs" role="group">${remove_btn}</div>`;

                dt.push([link_html,
                "--",
                `${status_html}`,
                `${actions_html}`]);
                ++ctr;
            }
            
            if (available_simulations_table_ctrl == undefined){
                available_simulations_table_ctrl = $('#available_simulations_table').DataTable({
                select: {
                    style: 'single'
                },
                data: dt,
                columns: cols
                });
            } else available_simulations_table_ctrl.clear().rows.add(dt).draw()
        }        
    } 
    function main(){
        update_available_simulations_table();
    }
</script>

<script>
   var do_action_add_behaviour; 
   $(document).ready(function() {
     main();
    });
</script>

</body>
</html>