Guard g_position_changed;
val threshold_position_changed = 0.1; 
Systemstate sum_dx,sum_dy;
Systemstate last_x,last_y;

Globals{
 sum_dx = 0.0;
 sum_dy = 0.0;
 last_x = position.x;
 last_y = position.y;
};

Event vehicle_integrate_position, vehicle_check_status, vehicle_moving, vehicle_standstill;

Statemachine{
 id         {Vehicle;};cover{cover_edges_upto_1;};
 States     {Initial; Moving; Standstill;};

 Transition{Initial;Initial;vehicle_integrate_position;integrate_pos;};
 Transition{Initial;Initial;vehicle_check_status;check_for_movement;};
 Transition{Initial;Moving;vehicle_moving;};
 Transition{Initial;Standstill;vehicle_standstill;};
 Transition{Initial;Initial;vehicle_moving;};
 Transition{Initial;Initial;vehicle_standstill;};
 Transition{Moving;Standstill;vehicle_standstill;};
 Transition{Standstill;Moving;vehicle_moving;};
 
 on_enter{
  start_periodic_timer(0.5*s,vehicle_check_status);
  start_periodic_timer(0.1*s,vehicle_integrate_position);
 }; 
 
 Actions{
  integrate_pos{
   sum_dx = sum_dx + abs(position.x-last_x);sum_dy = sum_dy + abs(position.y-last_y);
   last_y = position.y;
   last_x = position.x;
   };
   check_for_movement{
    if (sum_dx + sum_dy > 0.01){vehicle_moving;}
    else {vehicle_standstill;}
    sum_dx = 0.0;
    sum_dy = 0.0;
   };
 };
};