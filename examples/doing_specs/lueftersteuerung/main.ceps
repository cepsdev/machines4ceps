kind Systemstate;
kind Event;
kind Guard;

Systemstate motor_temperatur;
Systemstate luefter_drehung;

Statemachine{
  id{mod_z;};
  States{Initial;n1;};
  Transition{Initial;n1;};
};

partition{
 id = vp_motor_temperatur;
 {motor_temperatur <= 1.0;niedrig;};
 {motor_temperatur > 2.0 && motor_temperatur <= 3.0;mittel;};
 {motor_temperatur > 3.0; hoch;};
};

signal{
 id = signal_1;
 delta_t = 0.2*s;
 values{3.0;};
};

signal{
 id = signal_2;
 delta_t = 0.1*s;
 values{
  for(i : 1 .. 3 j : 1 .. 10 ) { i+(j-1)/10.0; }
 };
};

Statemachine{
  id{S;};
  States{Initial;s1;};
  Actions{
    a{print("motor_temperatur = ", motor_temperatur, "\n");};    
  };
  Transition{Initial;Initial;changed(motor_temperatur) && in_state(S.Initial);a;};
};

Event EXIT;
Simulation{
 start_timer(2.0*s,EXIT);
 luefter_drehung = 0;
 motor_temperatur = 1.0;
 start_signal(signal_2,motor_temperatur);
 Start{mod_gen_stdvpart_vp_motor_temperatur;};
};




