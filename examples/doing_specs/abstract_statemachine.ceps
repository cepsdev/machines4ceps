kind instantiate; 
kind StatemachineModifier;kind Event;kind Systemstate;kind Guard;kind Systemparameter;kind State;
Event evA,evB,evC;
StatemachineModifier abstract,final;


Statemachine{
 id{AbstractStatemachine;};
 abstract;
 States{Initial;State1;State2;};
 Transition{Initial;State1;evA;};
 Transition{State1;State2;evB;};
};

Statemachine{id{State1Implementation;};
 States{Initial;SubState1;SubState2;};
 on_enter{print("State1Implementation.on_enter();\n");};
 on_exit{print("State1Implementation.on_exit();\n");};
 Actions{
  a{
   print("State1Implementation.a()\n");
  };
 };
 Transition{Initial;SubState1;a;}; 
};


Statemachine{
 id{AbstractStatemachine2;};
 abstract;
 States{Initial;State2;};
 Statemachine{id{State1;};
 States{Initial;SubState1;SubState2;};
 on_enter{print("State1Implementation.on_enter();\n");};
 on_exit{print("State1Implementation.on_exit();\n");};
 Actions{
  a{
   print("State1Implementation.a()\n");
  };
 };
 Transition{Initial;SubState1;a;}; 
};

 Transition{Initial;State1;evA;};
 Transition{State1;State2;evB;};
};



Statemachine{id{State2Implementation;};
 States{Initial;SubState1;SubState2;};
 Actions{
  a{
   print("State1Implementation.a()\n");
  };
 };
 Transition{Initial;SubState1;a;}; 
};



instantiate InstantiationOfAbstractStatemachine;
InstantiationOfAbstractStatemachine = AbstractStatemachine(State1=State1Implementation,State2=State2Implementation);



Simulation{
 print("#1\n");
 Start{InstantiationOfAbstractStatemachine;};
 //Start{AbstractStatemachine2;};
 evA;
 evB;
};


Simulation{
 print("#2\n");
 //Start{InstantiationOfAbstractStatemachine;};
 Start{AbstractStatemachine2;};
 evA;
 evB;
};


Actions{a{};};
