/*
Example for guards and actions in Oblectamenta assembler.
*/

kind Guard;

oblectamenta{
 global{
   data{
        OblectamentaDataLabel i,n,one;
        i; 0; // counting index
        n; 100000; // number of iterations
        one; 1; 
    };
 };
};

Guard g;
g = oblectamenta{
    text{
        asm{
            OblectamentaDataLabel i,one,n;
            ldi32(i);
            ldi32(n);
            subi32;
            sti32(ARG0);
            halt;
        };
    };
};

Guard g_not;
g_not = oblectamenta{
    text{
        asm{
            OblectamentaDataLabel i,one,n;
            ldi32(i);
            ldi32(n);
            subi32;
            noti32;
            sti32(ARG0);
            halt;
        };
    };
};


/*
Slow way of counting, should still run reasonably fast.
*/
sm{
    CountingMachine;
    states{Initial;Count;Done;};
    Actions{
        doIncrementCounter{
            oblectamenta{
                        text{
                            asm{
                                OblectamentaDataLabel i, n, one;
                                ldi32(i);
                                ldi32(one);
                                addi32;
                                sti32(i);
                                halt;
                            };
                        };
            };
        };
        doPrintCounter{
            oblectamenta{
                        text{
                            asm{
                                OblectamentaDataLabel i, n, one;
                                dbg_printlni32(i);
                                halt;
                            };
                        };
            };
        };
    };
    t{Initial;Count;};
    t{Count;Count;g;doIncrementCounter;};
    t{Count;Done;g_not;doPrintCounter;};
};

Simulation{
    Start{CountingMachine;};
};
