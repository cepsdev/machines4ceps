/*
 Actions can contain portable assembler code. Portable assembler code is executed by a virtual vm (oblectamenta vm) or directly after 
 compilation to the current cpu's machinecode (if the backend supports it).
*/


kind Event;
kind Guard;
kind Systemstate;


oblectamenta{
 global{
   data{
        OblectamentaDataLabel array,i,n,x,j,cur_m,four, one;
        cur_m; -1; // int32_t cur_sm = -1;
        i; 0; // int32_t i = -1;
        array; 4;1;7;9;2;5;8;10;3;6; // int32_t array[10] = {4,1,7,9,2,5,8,10,3,6S};
        n; 10; // int32_t n = -1;
        four; 4; // int32_t four = -1;
        one; 1; // int32_t one = 1;
    };
 };
};

sm{
    S;
    states{Initial;A;};
    Actions{
        doFindMaxElement{
            oblectamenta{
                        text{
                            asm{
                                OblectamentaDataLabel array,i,four,one,cur_m, n;
                                OblectamentaCodeLabel done,loop,loop_tail;
                                dbg_printlni32(cur_m); //Pseudo opcode for printing i32 to stdout
                            loop;
                                ldi32(i); // COMPUTE_STACK[CSP] = *i;CSP = CSP - 4; 
                                ldi32(n); // COMPUTE_STACK[CSP] = *n;CSP = CSP - 4;
                                subi32;   // COMPUTE_STACK[CSP + 8] = COMPUTE_STACK[CSP + 4] - COMPUTE_STACK[CSP + 8]; CSP = CSP - 4;
                                blteqzeroi32(done); // if (*i >= *n) goto done;

                                ldi32(i);    // COMPUTE_STACK[CSP] = *i;CSP = CSP - 4;
                                ldi32(four); // COMPUTE_STACK[CSP] = *four;CSP = CSP - 4;
                                muli32;      // COMPUTE_STACK[CSP + 8] = COMPUTE_STACK[CSP + 4] * COMPUTE_STACK[CSP + 8]; CSP = CSP - 4;
                                ui32toui64;  // COMPUTE_STACK[CSP + 4] = (uint64_t) COMPUTE_STACK[CSP + 4]; CSP = CSP - 4;
                                lea(array);                         
                                addi64;
                                ldsi32; // array[i] on top of stack
                                ldi32(cur_m);
                                subi32;
                                bgteqzeroi32(loop_tail);
                                ldi32(i);
                                ldi32(four);
                                muli32;
                                ui32toui64;
                                lea(array);
                                addi64;
                                ldsi32; // array[i] on top of stack
                                sti32(cur_m); // cur_m = array[i] 


                                loop_tail;                    
                                ldi32(one);
                                ldi32(i);
                                addi32;
                                sti32(i); // i = i +1 ;
                                buc(loop);

                            done;
                                dbg_printlni32(cur_m);//Pseudo opcode for printing i32 to stdout
                                halt;
                            };
                        };
            };
        };
    };
    t{Initial;A;doFindMaxElement;};
};

Simulation{
    Start{S;};
};