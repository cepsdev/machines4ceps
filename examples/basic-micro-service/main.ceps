
kind Event;
kind Guard;
kind Systemstate;

kind OblectamentaMsgDefDirective;
kind OblectamentaMsgReadDirective;
kind OblectamentaMessageModifier;

OblectamentaMessageTag i32;
OblectamentaMessageTag i64;
OblectamentaMessageTag f64;
OblectamentaMessageTag sz;
OblectamentaMessageModifier all;

OblectamentaMsgDefDirective write;
OblectamentaMsgReadDirective read;
   
OblectamentaDataLabel msg_buffer, accounts, count;

Event evAddAccount;

val max_accounts = 10;


oblectamenta{
 global{
   data{
    count; 0;
    accounts; for (e: 1 .. max_accounts){0;0;}
    msg_buffer; for(e : 1 .. 32) {e;}
   };
 };
};



sm{
    Service;
    states{Initial;Ready;ProcessRequest;};
    Actions{
        doAddAccount{
        oblectamenta{text{asm{
           OblectamentaCodeLabel lbl_table_full;

           lea(count);
           ldsi32;dbg_print_topi32;
           ldi32(max_accounts);
           blteq(lbl_table_full);
           lea(count);ldsi32;ldi32(1);addi32;lea(count);stsi32; // count = count + 1

            msg{
                read;
                msg_buffer;
                Account{
                    a{
                        i32;
                        dbg_print_topi32;
                        discardtopi32;
                    };
                    b{
                        i32;
                        dbg_print_topi32;
                        discardtopi32;
                    };
                };
            };
            lbl_table_full;assert_empty_cs;
        };};};
        };
    };
    t{Initial;Ready;};
    t{Ready;Ready;evAddAccount;doAddAccount;};
};

sm{
    Client;
    Actions{
      doRequest{
        oblectamenta{text{asm{
         dbg_print_cs_and_regs(0); halt;
         msg{
            write;
            msg_buffer;
            Account{
             a{ldi32(6);i32;};
             b{ldi32(6256);i32;};
            };
         };
         for(i : 1 .. 20){evAddAccount;} // generates 20 evAddAccount events statically, 
                                         // i.e. the for loop is evaluated during compilation.
                                         // Run `ceps main.ceps --pe --format ansi` for more details.
                                          
        };};};
      };
    };
    states{Initial;Request;WaitForReply;Final;};
    t{Initial;Request;doRequest;};
};

Simulation{
    Start{Service;Client;};
};