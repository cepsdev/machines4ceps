
kind Event;
kind Guard;
kind Systemstate;

kind OblectamentaMsgDefDirective;
kind OblectamentaMsgReadDirective;
kind OblectamentaMessageModifier;

OblectamentaMessageTag i32;
OblectamentaMessageTag i64;
OblectamentaMessageTag f64;
OblectamentaMessageTag sz;
OblectamentaMessageModifier all;

OblectamentaMsgDefDirective write;
OblectamentaMsgReadDirective read;
   
OblectamentaDataLabel msg_buffer, accounts, count, client_count;

Event evAddAccount, evReplyOK, evReplyNOKTableFull, evPrintTable;

val max_accounts = 32;
val entry_len = 8;
val offs_a = 0;
val offs_b = 4;
val max_client_requests = 12;


oblectamenta{
 global{
   data{
    count; 0;
    accounts; for (e: 1 .. max_accounts){0;0;}
    msg_buffer; for(e : 1 .. 32) {e;}
    client_count;0;
   };
 };
};

sm{
    Service;
    states{Initial;Ready;ProcessRequest;};
    Actions{
        doAddAccount{
         oblectamenta{text{asm{
           OblectamentaCodeLabel lbl_table_full;
           lea(count);
           ldsi32;
           ldi32(max_accounts);
           blteq(lbl_table_full);           
           lea(count);ldsi32;ldi32(entry_len);muli32;sti32(R0); // R0 = count * entry_len;
           lea(count);ldsi32;ldi32(1);addi32;lea(count);stsi32; // count = count + 1
           lea(accounts);ldi64(R0);addi64;sti64(R1);
           msg{
                read;
                msg_buffer;
                Account{
                    a{
                        i32;
                        ldi64(offs_a);
                        ldi64(R1);
                        addi64;
                        stsi32;
                    };
                    b{
                        i32;
                        ldi64(offs_b);
                        ldi64(R1);
                        addi64;
                        stsi32;
                    };
                };
            };
            assert_empty_cs;
            evReplyOK;halt;
            lbl_table_full;evReplyNOKTableFull;
         };};};
        };
    };
    t{Initial;Ready;};
    t{Ready;Ready;evAddAccount;doAddAccount;};
};

sm{
    Client;
    Actions{
      doRequest{
        oblectamenta{text{asm{
           msg{
            write;
            msg_buffer;
            Account{
             a{ldi32(10);lea(client_count);ldsi32;addi32;i32;};
             b{ldi32(100);lea(client_count);ldsi32;addi32;i32;};
            };
           };
           lea(client_count);ldsi32;ldi32(1);addi32;lea(client_count);stsi32; // client_count = client_count + 1
         evAddAccount;                            
        };};};
      };
    };
    states{Initial;Request;WaitForReply;Final;};
    t{Initial;Request;};
    t{Request;WaitForReply;doRequest;};
    t{WaitForReply;Request;evReplyOK;};
    t{WaitForReply;Final;evReplyNOKTableFull;};
};

sm{
    TablePrinter;
    states{Initial;Print;};
    Actions{
     doPrintTable{oblectamenta{text{asm{
        OblectamentaCodeLabel lbl_done, lbl_loop;
        lea(accounts); sti64(R0);      // R0 = address of accounts
        lea(count);ldsi32;sti32(R1);   // R1 = number of stored entries
        ldi32(entry_len); sti32(R2);   // R2 = size of enry in bytes
        ldi32(0); sti32(R3);           // R3 = 0
        lbl_loop;
        ldi32(R3);ldi32(R1);           // CS = ...|R3(i32)|R1(i32)|
        blteq(lbl_done);               // if R1 <= R2 (<=> #entries <= counter) then gotot lbl_done
        ldi64(R0);ldi64(R3);ldi64(R2);muli64;addi64; // CS = ...|Address of R3th entry|
        duptopi64;
        ldsi32;
        dbg_print_topi32;
        discardtopi32;
        ldi64(offs_b);
        addi64;
        ldsi32;
        dbg_print_topi32;
        discardtopi32;
        ldi32(R3);ldi32(1);addi32;sti32(R3); // R3 = R3 + 1
        buc(lbl_loop);
        lbl_done;
        assert_empty_cs;        
     };};};};
    };
    t{Initial;Print;evReplyOK;doPrintTable;};
    t{Print;Initial;};
};

Simulation{
    Start{Service;Client;TablePrinter;};
};






