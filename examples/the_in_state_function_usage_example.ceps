kind Systemstate;
kind Guard;
kind Event;


Guard g1,g2,g3,g4;
Systemstate v1,v2,v3;
Event e,f,g,h,i;

Statemachine
{
 id{Sm_1;};
 States{Initial;Final;s1;s2;s3;};
 Actions{a1{e;f;};a2;a3{g;h;};};
 Transition{Initial;s1;e;g1;a1;a2;a3;};
};

Statemachine
{
 id{Sm_2;};
 States{Initial;Final;s1;s2;s3;};
 Transition{Initial;s1;i;in_state(Sm_1.s1,Sm_1.s1);};
};


Statemachine{
   id{A;};
   States{Initial;a;b;c;};
   Transition{Initial;a;e;};
   Transition{Initial;b;e;};
};
Statemachine{
   id{B;};
   States{Initial;};
   Actions{
   a{
       print("Action B.a.\n");
       if (in_state(A.a, A.b)) print("A.a and A.b are active.\n");
    };
   };
   Transition{Initial;Initial;f;a;};
};

TC1 {
 1 && 2 || 3;
 v2 = 1;
 v1 = 1;
 g4 = 1;
};

TC1 {
 g3 = v2 && g4;
 g2 = g3 || v2;
 g1 = v1 && g2;
};


Simulation
{
 TestCase{TC1;};Test{T1;}; 
 Start{Sm_1;Sm_2;};
 e;
 ASSERT_CURRENT_STATES_CONTAINS{Sm_1.s1;};
 ASSERT_CURRENT_STATES_CONTAINS_NOT{Sm_2.s1;};
 i;
 ASSERT_CURRENT_STATES_CONTAINS{Sm_2.s1;};
 ASSERT_CURRENT_STATES_CONTAINS{Sm_1.s1;}; 
};

Simulation
{ 
  TestCase{The_in_state_function;};Test{takes_a_variable_parameter_list_of_states_and_returns_true_iff_each_state_in_the_list_is_active;};
  Start{A;B;};e;f;
};








