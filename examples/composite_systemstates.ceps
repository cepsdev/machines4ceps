/*
 * 
 * @author Tomas Prerovsky <tomas.prerovsky@gmail.com> 
 * 
 * 
 * 
 * @section DESCRIPTION
 * 
 * Part of SM4cepS (State Machines for ceps).
 *
 *
 * Demonstrates usage and semantics of conditionals.
 *
 * 
 */
kind Guard;
kind Event;
kind Systemstate;

Event E,F,G,H;
Systemstate s1,s2,s3,t;
Guard g;

typedef{
  t_composite{
    a {
    b {1;};
    c {2;};
    };
  };
  
  
};

typedef{
  t_Z_drive {
    MAST_INDEXPOSITION {1050;};
    MAST_ZURRPOSITION  {2;};
    MAST_MAXHOEHE      {3280;};
    MAST_MINHOEHE      {750;};
    POSITION_TOLERANCE {1;};
    SPEED_MAX          {255;};
    
    Baudrate;
    NodeID;
    SpeedLimit;
    
    Drehrichtung {1.0;};
    Hublaenge    {3290.0;};
    Getriebe     {25.0;};
    Zwischenstufe{2.85;};
    Steigung     {40.0;};
    
    IstPos;
    IstGeschw   {1;};
    IstStrom;
    Status;
    
    SollPos;
    SollGeschw  {1;};
    SollStrom;
    Control      {0x0;};
    
    IstMasthoehe {2;};
  };
};

Globals{
  s2 = t_composite;
  g = s1 >= s2.a.b;
  s3 = t_Z_drive;
//  s3.Baudrate = t_composite;
};

// event payload
//composites zuweisen

Statemachine{
  id{S2;};
};

Statemachine{
  id{S1;};
  States{Initial;b;c;d;e;f;h;};
 
  Statemachine{
   id{A;};
   States{Initial;b;c;d;e;f;h;};
   on_enter{
    print("***A::on_enter:\n");
    if (!in_state(S1.A.Initial)) print (" A.Initial is not yet element of the set of current states.\n");
   };
    
   on_exit{
    print("***A::on_exit:\n");
    if (in_state(S1.A.Initial)) print (" A.Initial is element of the set of current states.\n");
    };  
   
   Transition{Initial;S2;F;};
  };
  
  Actions{
    sub_action{print("***S1::sub_action:\n");};
    action1{
     s1 = 1;
     print(1,2,3,4,5,"\n");
     print("s1 = ",s1,"\n");
     print("s2.a.b == ",s2.a.b,"\n");
     if (s2.a.b + 1 == 2) {print("s2.a.b == 1\n");}
     s2.a.b = 3;
     print("s2.a.b == ",s2.a.b,"\n");     
    };
  };  
 
  Transition{Initial;A;E;action1;g;};
};

/**
 * @section DESCRIPTION
 * 
 * Base scenario 1: Moving along epsilon-transitions.
 * 
 * */
Simulation
{
  s1 = 1;//s2 = t_composite;
  TestCase{Conditionals;};Test{CanBeUsedInActions;};
  Start{S1;};
  E;
  F;
  //ASSERT_CURRENT_STATES_CONTAINS{S1.d;S1.g;};  
};