kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

differentiable_program{
    OblectamentaDataLabel x, v;
    computation_graph{
            array(x,f32,base(0));//declares x as an array of f32 starting at address 0, the array size is deduced from the computation graph.       
            v(1) = x(1);
            v(2) = x(2);
            v(3) = v(1) * v(2);
            v(4) = sin(v(2));
            v(5) = exp(v(3));
            v(6) = v(3) - v(4);
            v(7) = v(5) + v(6);
    };
};
val the_asm_code = undef;

Scenario{
    OblectamentaDataLabel result,x0,x1,x2,v0,v1,v2,v3,v4,v5,v6,v7;
    title{label __ title = "Compile and Run Computation Graph";};
    Given{
        root.differentiable_program.computation_graph;
     };
    When{
         let the_asm_code = 
         operation(
          compile_diffprog{
            kind OblectamentaOption;
            OblectamentaOption listing, debug_info;
            options{
                listing;debug_info;
            };
            differentiable_program{
                OblectamentaDataLabel x;
                root.differentiable_program.computation_graph;
            };
          }
        );
     };
     let the_vm = operation(
         run{
            vm{
                data{                    
                x0;0.0;x1;1.1;x2;1.1;
                v0;0.0;v1;0.0;v2;0.0;v3;0.0;v4;0.0;v5;0.0;v6;0.0;v7;0.0;0.0;0.0;0.0;
                };
                text{
                 the_asm_code;
                };
            }; 
          }
        );
    Then
    {
    verdict{
        as_double(the_vm.vm.data.content().slice(v1,8)) == 1.1 &&
        as_double(the_vm.vm.data.content().slice(v2,8)) ==  1.1 &&
        as_double(the_vm.vm.data.content().slice(v3,8)) == 1.1*1.1 &&
        as_double(the_vm.vm.data.content().slice(v4,8)) == sin(1.1) &&
        as_double(the_vm.vm.data.content().slice(v5,8)) == exp(1.1*1.1) &&
        as_double(the_vm.vm.data.content().slice(v6,8)) == 1.1 * 1.1 - sin(1.1)  &&
        as_double(the_vm.vm.data.content().slice(v7,8)) == exp(1.1*1.1) +  1.1 * 1.1 - sin(1.1) ;    
     };
    };
};



docinfo_se("==================================== SUMMARY ======================================
");

Summary{
 for( e : root.Scenario){
  e.title.content();e.Then.result.content();
 }
};