kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

val I = 1;

val data_width = 8;

OblectamentaDataLabel y,f,h,b,omega,x,l, v;

input{
 for(i : 1 .. I){
   entry{
    i + 0.0 ; //convert to double
    sin(i + 0.0);
   };
 }
};

weights{
 for(i : 1 .. 4) {1.0 + 0.1 * i;}
};

biases{
 for(i : 1 .. 4) {0.5;}    
};

data_section{
    x;
    val lbls = root.input.content(); 
    for (i : 0 .. I-1){
        lbls.at(i).entry.content().at(0);                
    }
    y;
    for (i : 0 .. I-1){
        lbls.at(i).entry.content().at(1);                
    }
    omega;
    for (w : root.weights.content()){
        w;                
    }
    b;
    for (b : root.biases.content()){
        b;                
    }
    l; //losses
    for (i : 0 .. I-1){
        0.0;                
    }
    f; // activation functions
    for (i : 0 .. 3){
        0.0;                
    }
    h; // hs
    for (i : 0 .. 3){
        0.0;                
    }

};

differentiable_program{ 
        
        computation_graph{
                val cur_addr = 0;
                array(x,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * I ;
                array(y,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * I ;
                array(omega,f64,base(cur_addr));
                let cur_addr = cur_addr + root.weights.content().size() * data_width ;
                array(b,f64,base(cur_addr));
                let cur_addr = cur_addr + root.biases.content().size() * data_width ;
                array(l,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * I ;
                array(f,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * 4 ;
                array(h,f64,base(cur_addr));

            for (i : 0 .. I-1 ){
                f(0)= b(0) + omega(0) * x(i);
                h(1) = sin(f(0));
                f(1) = b(1) + omega(1) * h(1); 
                h(2) = exp(f(1));
                f(2) = b(2) + omega(2)*h(2);
                h(3) = cos(f(2));
                f(3) = b(3) + omega(3) * h(3);
                l(i) = (f(3) - y(i))*(f(3) - y(i));
            }
        };
};

val the_asm_code = undef;

Scenario{
    OblectamentaDataLabel y,f,h,b,omega,x, v;
    

    title{label __ title = "Compile and Run Computation Graph";};
    Given{
        root.differentiable_program.computation_graph;
     };
    When{
         let the_asm_code = 
         operation(
          compile_diffprog{
            kind OblectamentaOption;
            OblectamentaOption listing, debug_info;
            options{
                listing;debug_info;
            };
            differentiable_program{
                root.differentiable_program.computation_graph;
            };
          }
        );
     };
     //"!!!!";the_asm_code;
     let the_vm = operation(
         run{
            vm{
                data{
                    root.data_section.content();
                };
                text{
                 the_asm_code;
                };
            }; 
          }
        );
    "!!!!!";the_vm;
    Then
    {
    verdict{
     };
    };
};



docinfo_se("==================================== SUMMARY ======================================
");

Summary{
 for( e : root.Scenario){
  e.title.content();e.Then.result.content();
 }
};