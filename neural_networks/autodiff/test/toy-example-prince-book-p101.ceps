kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

val I = 10;

val data_width = 8;

OblectamentaDataLabel y,f,h,b,omega,x,l, v, i32zero, i32one, sizeof_weight, diff_params, orig_weight_value, f_plus_h, f_minus_h, partial_derivatives,tot_num_params;

training_set{
 for(i : 1 .. I){
   entry{
    (i + 0.0 ) * 0.1; //convert to double
    sin((i + 0.0 ) * 0.1);
   };
 }
};

dump(
    params{
        file_path{"test.dat";}; 
        data{ for (e : root.training_set.entry){ e.content().at(0);"\t";e.content().at(1);"\n"; }  }; 
    }
);


weights{
 for(i : 1 .. 4) {1.0 + 0.1 * i;}
};

biases{
 for(i : 1 .. 4) {0.5;}    
};

data_section{
    x;
    val lbls = root.training_set.content(); 
    for (i : 0 .. I-1){
        lbls.at(i).entry.content().at(0);                
    }
    y;
    for (i : 0 .. I-1){
        lbls.at(i).entry.content().at(1);                
    }
    diff_params;
    omega;
    for (w : root.weights.content()){
        w;                
    }
    b;
    for (b : root.biases.content()){
        b;                
    }
    l; //losses
    for (i : 0 .. I-1){
        0.0;                
    }
    f; // activation functions
    for (i : 0 .. 3){
        0.0;                
    }
    h; // hs
    for (i : 0 .. 3){
        0.0;                
    }
    partial_derivatives;
    for (w : root.weights.content()){0.0;}
    for (b : root.biases.content()){0.0;}
    i32zero; 0;
    i32one; 1;
    sizeof_weight; 8;
    orig_weight_value; 0.0;
    f_plus_h;0.0; 
    f_minus_h;0.0;
    tot_num_params; root.weights.content().size() + root.biases.content().size();
};

differentiable_program{ 
        
        computation_graph{
                val cur_addr = 0;
                array(x,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * I ;
                array(y,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * I ;
                array(omega,f64,base(cur_addr));
                let cur_addr = cur_addr + root.weights.content().size() * data_width ;
                array(b,f64,base(cur_addr));
                let cur_addr = cur_addr + root.biases.content().size() * data_width ;
                array(l,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * I ;
                array(f,f64,base(cur_addr));
                let cur_addr = cur_addr + data_width * 4 ;
                array(h,f64,base(cur_addr));

            for (i : 0 .. I-1 ){
                f(0)= b(0) + omega(0) * x(i);
                h(1) = sin(f(0));
                f(1) = b(1) + omega(1) * h(1); 
                h(2) = exp(f(1));
                f(2) = b(2) + omega(2)*h(2);
                h(3) = cos(f(2));
                f(3) = b(3) + omega(3) * h(3);
                l(i) = (f(3) - y(i))*(f(3) - y(i));
            }
        };
};

val the_asm_code = undef;

let the_asm_code = 
    operation(
        compile_diffprog{
            differentiable_program{
                root.differentiable_program.computation_graph;
            };
        }
);

val forward_pass = the_asm_code.content();

val one_step = operation(
 run{
        vm{
            data{
                root.data_section.content();
            };
        text{
                asm{
                    forward_pass;halt;
                };
            };
        }; 
    }
);

loss = as_double(one_step.vm.data.content().slice(l,8));


macro numerical_computation_of_gradient{
    OblectamentaDataLabel dw,dh;    
    OblectamentaCodeLabel computation_graph, part_diffs_computation_exit,part_diffs_computation;
        ldi32(i32zero);
        sti32(dw);
    part_diffs_computation;
        ldi32(dw);
        ldi32(tot_num_params);
        subi32;
        blteqzeroi32(part_diffs_computation_exit);
                            
        lea(diff_params);
        ldi32(dw);
        ldi32(sizeof_weight);
        muli32;
        ui32toui64;
        addi64;
        ldsdbl;
        stdbl(orig_weight_value); // orig_weight_value <- diff_params[dw] 
                    
        lea(diff_params);
        ldi32(dw);
        ldi32(sizeof_weight);
        muli32;
        ui32toui64;
        addi64;
        ldsdbl;
        lddbl(dh);
        adddbl; // x + h

        lea(diff_params);
        ldi32(dw);
        ldi32(sizeof_weight);
        muli32;
        ui32toui64;
        addi64;
        stsdbl;
        call(computation_graph); // compute f(x+h)

        lddbl(l);
        stdbl(f_plus_h); //f_plus_h  = f(x+h)

        lddbl(orig_weight_value);
        lddbl(dh);
        negdbl;
        adddbl;
        lea(diff_params);
        ldi32(dw);
        ldi32(sizeof_weight);
        muli32;
        ui32toui64;
        addi64;
        stsdbl;
        call(computation_graph); // compute f(x-h)
                    
        lddbl(l);
        stdbl(f_minus_h); //f_plus_h  = f(x+h)
                    
        lddbl(dh);
        lddbl(dh);
        adddbl;

        lddbl(f_minus_h);
        negdbl;
        lddbl(f_plus_h);
        adddbl;
        divdbl;

        lea(partial_derivatives);
        ldi32(dw);
        ldi32(sizeof_weight);
        muli32;
        ui32toui64;
        addi64;
        stsdbl;

        ldi32(dw);
        ldi32(i32one);
        addi32;
        sti32(dw);
        buc(part_diffs_computation);

        part_diffs_computation_exit;
}; 

val  d_l_d_omega_0 = operation(
 run{
        vm{
            OblectamentaDataLabel dw,dh;

            data{
                root.data_section.content();
                dw; 0;
                dh; 0.00001; // naive (see Numerical Recipes 3ed. pp.229 for better choices)

            };
        text{
                OblectamentaCodeLabel computation_graph, part_diffs_computation_exit,part_diffs_computation;

                asm{
                    numerical_computation_of_gradient{};
                    halt; 
                    computation_graph;
                        forward_pass;
                        ret;
                    halt;
                };
            };
        }; 
    }
);

d_l_d_omega_0.vm;

/*Scenario{
    OblectamentaDataLabel y,f,h,b,omega,x, v;
    

    title{label __ title = "Compile and Run Computation Graph";};
    Given{
        root.differentiable_program.computation_graph;
     };
    When{
         let the_asm_code = 
         operation(
          compile_diffprog{
            kind OblectamentaOption;
            OblectamentaOption listing, debug_info;
            options{
                listing;debug_info;
            };
            differentiable_program{
                root.differentiable_program.computation_graph;
            };
          }
        );
     };
     //"!!!!";the_asm_code;
     let the_vm = operation(
         run{
            vm{
                data{
                    root.data_section.content();
                };
                text{
                 the_asm_code;
                };
            }; 
          }
        );
    "!!!!!";the_vm;
    Then
    {
    verdict{
     };
    };
};



docinfo_se("==================================== SUMMARY ======================================
");

Summary{
 for( e : root.Scenario){
  e.title.content();e.Then.result.content();
 }
};*/