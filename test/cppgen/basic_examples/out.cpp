/* out.cpp 
   CREATED Wed Jun 22 13:56:33 2016

   GENERATED BY the sm4ceps C++ Generator VERSION 0.50 (c) Tomas Prerovsky <tomas.prerovsky@gmail.com>, ALL RIGHTS RESERVED. 
   Requires C++1y compatible compiler (use --std=c++1y for g++) 
   BASED ON cepS VERSION 1.1 (Jun  1 2016) BUILT WITH GCC 5.2.1 20151010 on GNU/LINUX 64BIT (C) BY THE AUTHORS OF ceps (ceps is hosted at github: https://github.com/cepsdev/ceps.git) 
   THIS IS A GENERATED FILE. DO NOT MODIFY.
*/




#include "out.hpp"



void user_defined_init(){
 set_value(systemstates::s1 , 0);
 set_value(systemstates::duration_timer_2 , 0);
 set_value(systemstates::duration_timer_1 , 0.01);
 set_value(systemstates::duration_timer_2 , (5 * systemstates::duration_timer_1.value()));
}
 systemstates::State<int> s1;
 systemstates::State<double> duration_timer_2;
 systemstates::State<double> duration_timer_1;
 void globfuncs::S1__action__a1(){
  start_periodic_timer(systemstates::duration_timer_1.value() , systemstates::ev{"E"} , systemstates::id{"T1"});
  start_periodic_timer(systemstates::duration_timer_2.value() , systemstates::ev("F", {systemstates::Variant{systemstates::s1.value()}}) , systemstates::id{"T2"});
 }
 void globfuncs::S1__action__a2(){
  std::cout<<std::string{R"( :-)) action a2(triggered by E)
)"}<<std::string{R"(Incrementing s1 (old value = )"}<<systemstates::s1.value()<<std::string{R"()
)"};
  set_value(systemstates::s1 , (systemstates::s1.value() + 1));
 }
 void globfuncs::S1__action__a3(){
  std::cout<<std::string{R"(action a3(triggered by F)
)"};
  std::cout<<std::string{R"(s1 = )"}<<systemstates::s1.value()<<std::string{R"(
)"};
  if ((systemstates::s1.value() >= 100)) {
   stop_timer(systemstates::id{"T1"});
   stop_timer(systemstates::id{"T2"});
  }
 }
extern "C" void init_plugin(IUserdefined_function_registry* smc){
smcore_interface = smc->get_plugin_interface();
smc->register_global_init(user_defined_init);
smc->register_action("S1","a1", globfuncs::S1__action__a1);
smc->register_action("S1","a2", globfuncs::S1__action__a2);
smc->register_action("S1","a3", globfuncs::S1__action__a3);

}
std::ostream& operator << (std::ostream& o, systemstates::Variant const & v)
{
 if (v.what_ == systemstates::Variant::Int)
  o << v.iv_;
 else if (v.what_ == systemstates::Variant::Double)
  o << std::to_string(v.dv_);
 else if (v.what_ == systemstates::Variant::String)
  o << v.sv_;
 else
  o << "(Undefined)";
 return o;
}

size_t globfuncs::argc(){
 return smcore_interface->argc();
}sm4ceps_plugin_int::Variant globfuncs::argv(size_t j){
 return smcore_interface->argv(j);
}
void globfuncs::start_timer(double t,sm4ceps_plugin_int::ev ev_){ smcore_interface->start_timer(t,ev_); }
void globfuncs::start_timer(double t,sm4ceps_plugin_int::ev ev_,sm4ceps_plugin_int::id id_){smcore_interface->start_timer(t,ev_,id_);}
void globfuncs::start_periodic_timer(double t ,sm4ceps_plugin_int::ev ev_){smcore_interface->start_periodic_timer(t,ev_);}
void globfuncs::start_periodic_timer(double t,sm4ceps_plugin_int::ev ev_,sm4ceps_plugin_int::id id_){smcore_interface->start_periodic_timer(t,ev_,id_);}
void globfuncs::stop_timer(sm4ceps_plugin_int::id id_){smcore_interface->stop_timer(id_);}
