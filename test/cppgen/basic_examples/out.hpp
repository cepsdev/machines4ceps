/* out.hpp 
   CREATED Sun Jun 26 17:21:17 2016

   GENERATED BY the sm4ceps C++ Generator VERSION 0.50 (c) Tomas Prerovsky <tomas.prerovsky@gmail.com>, ALL RIGHTS RESERVED. 
   Requires C++1y compatible compiler (use --std=c++1y for g++) 
   BASED ON cepS VERSION 1.1 (May 27 2016) BUILT WITH GCC 4.9.0 on GNU/LINUX 64BIT (C) BY THE AUTHORS OF ceps (ceps is hosted at github: https://github.com/cepsdev/ceps.git) 

   Input files (relative paths):
      basic_examples_8.ceps

   THIS IS A GENERATED FILE.

   *** DO NOT MODIFY. ***
*/



#include <iostream>
#include <string>
#include <algorithm>
#include <map>
#include <vector>
#include <cstdlib>
#include "core/include/state_machine_simulation_core_reg_fun.hpp"
#include "core/include/state_machine_simulation_core_plugin_interface.hpp"
#include "user_defined.hpp"

 static Ism4ceps_plugin_interface* smcore_interface; 

namespace systemstates{


 using sm4ceps_plugin_int::Variant;
 using sm4ceps_plugin_int::ev;
 using sm4ceps_plugin_int::id;

 template<typename T> class State{
   T v_;
   bool changed_ = false;
 public:
   State() = default; 
   State(T const & v) { v_ = v;}
   State& operator = (State const & rhs){
     changed_ = v_ != rhs.v_;
     v_ = rhs.v_;
     return *this;
   }
   State& operator = (T const & rhs){
     changed_ = v_ != rhs;
     v_ = rhs;
     return *this;
   }
   bool changed() {auto t = changed_;changed_=false;return t;}
   void set_changed(bool t){changed_=t;}
   T& value() {return v_;}
   T value() const {return v_;} 
  };

 std::ostream& operator << (std::ostream& o, State<int> & v){
  o << v.value();
  return o;
 }

 std::ostream& operator << (std::ostream& o, State<double> & v){
  o << v.value();
  return o;
 }

 
 State<int>& set_value(State<int>& lhs, Variant const & rhs){lhs.set_changed(lhs.value() != rhs.iv_); lhs.value() = rhs.iv_; return lhs;}
 State<int>& set_value(State<int>& lhs, int rhs){lhs.set_changed(lhs.value() != rhs);lhs.value() = rhs; return lhs;}
 State<double>& set_value(State<double>& lhs, double rhs){lhs.set_changed(lhs.value() != rhs);lhs.value() = rhs; return lhs;}
 State<double>& set_value(State<double>& lhs, Variant const & rhs){
  if (rhs.what_ == sm4ceps_plugin_int::Variant::Int) {
   lhs.set_changed(lhs.value() != rhs.iv_); lhs.value() = rhs.iv_;}
  else if  (rhs.what_ == sm4ceps_plugin_int::Variant::Double){
   lhs.set_changed(lhs.value() != rhs.dv_); lhs.value() = rhs.dv_;}

  return lhs;
 }

 State<std::string>& set_value(State<std::string>& lhs, std::string rhs){lhs.set_changed(lhs.value() != rhs);lhs.value() = rhs; return lhs;}

 


 //void queue_event(std::string ev_name,std::initializer_list<Variant> vl = {});




}
namespace guards{

 using Guard = bool(*)();
 using Guard_impl = bool ();

extern Guard System_extend_D_thread_1_D_guard_1;
extern Guard System_extend_D_thread_1_D_guard_2;


extern Guard_impl guard_impl_1;
extern Guard_impl guard_impl_2;

}
namespace globfuncs{

 extern bool in_state(std::initializer_list<sm4ceps_plugin_int::id>);
 extern void start_timer(double,sm4ceps_plugin_int::ev);
 extern void start_timer(double,sm4ceps_plugin_int::ev,sm4ceps_plugin_int::id);
 extern void start_periodic_timer(double,sm4ceps_plugin_int::ev);
 extern void start_periodic_timer(double,sm4ceps_plugin_int::ev,sm4ceps_plugin_int::id);
 extern void stop_timer(sm4ceps_plugin_int::id);
 void start_periodic_timer(double t,sm4ceps_plugin_int::Variant (*fp)(),sm4ceps_plugin_int::id id_);
 void start_periodic_timer(double t,sm4ceps_plugin_int::Variant (*fp)());
 size_t argc();
 sm4ceps_plugin_int::Variant argv(size_t);
 extern bool send(systemstates::id,systemstates::id);

void Ctrl__Dispatch__action__a_kampfschalter_history();
void Ctrl__Dispatch__System_extend__thread_2__Platform_extend__action__a_antenna_to_raise_is_starting();
void Ctrl__Dispatch__System_extend__thread_2__Platform_extend__action__a_z_drive_to_indexposition_is_starting();
void Ctrl__Dispatch__System_extend__thread_2__Platform_extend__action__a_platform_extend_is_starting();
void Ctrl__Dispatch__System_extend__thread_2__Platform_extend__action__a_platform_extend_is_finished();
void Ctrl__Dispatch__System_extend__thread_2__Platform_extend__action__a_platform_extend_preconditions_are_not_met();
void Ctrl__Dispatch__System_extend__thread_2__Platform_extend__Platform_extend_fto_and_alu__thread_2__action__a_antenna_lashing_unlock_starting();
void Dispatch__action__a_kampfschalter_history();
void Dispatch__System_extend__thread_2__Platform_extend__action__a_antenna_to_raise_is_starting();
void Dispatch__System_extend__thread_2__Platform_extend__action__a_z_drive_to_indexposition_is_starting();
void Dispatch__System_extend__thread_2__Platform_extend__action__a_platform_extend_is_starting();
void Dispatch__System_extend__thread_2__Platform_extend__action__a_platform_extend_is_finished();
void Dispatch__System_extend__thread_2__Platform_extend__action__a_platform_extend_preconditions_are_not_met();
void Dispatch__System_extend__thread_2__Platform_extend__Platform_extend_fto_and_alu__thread_2__action__a_antenna_lashing_unlock_starting();
void Platform_extend__action__a_antenna_to_raise_is_starting();
void Platform_extend__action__a_z_drive_to_indexposition_is_starting();
void Platform_extend__action__a_platform_extend_is_starting();
void Platform_extend__action__a_platform_extend_is_finished();
void Platform_extend__action__a_platform_extend_preconditions_are_not_met();
void Platform_extend__Platform_extend_fto_and_alu__thread_2__action__a_antenna_lashing_unlock_starting();
void Platform_extend_fto_and_alu__thread_2__action__a_antenna_lashing_unlock_starting();
void System_extend__thread_2__Platform_extend__action__a_antenna_to_raise_is_starting();
void System_extend__thread_2__Platform_extend__action__a_z_drive_to_indexposition_is_starting();
void System_extend__thread_2__Platform_extend__action__a_platform_extend_is_starting();
void System_extend__thread_2__Platform_extend__action__a_platform_extend_is_finished();
void System_extend__thread_2__Platform_extend__action__a_platform_extend_preconditions_are_not_met();
void System_extend__thread_2__Platform_extend__Platform_extend_fto_and_alu__thread_2__action__a_antenna_lashing_unlock_starting();

}
std::ostream& operator << (std::ostream& o, systemstates::Variant const & v);
