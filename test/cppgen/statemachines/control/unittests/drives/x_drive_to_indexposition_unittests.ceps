Event ev_x_drive_move_to_indexposition, ev_x_drive_is_in_indexposition;

X_drive_to_indexposition_unittests
{
  g_x_drive_has_antrieb_fault   = 0;
  SENSOR_IP_X = 0;  //  g_x_drive_is_in_indexposition = 0;
  g_x_drive_is_operational      = 1;
  SENSOR_KAMPFSCHALTER_A            = 0;
};

Statemachine
{
  id  { sm_Ctrl;  };
  import  { sm_X_drive_to_indexposition;  };
  States  { Initial;  Final;  Error;  };
  Actions
  {
    a_report_error  { print ( "\n\n--- ERROR DETECTED ---\n\n" ); };
  };
  Transition  { Initial;                            sm_X_drive_to_indexposition;  ev_x_drive_move_to_indexposition; };
  Transition  { sm_X_drive_to_indexposition.Final;  Final;                        };
  Transition  { sm_X_drive_to_indexposition.Error;  Error;                                                          a_report_error; };
};

Simulation
{
  TestCase{X_drive_to_indexposition_unittests;};Test{Run_given_ist_winkel_is_lower_than_indexposition;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Idle;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;}; //  arki: up to now not working

  x_drive.IstPos        = -1.33;
//  x_drive.CanIstPos     = X_SollPosition_Berechnen ( x_drive.IstPos );
  x_drive.CanIstPos     = -13000;
  x_drive.SollGeschw    = 10.0;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  x_drive.CanSollPos    = 0;
  ev_x_drive_move_to_indexposition;

  ev_x_drive_sim_control; //  enable
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  brake release
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_x_drive_can_state_response;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  SENSOR_IP_X = 1;
  ev_x_drive_can_state_response;  //  INPOS

  ev_x_drive_sim_control; //  brake apply
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  disable
  ev_x_drive_can_state_response;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};

Simulation
{
  TestCase{X_drive_to_indexposition_unittests;};Test{Run_given_ist_winkel_is_higher_than_indexposition;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Idle;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  x_drive.IstPos        = 0.99;
//  x_drive.CanIstPos     = X_SollPosition_Berechnen ( x_drive.IstPos );
  x_drive.CanIstPos     = 9900;
  x_drive.SollGeschw    = 10.0;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  x_drive.CanSollPos    = 0;
  ev_x_drive_move_to_indexposition;

  ev_x_drive_sim_control; //  enable
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  brake release
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_x_drive_can_state_response;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  SENSOR_IP_X = 1;
  ev_x_drive_can_state_response;  //  INPOS

  ev_x_drive_sim_control; //  brake apply
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  disable
  ev_x_drive_can_state_response;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};

Simulation
{
  TestCase{X_drive_to_indexposition_unittests;};Test{Run_given_ist_winkel_is_equal_to_indexposition;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Disabled;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  SENSOR_IP_X = 1;
  x_drive.IstPos        = x_drive.INDEXPOSITION;
  x_drive.SollGeschw    = 10.0;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  ev_x_drive_move_to_indexposition;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};
  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};
