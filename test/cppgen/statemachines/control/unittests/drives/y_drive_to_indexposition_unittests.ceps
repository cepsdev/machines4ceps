Event ev_y_drive_move_to_indexposition, ev_y_drive_is_in_indexposition;

Y_drive_to_indexposition_unittests
{
  g_y_drive_has_antrieb_fault   = 0;
  SENSOR_IP_Y                   = 0;
  g_y_drive_is_operational      = 1;
  SENSOR_KAMPFSCHALTER_A            = 0;
};

Statemachine
{
  id  { sm_Ctrl;};
  import  { sm_Y_drive_to_indexposition;  };
  States  { Initial;  Final;  Error;  };
  Actions
  {
    a_report_error  { print ( "\n\n--- ERROR DETECTED ---\n\n" ); };
  };
  Transition  { Initial;                            sm_Y_drive_to_indexposition;  ev_y_drive_move_to_indexposition; };
  Transition  { sm_Y_drive_to_indexposition.Final;  Final;                        };
  Transition  { sm_Y_drive_to_indexposition.Error;  Error;                                                          a_report_error; };
};

Simulation
{
  TestCase{Y_drive_to_indexposition_unittests;};Test{Run_given_IstWinkel_is_lower_than_indexposition;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_Y_drive_sim.Idle;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Y_drive_state.Idle;};

  y_drive.IstPos      = -1.33;
//  y_drive.CanIstPos    = Y_SollPosition_Berechnen ( y_drive.IstPos );
  y_drive.CanIstPos   = -13000;
  y_drive.SollGeschw  = 10.0;

  Start { sm_Ctrl;  };
  Start { sm_Y_drive_state; };
  Start { sm_Y_drive_sim; };

  y_drive.CanSollPos  = 0;  //  indexposition
  ev_y_drive_move_to_indexposition;

  ev_y_drive_sim_control; //  enable
  ev_y_drive_can_state_response;

  ev_y_drive_sim_control; //  brake release
  ev_y_drive_can_state_response;

  ev_y_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_y_drive_can_state_response;

  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;

  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;

  y_drive.IstPos      = y_drive.SollPos;
  ev_y_drive_can_state_response;  //  INPOS

  ev_y_drive_sim_control; //  brake apply
  ev_y_drive_can_state_response;

  ev_y_drive_sim_control; //  disable
  ev_y_drive_can_state_response;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};

  //  finish test
  stop_timer ( timer_y_drive_sim_state_response );
};

Simulation
{
  TestCase{Y_drive_to_indexposition_unittests;};Test{Run_given_IstWinkel_is_higher_than_indexposition;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_Y_drive_sim.Idle;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Y_drive_state.Idle;};

  y_drive.IstPos      = 0.99;
//  y_drive.CanIstPos    = Y_SollPosition_Berechnen ( y_drive.IstPos );
  y_drive.CanIstPos   = 9900;
  y_drive.SollGeschw  = 10.0;

  Start { sm_Ctrl;  };
  Start { sm_Y_drive_state; };
  Start { sm_Y_drive_sim; };

  y_drive.CanSollPos  = 0;  //  indexposition
  ev_y_drive_move_to_indexposition;

  ev_y_drive_sim_control; //  enable
  ev_y_drive_can_state_response;

  ev_y_drive_sim_control; //  brake release
  ev_y_drive_can_state_response;

  ev_y_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_y_drive_can_state_response;

  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;

  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;
  ev_y_drive_periodic_moving_timer;

  y_drive.IstPos      = y_drive.SollPos;
  ev_y_drive_can_state_response;  //  INPOS

  ev_y_drive_sim_control; //  brake apply
  ev_y_drive_can_state_response;

  ev_y_drive_sim_control; //  disable
  ev_y_drive_can_state_response;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};

  //  finish test
  stop_timer ( timer_y_drive_sim_state_response );
};

Simulation
{
  TestCase{Y_drive_to_indexposition_unittests;};Test{Run_given_IstWinkel_is_equal_to_indexposition;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_Y_drive_sim.Disabled;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Y_drive_state.Idle;};

  y_drive.IstPos      = 0.0;
  y_drive.SollGeschw  = 10.0;
  SENSOR_IP_Y         = 1;

  Start { sm_Ctrl;  };
  Start { sm_Y_drive_state; };
  Start { sm_Y_drive_sim; };

  ev_y_drive_move_to_indexposition;

  //  finish test
  stop_timer ( timer_y_drive_sim_state_response );
};
