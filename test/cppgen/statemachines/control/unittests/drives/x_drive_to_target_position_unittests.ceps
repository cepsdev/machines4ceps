Event ev_x_drive_move_to_target_position, ev_x_drive_is_in_target_position;

X_drive_to_target_position_unittests
{
  g_x_drive_has_antrieb_fault = 0;
  g_x_drive_is_operational      = 1;
  SENSOR_KAMPFSCHALTER_A            = 0;
};

Statemachine
{
  id  { sm_Ctrl;  };
  import  { sm_X_drive_to_target_position;  };
  States  { Initial;  Final;  Error;  };
  Actions
  {
    a_report_error  { print ( "\n\n--- ERROR DETECTED ---\n\n" ); };
  };
  Transition  { Initial;                              sm_X_drive_to_target_position;  ev_x_drive_move_to_target_position; };
  Transition  { sm_X_drive_to_target_position.Final;  Final;                          };
  Transition  { sm_X_drive_to_target_position.Error;  Error;                                                              a_report_error; };
};

Simulation
{
  TestCase{X_drive_to_target_position_unittests;};Test{Run_given_ist_winkel_is_lower_than_target_position;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Idle;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  x_drive.IstPos      = 0.0;
//  x_drive.CanIstPos    = X_SollPosition_Berechnen ( x_drive.IstPos );
  x_drive.CanIstPos   = 0;
  x_drive.SollGeschw  = 10.0;
//  x_drive.CanSollPos  = X_SollPosition_Berechnen ( 0.47 );
  x_drive.CanSollPos  = 4700;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  ev_x_drive_move_to_target_position(0.47);

  ev_x_drive_sim_control; //  enable
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  brake release
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_x_drive_can_state_response;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  x_drive.IstPos  = x_drive.SollPos;
  ev_x_drive_can_state_response;  //  INPOS

  ev_x_drive_sim_control; //  brake apply
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  disable
  ev_x_drive_can_state_response;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};

Simulation
{
  TestCase{X_drive_to_target_position_unittests;};Test{Run_given_ist_winkel_is_higher_than_target_position;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Idle;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  x_drive.IstPos      = 1.8;
//  x_drive.CanIstPos    = X_SollPosition_Berechnen ( x_drive.IstPos );
  x_drive.CanIstPos   = 18000;
  x_drive.SollGeschw  = 10.0;
//  x_drive.CanSollPos   = X_SollPosition_Berechnen ( 1.47 );
  x_drive.CanSollPos  = 14700;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  ev_x_drive_move_to_target_position(1.47);

  ev_x_drive_sim_control; //  enable
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  brake release
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_x_drive_can_state_response;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  x_drive.IstPos  = x_drive.SollPos;
  ev_x_drive_can_state_response;  //  INPOS

  ev_x_drive_sim_control; //  brake apply
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  disable
  ev_x_drive_can_state_response;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Final;};

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};

Simulation
{
  TestCase{X_drive_to_target_position_unittests;};Test{Run_given_IstWinkel_is_equal_to_target_position;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Disabled;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  x_drive.IstPos       = 0.0;
  x_drive.SollGeschw   = 10.0;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  ev_x_drive_move_to_target_position(0.0);

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};

Simulation
{
  TestCase{X_drive_to_target_position_unittests;};Test{Run_given_target_position_is_higher_than_MAX;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Idle;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Disabled;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  x_drive.IstPos      = x_drive.ARBEITSBEREICH_MAX;
//  x_drive.CanIstPos    = X_SollPosition_Berechnen ( x_drive.IstPos );
  x_drive.CanIstPos   = 90000;
  x_drive.SollGeschw  = 10.0;
//  x_drive.CanSollPos   = X_SollPosition_Berechnen ( 9.0 );
  x_drive.CanSollPos  = 90000;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  ev_x_drive_move_to_target_position(9.0);

  ev_x_drive_sim_control; //  enable
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  brake release
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_x_drive_can_state_response;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  x_drive.IstPos  = x_drive.SollPos;
  ev_x_drive_can_state_response;  //  INPOS

  ev_x_drive_sim_control; //  brake apply
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  disable
  ev_x_drive_can_state_response;

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};

Simulation
{
  TestCase{X_drive_to_target_position_unittests;};Test{Run_given_target_position_is_lower_than_MIN;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Idle;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_sim.Disabled;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_X_drive_state.Idle;};

  x_drive.IstPos      = x_drive.ARBEITSBEREICH_MIN;
//  x_drive.CanIstPos    = X_SollPosition_Berechnen ( x_drive.IstPos );
  x_drive.CanIstPos   = -90000;
  x_drive.SollGeschw  = 10.0;
//  x_drive.CanSollPos   = X_SollPosition_Berechnen ( -9.0 );
  x_drive.CanSollPos  = -90000;

  Start { sm_Ctrl;  };
  Start { sm_X_drive_state; };
  Start { sm_X_drive_sim; };

  ev_x_drive_move_to_target_position(-9.0);

  ev_x_drive_sim_control; //  enable
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  brake release
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  drive-mode funktioniert erste wenn c-funktionen in statemaschinen aufgerufen werden können
  ev_x_drive_can_state_response;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;
  ev_x_drive_periodic_moving_timer;

  x_drive.IstPos  = x_drive.SollPos;
  ev_x_drive_can_state_response;  //  INPOS

  ev_x_drive_sim_control; //  brake apply
  ev_x_drive_can_state_response;

  ev_x_drive_sim_control; //  disable
  ev_x_drive_can_state_response;

  //  finish test
  stop_timer ( timer_x_drive_sim_state_response );
};
