Event ev_z_drive_move_down, ev_z_drive_movement_stopped, ev_z_drive_stop;
// <description>

Z_drive_move_down_unittests
{
  g_z_drive_has_antrieb_fault = 0;
  g_z_drive_is_operational    = 1;
  g_flap_is_open              = 1;
};

Statemachine
{
  id { sm_Ctrl;  };
  import { sm_Z_drive_move_down;  };
  States { Initial;  Final;  Error;  };
  Actions
  {
    a_report_error  { print ( "\n\n--- ERROR DETECTED ---\n\n" ); };
  };
  Transition { Initial;                     sm_Z_drive_move_down; ev_z_drive_move_down; };
  Transition { sm_Z_drive_move_down.Final;  Final;                };
  Transition { sm_Z_drive_move_down.Error;  Error;                                      a_report_error; };
};

Simulation
{
  TestCase{Z_drive_move_down_unittests;};Test{Initialization;};

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Z_drive_state.Idle;};

  z_drive.IstPos  = 200;
//  z_drive.CanIstPos     = Z_SollPosition_Berechnen ( z_drive.IstPos );

  Start { sm_Ctrl; };
  Start { sm_Z_drive_state; };
  Start { sm_Z_drive_sim; };

  z_drive.SollGeschw    = -10.0;
  z_drive.CanSollGeschw = -10000;
  ev_z_drive_move_down ( -10 );

  ev_z_drive_sim_control; //  enable dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg
  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.sm_Z_drive_move_down.sm_Z_drive_move.Prepare_Talin;};

  // pretend that TALIN is prepared
  ev_talin_is_ready_to_be_moved;

  ev_z_drive_sim_control; //  brake release dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.sm_Z_drive_move_down.sm_Z_drive_move.Moving;};

  ev_z_drive_sim_control; //  drive-mode  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response;

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ASSERT(z_drive.CanIstGeschw == -10000);

//  start_timer(2*s,  ev_z_drive_stop);
  ev_z_drive_stop;
  z_drive.CanSollGeschw = 0;  //  dummy
  ev_z_drive_sim_control; //  drive-mode dummy - simulate send CAN-msg

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ASSERT(z_drive.CanIstGeschw == 0);
  ev_z_drive_can_state_response; //  speed dummy - simulate receive CAN-msg

  ev_z_drive_sim_control; //  brake apply dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  ev_z_drive_sim_control; //  disable dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  //  finish test
  stop_timer ( timer_z_drive_sim_state_response );
};
