Event ev_z_drive_move_up, ev_z_drive_move_down, ev_mast_anfahren;

Mast_move_to_target_unittests
{
  y_drive.IstPos              = 90.0;
  g_z_drive_has_antrieb_fault = 0;
  g_z_drive_is_operational    = 1;
  g_flap_is_closed            = 1;
  g_flap_is_open              = 0;
};

// g_z_drive_to_target_position_preconditions = (
//    g_flap_is_closed && 
//    (z_drive.SollPos <= z_drive.MAX_POS) && 
//    (z_drive.SollPos >= z_drive.MAST_MINHOEHE) && 
//    (y_drive.IstPos >= 77.0) && 
//    (z_drive.IstPos <= 3310) && 
//    (z_drive.IstPos >= z_drive.MAST_MINHOEHE)

Statemachine
{
  id  { sm_Ctrl;  };
  import  { sm_Z_drive_to_target_position; };
  States  { Initial;  Final;  Error;  };
  Actions
  {
    a_report_error  { print ( "\n\n--- ERROR DETECTED ---\n\n" ); };
  };
  Transition  { Initial;                              sm_Z_drive_to_target_position;  ev_mast_anfahren; };
  Transition  { sm_Z_drive_to_target_position.Final;  Final;                          };
  Transition  { sm_Z_drive_to_target_position.Error;  Error;                                            a_report_error; };
};

Simulation
{
  TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_all_preconditions_and_mast_in_indexposition;};

  z_drive.IstPos      = z_drive.INDEXPOSITION;
  z_drive.SollGeschw  = 50;

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Final;};
//  ASSERT_EVENTUALLY_VISIT_STATES{sm_Z_drive_state.Disabled;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Talin.Not_Ready;};

  Start { sm_Z_drive_state; };
  Start { sm_Z_drive_sim; };
  Start { sm_Talin; };
  Start { sm_Ctrl;  };

  ev_mast_anfahren(z_drive.INDEXPOSITION + 10.0);
  ev_z_drive_can_control; //  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  ev_z_drive_can_control; //  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  //  finish test
  stop_timer ( timer_z_drive_sim_state_response );
};

Simulation
{
  TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_flap_is_open;};

  g_flap_is_open      = 1;
  g_flap_is_closed    = 0;
  z_drive.IstPos      = z_drive.INDEXPOSITION;
  z_drive.SollGeschw  = 50;

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Error;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.sm_Z_drive_to_target_position.Error;};

  Start { sm_Z_drive_state; };
  Start { sm_Z_drive_sim; };
  Start { sm_Talin; };
  Start { sm_Ctrl;  };

  ev_mast_anfahren(z_drive.INDEXPOSITION + 10);  
  ev_z_drive_can_control; //  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ev_z_drive_can_control; //  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  //  finish test
  stop_timer ( timer_z_drive_sim_state_response );
};

// Simulation{
//   TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_target_position_is_too_high;};
// 
//   z_drive.IstPos      = z_drive.INDEXPOSITION;
//   z_drive.SollGeschw  = 50;
//   
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Error;};
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Z_drive_to_target_position.Error;};
//   
//   Start{sm_Z_drive_state;};
//   Start{sm_Talin;};
//   Start{sm_Ctrl;};
// 
//   ev_mast_anfahren(z_drive.MAX_POS + 10);  
// };

// Simulation{
//   TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_target_position_is_too_low;};
// 
//   z_drive.IstPos      = z_drive.INDEXPOSITION;
//   z_drive.SollGeschw  = 50;
//   
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Error;};
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Z_drive_to_target_position.Error;};
//   
//   Start{sm_Z_drive_state;};
//   Start{sm_Talin;};
//   Start{sm_Ctrl;};
// 
//   ev_mast_anfahren(z_drive.MAST_MINHOEHE - 10);  
// };
// 
Simulation
{
  TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_y_drive_not_in_position;};

  y_drive.IstPos      = 76.0;
  z_drive.IstPos      = z_drive.INDEXPOSITION;
  z_drive.SollGeschw  = 50;

  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Error;};
  ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.sm_Z_drive_to_target_position.Error;};

  Start { sm_Z_drive_state; };
  Start { sm_Z_drive_sim; };
  Start { sm_Talin; };
  Start { sm_Ctrl;  };

  ev_mast_anfahren(z_drive.INDEXPOSITION + 10);  
  ev_z_drive_can_control; //  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;
  ev_z_drive_periodic_moving_timer;

  ev_z_drive_can_control; //  dummy - simulate send CAN-msg
  ev_z_drive_can_state_response; //  dummy - simulate receive CAN-msg

  //  finish test
  stop_timer ( timer_z_drive_sim_state_response );
};

// Simulation{
//   TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_IstMasthoehe_too_high;};
// 
//   z_drive.IstPos      = 3311;
//   z_drive.SollGeschw  = 50;
//   
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Error;};
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Z_drive_to_target_position.Error;};
//   
//   Start{sm_Z_drive_state;};
//   Start{sm_Talin;};
//   Start{sm_Ctrl;};
// 
//   ev_mast_anfahren(z_drive.INDEXPOSITION + 10);  
// };

// Simulation{
//   TestCase{Mast_move_to_target_unittests;};Test{Mast_move_to_target_position_given_IstMasthoehe_too_low;};
// 
//   z_drive.IstPos      = z_drive.MAST_MINHOEHE - 1;
//   z_drive.SollGeschw  = 50;
//   
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Error;};
//   ASSERT_EVENTUALLY_VISIT_STATES{sm_Ctrl.Z_drive_to_target_position.Error;};
//   
//   Start{sm_Z_drive_state;};
//   Start{sm_Talin;};
//   Start{sm_Ctrl;};
// 
//   ev_mast_anfahren(z_drive.INDEXPOSITION + 10);  
// };
