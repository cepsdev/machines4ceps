Event ev_x_drive_is_offline, ev_z_drive_is_offline, ev_y_drive_is_offline, ev_antenna_lashing_lock_timeout, ev_flap_lock_timeout, ev_stilts_lock_timeout, ev_system_pressure_is_low, ev_talin_data_is_invalid, ev_heckverteiler_is_offline, ev_ivenet_lacks_traffic, ev_usv_is_offline, ev_psm_lacks_traffic;
Event ev_trgs_is_online;

GUI_unittests {};

Systemstate counter;
Globals
{
  counter = 0;
};

global_functions
{
  action
  {
    if(counter == 0)
    {
      print("ev_z_drive_is_offline\n");
      ev_z_drive_is_offline;
    } else
    if(counter == 1)
    {
      print("ev_x_drive_is_offline\n");
      ev_x_drive_is_offline;
    } else
    if(counter == 2)
    {
      print("ev_y_drive_is_offline\n");
      ev_y_drive_is_offline;
    } else
    if(counter == 3)
    {
      print("ev_antenna_lashing_lock_timeout\n");
      ev_antenna_lashing_lock_timeout;
    } else
    if(counter == 4)
    {
      print("ev_flap_lock_timeout\n");
      ev_flap_lock_timeout;
    } else
    if(counter == 5)
    {
      print("ev_stilts_lock_timeout\n");
      ev_stilts_lock_timeout;
    } else
    if(counter == 6)
    {
      print("ev_system_pressure_is_low\n");
      ev_system_pressure_is_low;
    } else
    if(counter == 7)
    {
      print("ev_talin_data_is_invalid\n");
      ev_talin_data_is_invalid;
    } else
    if(counter == 8)
    {
      print("ev_heckverteiler_is_offline\n");
      ev_heckverteiler_is_offline;
    } else
    if(counter == 9)
    {
      print("ev_ivenet_lacks_traffic\n");
      ev_ivenet_lacks_traffic;
    } else
    if(counter == 10)
    {
      print("ev_usv_is_offline\n");
      ev_usv_is_offline;
    } else
    if(counter == 11)
    {
      print("ev_psm_lacks_traffic\n");
      ev_psm_lacks_traffic;
    };

    counter = counter + 1;
  };
};

Statemachine
{
  id  { sm_GUI_Tester;  };
  States  { Initial;  Running;  };
  Transition  { Initial;  Running;  };
};

Simulation
{
  TestCase{ExtBG_unittests;};Test{GUI;};

  Start { sm_GUI_Tester;  };

  ev_trgs_is_online;
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  sleep();
  start_periodic_timer(1*s, action);

  //ASSERT_CURRENT_STATES_CONTAINS{ExtBG_error_evaluator.Idle;};

};
