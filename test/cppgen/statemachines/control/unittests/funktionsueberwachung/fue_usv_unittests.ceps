Event ev_usv1_has_heartbeat, ev_usv1_set_operational, ev_usv1_lacks_heartbeat, ev_usv1_is_online, ev_usv1_is_offline;
Event ev_usv2_has_heartbeat, ev_usv2_set_operational, ev_usv2_lacks_heartbeat, ev_usv2_is_online, ev_usv2_is_offline;

Funktionsueberwachung_USV_unittests {};

Event EXIT;

Globals
{
  // Redefinition for test acceleration
  NODE_HEARTBEAT_PERIOD = 0.01; 
};

global_functions
{
  a_stop_usv1_timers
  {
    stop_timer(usv1_supervision_heartbeat_timer);
    stop_timer(usv1_heartbeat_timer);
    EXIT;
  };

  a_stop_usv1
  {
    stop(sm_USV1);
  };
};

// ------------------------------------------------------------------------  
//                  USV_1
// ------------------------------------------------------------------------  
  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV1_becoming_Operational;};

  Start { sm_USV1;  };
  Start { sm_USV1_operational_state;  };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_usv1_timers);

  ASSERT_END_STATES_CONTAINS{sm_USV1.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_USV1_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV1_lacks_multiple_heartbeats_when_being_preoperational;};

  Start { sm_USV1;  };
  Start { sm_USV1_operational_state;  };

  stop(sm_USV1);
  start_timer(3*NODE_HEARTBEAT_PERIOD*s, a_stop_usv1_timers);

  ASSERT_END_STATES_CONTAINS{sm_USV1_operational_state.PreOperational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV1_fails_when_being_preoperational;};

  g_usv1_is_functional = 0;

  Start { sm_USV1;  };
  Start { sm_USV1_operational_state;  };

  start_timer(4*NODE_HEARTBEAT_PERIOD*s, a_stop_usv1_timers);

  ASSERT_END_STATES_CONTAINS_NOT{sm_USV1_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV1_lacks_multiple_heartbeats_when_being_operational;};

  Start { sm_USV1;  };
  Start { sm_USV1_operational_state;  };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_usv1_timers);
  start_timer(5*NODE_HEARTBEAT_PERIOD*s, a_stop_usv1);

  ASSERT_END_STATES_CONTAINS{sm_USV1_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV1_fails_when_being_operational;};

  Start { sm_USV1;  };
  Start { sm_USV1_operational_state;  };

  stop(sm_USV1);
  start_timer(6*NODE_HEARTBEAT_PERIOD*s, a_stop_usv1_timers);

  ASSERT_END_STATES_CONTAINS{sm_USV1_operational_state.Offline;};
};


// ------------------------------------------------------------------------  
//                  USV_2
// ------------------------------------------------------------------------  

global_functions
{
  a_stop_usv2_timers
  {
    stop_timer(usv2_supervision_heartbeat_timer);
    stop_timer(usv2_heartbeat_timer);
    EXIT;
  };

  a_stop_usv2
  {
    stop(sm_USV2);
  };
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV2_becoming_Operational;};

  Start { sm_USV2;  };
  Start { sm_USV2_operational_state;  };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_usv2_timers);

  ASSERT_END_STATES_CONTAINS{sm_USV2.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_USV2_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV2_lacks_multiple_heartbeats_when_being_preoperational;};

  Start { sm_USV2;  };
  Start { sm_USV2_operational_state;  };

  stop(sm_USV2);
  start_timer(3*NODE_HEARTBEAT_PERIOD*s, a_stop_usv2_timers);

  ASSERT_END_STATES_CONTAINS{sm_USV2_operational_state.PreOperational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV2_fails_when_being_preoperational;};

  g_usv2_is_functional = 0;

  Start { sm_USV2;  };
  Start { sm_USV2_operational_state;  };

  start_timer(4*NODE_HEARTBEAT_PERIOD*s, a_stop_usv2_timers);

  ASSERT_END_STATES_CONTAINS_NOT{sm_USV2_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV2_lacks_multiple_heartbeats_when_being_operational;};

  Start { sm_USV2;  };
  Start { sm_USV2_operational_state;  };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_usv2_timers);
  start_timer(5*NODE_HEARTBEAT_PERIOD*s, a_stop_usv2);

  ASSERT_END_STATES_CONTAINS{sm_USV2_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV2_fails_when_being_operational;};

  Start { sm_USV2;  };
  Start { sm_USV2_operational_state;  };

  stop(sm_USV2);
  start_timer(6*NODE_HEARTBEAT_PERIOD*s, a_stop_usv2_timers);

  ASSERT_END_STATES_CONTAINS{sm_USV2_operational_state.Offline;};
};

// ------------------------------------------------------------------------  
//                  USV
// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_USV_unittests;};Test{USV_visit_all_states;};

  Start { sm_USV_operational_state; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};
  g_usv1_is_online = 1;
  ev_usv1_is_online;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};
  g_usv2_is_online = 1;
  ev_usv2_is_online;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Online;};

  g_usv2_is_online = 0;
  ev_usv2_is_offline;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};
  g_usv1_is_online = 0;
  ev_usv1_is_offline;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};

  g_usv2_is_online = 1;
  ev_usv2_is_online;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};
  g_usv1_is_online = 1;
  ev_usv1_is_online;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Online;};

  g_usv1_is_online = 0;
  ev_usv1_is_offline;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};
  g_usv2_is_online = 0;
  ev_usv2_is_offline;
  ASSERT_CURRENT_STATES_CONTAINS{sm_USV_operational_state.Offline;};
};
