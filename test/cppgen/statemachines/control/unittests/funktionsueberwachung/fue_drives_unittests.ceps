// <description>

Funktionsueberwachung_Antriebe_unittests {};

Event EXIT;

Globals
{
  // Redefinition for test acceleration
  DRIVES_HEARTBEAT_PERIOD = 0.01;
  NODE_HEARTBEAT_PERIOD   = 0.01;
};

global_functions
{
  a_stop_x_drive_timers
  {
    stop_timer(x_drive_fue_heartbeat_timer);
    stop_timer(x_drive_os_heartbeat_timer);
    EXIT;
  };

  a_stop_x_drive
  {
    stop(sm_X_drive_fue);
  };
};

// ------------------------------------------------------------------------  
//                  X_DRIVE
// ------------------------------------------------------------------------  

Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{X_drive_becoming_Operational;};

  Start { sm_X_drive_fue; };
  Start { sm_X_drive_operational_state; };

  start_timer(2*DRIVES_HEARTBEAT_PERIOD*s, a_stop_x_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_X_drive_fue.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_X_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{X_drive_is_already_Operational;};

  Start { sm_X_drive_fue; };
  ev_x_drive_set_operational;
  ASSERT_CURRENT_STATES_CONTAINS{sm_X_drive_fue.Operational;};

  Start { sm_X_drive_operational_state; };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_x_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_X_drive_fue.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_X_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{X_drive_lacks_multiple_heartbeats_when_being_preoperational;};

  Start { sm_X_drive_fue; };
  Start { sm_X_drive_operational_state; };

  stop(sm_X_drive_fue);
  start_timer(3*DRIVES_HEARTBEAT_PERIOD*s, a_stop_x_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_X_drive_operational_state.PreOperational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{X_drive_fails_when_being_preoperational;};

  g_x_drive_is_functional = 0;

  Start { sm_X_drive_fue; };
  Start { sm_X_drive_operational_state; };

  start_timer(4*DRIVES_HEARTBEAT_PERIOD*s, a_stop_x_drive_timers);

  ASSERT_END_STATES_CONTAINS_NOT{sm_X_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{X_drive_lacks_multiple_heartbeats_when_being_operational;};

  Start { sm_X_drive_fue; }; 
  Start { sm_X_drive_operational_state; };

  start_timer(2*DRIVES_HEARTBEAT_PERIOD*s, a_stop_x_drive_timers);
  start_timer(5*DRIVES_HEARTBEAT_PERIOD*s, a_stop_x_drive);

  ASSERT_END_STATES_CONTAINS{sm_X_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{X_drive_fails_when_being_operational;};

  Start { sm_X_drive_fue; };
  Start { sm_X_drive_operational_state; };

  stop(sm_X_drive_fue);
  start_timer(6*DRIVES_HEARTBEAT_PERIOD*s, a_stop_x_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_X_drive_operational_state.Offline;};
};


// ------------------------------------------------------------------------  
//                  Y_DRIVE
// ------------------------------------------------------------------------  

global_functions
{
  a_stop_y_drive_timers
  {
    stop_timer(y_drive_fue_heartbeat_timer);
    stop_timer(y_drive_os_heartbeat_timer);
    EXIT;
  };

  a_stop_y_drive
  {
    stop(sm_Y_drive_fue);
  };
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Y_drive_becoming_Operational;};

  Start { sm_Y_drive_fue; };
  Start { sm_Y_drive_operational_state; };

  start_timer(2*DRIVES_HEARTBEAT_PERIOD*s, a_stop_y_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Y_drive_fue.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_Y_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Y_drive_is_already_Operational;};

  Start { sm_Y_drive_fue; };
  ev_y_drive_set_operational;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Y_drive_fue.Operational;};

  Start { sm_Y_drive_operational_state; };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_y_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Y_drive_fue.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_Y_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Y_drive_lacks_multiple_heartbeats_when_being_preoperational;};

  Start { sm_Y_drive_fue; };
  Start { sm_Y_drive_operational_state; };

  stop(sm_Y_drive_fue);
  start_timer(3*DRIVES_HEARTBEAT_PERIOD*s, a_stop_y_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Y_drive_operational_state.PreOperational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Y_drive_fails_when_being_preoperational;};

  g_y_drive_is_functional = 0;

  Start { sm_Y_drive_fue; };
  Start { sm_Y_drive_operational_state; };

  start_timer(4*DRIVES_HEARTBEAT_PERIOD*s, a_stop_y_drive_timers);

  ASSERT_END_STATES_CONTAINS_NOT{sm_Y_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Y_drive_lacks_multiple_heartbeats_when_being_operational;};

  Start { sm_Y_drive_fue; };
  Start { sm_Y_drive_operational_state; };

  start_timer(2*DRIVES_HEARTBEAT_PERIOD*s, a_stop_y_drive_timers);
  start_timer(5*DRIVES_HEARTBEAT_PERIOD*s, a_stop_y_drive);

  ASSERT_END_STATES_CONTAINS{sm_Y_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Y_drive_fails_when_being_operational;};

  Start { sm_Y_drive_fue; };
  Start { sm_Y_drive_operational_state; };

  stop(sm_Y_drive_fue);
  start_timer(6*DRIVES_HEARTBEAT_PERIOD*s, a_stop_y_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Y_drive_operational_state.Offline;};
};


// ------------------------------------------------------------------------  
//                  Z_DRIVE
// ------------------------------------------------------------------------  

global_functions
{
  a_stop_z_drive_timers
  {
    stop_timer(z_drive_fue_heartbeat_timer);
    stop_timer(z_drive_os_heartbeat_timer);
    EXIT;
  };

  a_stop_z_drive
  {
    stop(sm_Z_drive_fue);
  };
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Z_drive_becoming_Operational;};

  Start { sm_Z_drive_fue; };
  Start { sm_Z_drive_operational_state; };

  start_timer(2*DRIVES_HEARTBEAT_PERIOD*s, a_stop_z_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Z_drive_fue.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_Z_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Z_drive_is_already_Operational;};

  Start { sm_Z_drive_fue; };
  ev_z_drive_set_operational;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Z_drive_fue.Operational;};

  Start { sm_Z_drive_operational_state; };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_z_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Z_drive_fue.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_Z_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Z_drive_lacks_multiple_heartbeats_when_being_preoperational;};

  Start { sm_Z_drive_fue; };
  Start { sm_Z_drive_operational_state; };

  stop(sm_Z_drive_fue);
  start_timer(3*DRIVES_HEARTBEAT_PERIOD*s, a_stop_z_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Z_drive_operational_state.PreOperational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Z_drive_fails_when_being_preoperational;};

  g_z_drive_is_functional = 0;

  Start { sm_Z_drive_fue; };
  Start { sm_Z_drive_operational_state; };

  start_timer(4*DRIVES_HEARTBEAT_PERIOD*s, a_stop_z_drive_timers);

  ASSERT_END_STATES_CONTAINS_NOT{sm_Z_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Z_drive_lacks_multiple_heartbeats_when_being_operational;};

  Start { sm_Z_drive_fue; };
  Start { sm_Z_drive_operational_state; };

  start_timer(2*DRIVES_HEARTBEAT_PERIOD*s, a_stop_z_drive_timers);
  start_timer(5*DRIVES_HEARTBEAT_PERIOD*s, a_stop_z_drive);

  ASSERT_END_STATES_CONTAINS{sm_Z_drive_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Antriebe_unittests;};Test{Z_drive_fails_when_being_operational;};

  Start { sm_Z_drive_fue; };
  Start { sm_Z_drive_operational_state; };

  stop(sm_Z_drive_fue);
  start_timer(6*DRIVES_HEARTBEAT_PERIOD*s, a_stop_z_drive_timers);

  ASSERT_END_STATES_CONTAINS{sm_Z_drive_operational_state.Offline;};
};
