// <description>

Funktionsueberwachung_Ivenet_unittests {};

Event EXIT;

Globals
{
  // Redefinition for test acceleration
  IVENET_TRAFFIC_PERIOD = 0.01; 
};

global_functions
{
  a_stop_ivenet_timers
  {
    stop_timer(ivenet_traffic_producer_timer);
    stop_timer(ivenet_traffic_consumer_timer);
    EXIT;
  };

  a_stop_ivenet
  {
    stop(iVeNet);
  };
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Ivenet_unittests;};Test{iVeNet_becoming_Operational;};

  Start { sm_iVeNet;  };
  Start { sm_iVeNet_operational_state;  };

  start_timer(2*IVENET_TRAFFIC_PERIOD*s, a_stop_ivenet_timers);

  ASSERT_END_STATES_CONTAINS{sm_iVeNet.Active;};
  ASSERT_END_STATES_CONTAINS{sm_iVeNet_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Ivenet_unittests;};Test{iVeNet_still_operational_after_an_intervall_without_traffic;};

  Start { sm_iVeNet; };
  Start { sm_iVeNet_operational_state;  };

  stop(sm_iVeNet);
  start_timer(3*IVENET_TRAFFIC_PERIOD*s, a_stop_ivenet_timers);

  ASSERT_END_STATES_CONTAINS{sm_iVeNet_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_Ivenet_unittests;};Test{iVeNet_Offline_detection_after_having_been_operational;};

  Start { sm_iVeNet;  };
  Start { sm_iVeNet_operational_state;  };

  stop(sm_iVeNet);
  start_timer(20*IVENET_TRAFFIC_PERIOD*s, a_stop_ivenet_timers);

  ASSERT_END_STATES_CONTAINS{sm_iVeNet_operational_state.Offline;};
};
