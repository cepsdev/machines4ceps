Event ev_total_nonsence;  //  arki: only needet to force transitions in statemachines

Flap_lock_HR1_unittests
{
  g_flap_valve_HR_is_closed = 0;
  g_flap_valve_HR_is_open   = 0;
};

Simulation
{
  TestCase{Flap_lock_HR1_unittests;};Test{Initialization;};

  Start { sm_Flap_lock_HR1;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Flap_lock_HR1_unittests;};Test{lock_open;};

  Start { sm_Flap_lock_HR1;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};

  g_flap_valve_HR_is_open   = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_open );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Opening;};

  ev_flap_HR1_is_open;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Open;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Flap_lock_HR1_unittests;};Test{lock_open_and_close;};

  Start { sm_Flap_lock_HR1;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};

  g_flap_valve_HR_is_open   = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_open );
  ev_flap_HR1_is_open;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Open;};

  g_flap_valve_HR_is_open   = 0;
  g_flap_valve_HR_is_closed = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_close );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closing;};

  ev_flap_HR1_is_close;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Flap_lock_HR1_unittests;};Test{lock_open_interrupted_with_close;};

  Start { sm_Flap_lock_HR1;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};

  g_flap_valve_HR_is_open   = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_open );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Opening;};

  g_flap_valve_HR_is_open   = 0;
  g_flap_valve_HR_is_closed = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_close );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closing;};

  ev_flap_HR1_is_close;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Flap_lock_HR1_unittests;};Test{lock_close_interrupted_with_open;};

  Start { sm_Flap_lock_HR1;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};

  g_flap_valve_HR_is_open   = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_open );
  ev_flap_HR1_is_open;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Open;};

  g_flap_valve_HR_is_open   = 0;
  g_flap_valve_HR_is_closed = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closing;};

  g_flap_valve_HR_is_open   = 1;
  g_flap_valve_HR_is_closed = 0;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR1_is_open );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Opening;};

  ev_flap_HR1_is_open;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Open;};
};

