// <description>
Event ev_total_nonsence;  //  arki: only needet to force transitions in statemachines

Globals
{
  // Redefinition for test acceleration
  TIMER_ACTIVATION = 0.1;
};

Flap_locks_unittests
{
//  g_system_pressure_is_sufficient = 1;
  Pneumatics.system_pressure      = DEFAULT_SYSTEM_PRESSURE;
//  g_flap_is_closed                = 0;
//  g_flap_is_open                  = 0;
  SENSOR_HZO  = 0;  //  HaubeRiegelOffen
  SENSOR_HZG  = 0;  //  HaubeRiegelGeschlossen
  g_y_drive_is_in_arbeitsposition = 1;
  g_z_drive_is_in_indexposition   = 1;
  g_mast_is_not_blocking_flap     = 1;
  SENSOR_KAMPFSCHALTER_A            = 0;
};

Simulation
{
  TestCase{Flap_locks_unittests;};Test{Behaviour_of_flaps_locks_given_flap_to_open;};

  //  Dingo
  Start { sm_Flap_valve_HR;  };
  Start { sm_Flap_lock_HR1;  };
  Start { sm_Flap_lock_HR2;  };
  Start { sm_Flap_endschalter_HR1O; };
  Start { sm_Flap_endschalter_HR2O; };
  Start { sm_Flap_endschalter_HR1V; };
  Start { sm_Flap_endschalter_HR2V; };
  //  BAG
  Start { sm_Flap_lock_one; };
  Start { sm_Flap_lock_two; }; 

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.On;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_one.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_two.Unknown;};

  Start { sm_Flap_to_open; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Opening;};

  stop_timer ( timer_flap_VHR_is_open );
  ev_flap_VHR_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.Opening;};

  stop_timer ( timer_flap_HR1_is_open );
  ev_flap_HR1_is_open;
  stop_timer ( timer_flap_HR2_is_open );
  ev_flap_HR2_is_open;
  stop_timer ( timer_flap_HR1V_is_open );
  ev_flap_HR1V_is_open;
  stop_timer ( timer_flap_HR2V_is_open );
  ev_flap_HR2V_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Open;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.Off;};

  stop_timer ( timer_flap_HR1O_is_close );
  ev_flap_HR1O_is_close;
  stop_timer ( timer_flap_HR2O_is_close );
  ev_flap_HR2O_is_close;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.On;};

  // allows preconditioning to finish ..
  ev_flap_preconditioning_finished;

  // entering Flap_unlock ..
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_one.Unlocked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_two.Unlocked;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_to_open.sm_Flap_open;};

//  g_flap_is_closed = 1;
//  g_flap_is_open   = 0;
  SENSOR_HZG  = 1;  //  HaubeRiegelGeschlossen

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_to_open.sm_Flap_open.Flap_Opening;};

//  g_flap_is_closed = 0;
//  g_flap_is_open   = 1;
  SENSOR_HZO  = 1;  //  HaubeRiegelOffen
  SENSOR_HZG  = 0;  //  HaubeRiegelGeschlossen

  ev_flap_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Closing;};

  stop_timer ( timer_flap_VHR_is_close );
  ev_flap_VHR_is_close;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closing;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Closing;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Opening;};

  stop_timer ( timer_flap_HR1_is_close );
  ev_flap_HR1_is_close;
  stop_timer ( timer_flap_HR2_is_close );
  ev_flap_HR2_is_close;
  stop_timer ( timer_flap_HR1O_is_open );
  ev_flap_HR1O_is_open;
  stop_timer ( timer_flap_HR2O_is_open );
  ev_flap_HR2O_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};

  stop_timer ( timer_flap_HR1V_is_close );
  ev_flap_HR1V_is_close;
  stop_timer ( timer_flap_HR2V_is_close );
  ev_flap_HR2V_is_close;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.On;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_one.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_two.Locked;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_to_open.Final;};
};


Simulation
{
  TestCase{Flap_locks_unittests;};Test{Behaviour_of_flaps_locks_given_flap_to_close;};

//  g_flap_is_open   = 1;
//  g_flap_is_closed = 0;
  SENSOR_HZO  = 1;  //  HaubeRiegelOffen

  //  Dingo
  Start { sm_Flap_valve_HR;  };
  Start { sm_Flap_lock_HR1;  };
  Start { sm_Flap_lock_HR2;  };
  Start { sm_Flap_endschalter_HR1O; };
  Start { sm_Flap_endschalter_HR2O; };
  Start { sm_Flap_endschalter_HR1V; };
  Start { sm_Flap_endschalter_HR2V; };
  //  BAG
  Start { sm_Flap_lock_one; };
  Start { sm_Flap_lock_two; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.On;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_one.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_two.Unknown;};

  Start { sm_Flap_to_close; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Opening;};

  stop_timer ( timer_flap_VHR_is_open );
  ev_flap_VHR_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.Opening;};

  stop_timer ( timer_flap_HR1_is_open );
  ev_flap_HR1_is_open;
  stop_timer ( timer_flap_HR2_is_open );
  ev_flap_HR2_is_open;
  stop_timer ( timer_flap_HR1V_is_open );
  ev_flap_HR1V_is_open;
  stop_timer ( timer_flap_HR2V_is_open );
  ev_flap_HR2V_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Open;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.Off;};

  stop_timer ( timer_flap_HR1O_is_close );
  ev_flap_HR1O_is_close;
  stop_timer ( timer_flap_HR2O_is_close );
  ev_flap_HR2O_is_close;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.On;};

  // allows preconditioning to finish ..
  ev_flap_preconditioning_finished;

  // entering Flap_unlock ..
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_one.Unlocked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_two.Unlocked;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_to_close.sm_Flap_close.Flap_Closing;};

//  g_flap_is_open   = 0;
//  g_flap_is_closed = 1;
  SENSOR_HZO  = 0;  //  HaubeRiegelOffen
  SENSOR_HZG  = 1;  //  HaubeRiegelGeschlossen

  ev_flap_is_closed;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Closing;};

  stop_timer ( timer_flap_VHR_is_close );
  ev_flap_VHR_is_close;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_valve_HR.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR1.Closing;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_HR2.Closing;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.Opening;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Opening;};

  stop_timer ( timer_flap_HR1_is_close );
  ev_flap_HR1_is_close;
  stop_timer ( timer_flap_HR2_is_close );
  ev_flap_HR2_is_close;
  stop_timer ( timer_flap_HR1O_is_open );
  ev_flap_HR1O_is_open;
  stop_timer ( timer_flap_HR2O_is_open );
  ev_flap_HR2O_is_open;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1O.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};

  stop_timer ( timer_flap_HR1V_is_close );
  ev_flap_HR1V_is_close;
  stop_timer ( timer_flap_HR2V_is_close );
  ev_flap_HR2V_is_close;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR1V.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2V.On;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_one.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_lock_two.Locked;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_to_close.Final;};
};
