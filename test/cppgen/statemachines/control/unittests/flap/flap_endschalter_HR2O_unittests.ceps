Event ev_total_nonsence;  //  arki: only needet to force transitions in statemachines

Flap_endschalter_HR2O_unittests
{
  g_flap_lock_HR2_is_open   = 0;
};

Simulation
{
  TestCase{Flap_endschalter_HR2O_unittests;};Test{Initialization;};

  Start { sm_Flap_endschalter_HR2O;};

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};
};

Simulation
{
  TestCase{Flap_endschalter_HR2O_unittests;};Test{Visit_all_states;};

  Start { sm_Flap_endschalter_HR2O; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};

  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};

  g_flap_lock_HR2_is_open   = 1;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR2O_is_close );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Closing;};

  ev_flap_HR2O_is_close;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.On;};

  g_flap_lock_HR2_is_open   = 0;
  ev_total_nonsence;  //  arki: workaround to just force a tansition in the statemachine
  stop_timer ( timer_flap_HR2O_is_open );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Opening;};

  ev_flap_HR2O_is_open;
  ASSERT_CURRENT_STATES_CONTAINS{sm_Flap_endschalter_HR2O.Off;};
};
