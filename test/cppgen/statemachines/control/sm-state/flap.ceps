// see ZustandCS6
// HZO - Haubenzylinder Offen,       Bit 4
// HZG - Haubenzylinder Geschlossen, Bit 5

Event ev_flap_is_open,  ev_flap_is_closed,  ev_flap_is_wrong,  ev_flap_is_not_open,   ev_flap_is_not_closed,  ev_flap_state_change;
Guard g_flap_is_open,   g_flap_is_closed,   g_flap_is_wrong,   g_flap_is_neither_nor;

Statemachine
{
  id  { sm_Flap;  };
  description { "Flap Zustand"; };
  States  { Initial;  Unknown;  Open; Closed; Neither_Nor;  Wrong;  };

  Actions
  {
    a_print_sensor_states { params{ _Add_String; }; print ( "---------- SENSOR_HZO: ", SENSOR_HZO, ", SENSOR_HZG: ", SENSOR_HZG, " ----------", _Add_String, "\n" );  };
    a_FlapIsOpen          { ev_flap_is_open;        a_print_sensor_states ( "" );  };
    a_FlapIsClosed        { ev_flap_is_closed;      a_print_sensor_states ( "" );  };
    a_FlapIsNotOpen       { ev_flap_is_not_open;    a_print_sensor_states ( "" );  };
    a_FlapIsNotClosed     { ev_flap_is_not_closed;  a_print_sensor_states ( "" );  };
    a_FlapIsWrong         { ev_flap_is_wrong;       a_print_sensor_states ( "" );  };
    a_FlapInternalError   { a_print_sensor_states ( " unexpected ----------" );  };
  };

  Transition  { Initial;      Unknown;  };

  Transition  { Unknown;      Open;         ev_flap_state_change; g_flap_is_open;         a_FlapIsOpen; };
  Transition  { Unknown;      Closed;       ev_flap_state_change; g_flap_is_closed;       a_FlapIsClosed; };
  Transition  { Unknown;      Neither_Nor;  ev_flap_state_change; g_flap_is_neither_nor;  a_FlapIsNotOpen;  };
  Transition  { Unknown;      Wrong;        ev_flap_state_change; g_flap_is_wrong;        a_FlapIsWrong;  };

  Transition  { Open;         Open;         ev_flap_state_change; g_flap_is_open;         a_FlapInternalError; };
  Transition  { Open;         Closed;       ev_flap_state_change; g_flap_is_closed;       a_FlapIsClosed; };
  Transition  { Open;         Neither_Nor;  ev_flap_state_change; g_flap_is_neither_nor;  a_FlapIsNotOpen;  };
  Transition  { Open;         Wrong;        ev_flap_state_change; g_flap_is_wrong;        a_FlapIsWrong;  };

  Transition  { Closed;       Open;         ev_flap_state_change; g_flap_is_open;         a_FlapIsOpen; };
  Transition  { Closed;       Closed;       ev_flap_state_change; g_flap_is_closed;       a_FlapInternalError; };
  Transition  { Closed;       Neither_Nor;  ev_flap_state_change; g_flap_is_neither_nor;  a_FlapIsNotClosed;  };
  Transition  { Closed;       Wrong;        ev_flap_state_change; g_flap_is_wrong;        a_FlapIsWrong;  };

  Transition  { Neither_Nor;  Open;         ev_flap_state_change; g_flap_is_open;         a_FlapIsOpen; };
  Transition  { Neither_Nor;  Closed;       ev_flap_state_change; g_flap_is_closed;       a_FlapIsClosed; };
  Transition  { Neither_Nor;  Neither_Nor;  ev_flap_state_change; g_flap_is_neither_nor;  a_FlapInternalError; };
  Transition  { Neither_Nor;  Wrong;        ev_flap_state_change; g_flap_is_wrong;        a_FlapIsWrong;  };

  Transition  { Wrong;        Open;         ev_flap_state_change; g_flap_is_open;         a_FlapIsOpen;  };
  Transition  { Wrong;        Closed;       ev_flap_state_change; g_flap_is_closed;       a_FlapIsClosed; };
  Transition  { Wrong;        Neither_Nor;  ev_flap_state_change; g_flap_is_neither_nor;  a_FlapIsNotOpen;  };
  Transition  { Wrong;        Wrong;        ev_flap_state_change; g_flap_is_wrong;        a_FlapInternalError; };
};


