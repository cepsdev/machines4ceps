Event ev_y_drive_to_arbeitsposition_timeout, ev_y_drive_move_go, ev_y_drive_is_in_arbeitsposition, ev_y_drive_enable_timeout;
Event ev_y_drive_moving_timeout, ev_y_drive_movement_stopped;

Statemachine
{
  id  { sm_Y_drive_to_arbeitsposition; };
  description { "Y_drive_to_arbeitsposition";  };
  States  { Initial; Start;  Final;  Error;  };
  import  { sm_Y_drive_move;  };
  Actions
  {
    a_y_drive_move_to_arbeitsposition     { ev_y_drive_move_go ( MODE_TO_TARGET, y_drive.ARBEITSPOSITION, WITH_ENABLE_TIMEOUT, WITH_MOVING_TIMEOUT );  };
    a_y_drive_is_in_arbeitsposition       { ev_y_drive_is_in_arbeitsposition; ivenet_mast_state.value_out = IVENET_MAST_IS_UNLOCKED_OBSERVATION_MODE; };
    a_y_drive_to_arbeitsposition_timeout  { ev_y_drive_to_arbeitsposition_timeout; };
  };

  //on_enter {};
  //on_exit{};

  Transition  { Initial;          Final;                                          a_y_drive_is_in_arbeitsposition;       g_y_drive_is_in_arbeitsposition; };
  Transition  { Initial;          Start;                                          a_y_drive_move_to_arbeitsposition;    !g_y_drive_is_in_arbeitsposition; };
  Transition  { Start;            sm_Y_drive_move;  ev_y_drive_move_go; };
  Transition  { sm_Y_drive_move;  Error;            ev_y_drive_enable_timeout;    a_y_drive_to_arbeitsposition_timeout; };
  Transition  { sm_Y_drive_move;  Error;            ev_y_drive_moving_timeout;    a_y_drive_to_arbeitsposition_timeout; };
  Transition  { sm_Y_drive_move;  Final;            ev_y_drive_movement_stopped;  a_y_drive_is_in_arbeitsposition;      };
};

