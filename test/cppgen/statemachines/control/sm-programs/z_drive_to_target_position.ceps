Event ev_z_drive_to_target_position_not_needed,   ev_z_drive_to_target_position_starts,   ev_z_drive_to_target_position_moving,   ev_z_drive_is_in_target_position;
Event ev_z_drive_to_target_position_interrupted,  ev_z_drive_to_target_position_timeout,  ev_z_drive_to_target_position_finished;
Event ev_z_drive_to_target_position_preconditions_are_not_met;
Event ev_z_drive_move_init;

global_functions
{
  z_drive_set_target_position
  {
    params{ inTargetPos; };
    print ( "-------- z_drive_set_target_position -------- inTargetPos: ", inTargetPos, "\n" );

    if ( inTargetPos > z_drive.MAX_POS )
    {
      z_drive.TargetPosition = z_drive.MAX_POS;
    } else
    if ( inTargetPos < z_drive.MAST_MINHOEHE )
    {
      z_drive.TargetPosition = z_drive.MAST_MINHOEHE;
    } else
    {
      z_drive.TargetPosition = inTargetPos;
    };
    print ( "-------------------------------- z_drive.TargetPosition: ", z_drive.TargetPosition, ", SollGeschw: ", z_drive.SollGeschw, "\n" );
  };
};

Statemachine
{
  id  { sm_Z_drive_to_target_position;  };
  description { "Z_drive_to_target_position";  };
  States  { Initial;  Final;  Start;  Error;  };
  import  { sm_Z_drive_move;  };
  Actions
  {
    a_z_drive_to_target_position_not_needed   { ev_z_drive_to_target_position_not_needed; };
    a_z_drive_to_target_position_preconditions_are_not_met
    {
      print ( "---------------------------------------- Z_drive_to_target_position: Preconditions are not met \n" );
      ev_z_drive_to_target_position_preconditions_are_not_met;
    };
    a_z_drive_to_target_position_start
    {
      ev_z_drive_to_target_position_starts;
      if ( Betriebsmodus == MODUS_AUTOMATIKBETRIEB )
      {
        print ( "---------------------------------------- 'Z_drive_to_target_position' with Betriebsmodus == MODUS_AUTOMATIKBETRIEB \n" );
      } else
      {
        print ( "---------------------------------------- 'Z_drive_to_target_position' with Betriebsmodus != MODUS_AUTOMATIKBETRIEB \n" );
      };
      ev_z_drive_move_init ( MODE_TO_TARGET, z_drive.TargetPosition );
      start_timer ( DEF_TIME_Z_FAHREN * s, ev_z_drive_to_target_position_timeout,  timer_z_drive_to_target_position_timeout );
    };
    a_z_drive_to_target_position_moving       { ev_z_drive_to_target_position_moving;       };
    a_z_drive_is_in_target_position           { ev_z_drive_is_in_target_position;           };
    a_z_drive_to_target_position_timeout      { ev_z_drive_to_target_position_interrupted;  };
    a_z_drive_to_target_position_interrupted  { ev_z_drive_to_target_position_interrupted;  };
    a_z_drive_stop_timout_timer               { stop_timer ( timer_z_drive_to_target_position_timeout ); };
  };

  on_enter
  {
    if ( argc() < 1 )
    {
      print ( "---------------------------------------- Z_drive_to_target_position: Too few arguments to start \n" );
    } else
    {
      z_drive_set_target_position ( argv ( 1 ) );

      print ( "---------------------------------------- Z_drive_to_target_position, IstPos        : ", z_drive.IstPos, ", TargetPosition: ", z_drive.TargetPosition, "\n"
            , ", <= ", (z_drive.IstPos <= z_drive.TargetPosition + z_drive.POSITION_TOLERANCE)
            , ", >= ", (z_drive.IstPos >= z_drive.TargetPosition - z_drive.POSITION_TOLERANCE)
            , " \n" 
            );
    };
  };

  on_exit
  {
    a_z_drive_stop_timout_timer;
    ev_z_drive_to_target_position_finished;
  };

  Transition  { Initial;                Final;                                                    a_z_drive_to_target_position_not_needed;                                  g_z_drive_is_in_target_position; };
  Transition  { Initial;                Start;                                                    a_z_drive_to_target_position_start;                                      !g_z_drive_is_in_target_position && g_z_drive_to_target_position_preconditions; };
  Transition  { Initial;                Error;                                                    a_z_drive_to_target_position_preconditions_are_not_met;                  !g_z_drive_to_target_position_preconditions;  };
  Transition  { Start;                  sm_Z_drive_move;  ev_z_drive_move_init;                   a_z_drive_to_target_position_moving;                                    };
  Transition  { sm_Z_drive_move.Final;  Final;                                                    a_z_drive_is_in_target_position;          a_z_drive_stop_timout_timer;    g_z_drive_is_in_target_position;  };
  Transition  { sm_Z_drive_move.Final;  Error;                                                    a_z_drive_to_target_position_interrupted; a_z_drive_stop_timout_timer;   !g_z_drive_is_in_target_position;  };
  Transition  { sm_Z_drive_move;        Error;            ev_z_drive_to_target_position_timeout;  a_z_drive_to_target_position_timeout;     };
  Transition  { sm_Z_drive_move.Error;  Error;                                                    a_z_drive_to_target_position_interrupted; a_z_drive_stop_timout_timer;  };
};

