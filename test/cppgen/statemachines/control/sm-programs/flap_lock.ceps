Event ev_flap_lock_one_is_locked, ev_flap_lock_started,   ev_flap_lock_timeout,  ev_flap_lock_preconditions_are_not_met;  //  arki: ? precondition ?
Event ev_flap_lock_two_is_locked, ev_flap_lock_finished,  ev_flap_lock_was_interrupted, ev_flap_VHR_close;

Statemachine
{
  id  { sm_Flap_lock; };
  description { "Flap_lock";  };
  States  { Initial;  Final;  Error;  Flap_Locking; };
  Actions
  {
    a_flap_lock_not_needed          { ev_flap_lock_finished; };
    a_flap_lock_start               { ev_flap_VHR_close;
                                      ev_flap_lock_started;
                                      start_timer ( DEF_TIME_HAUBE_VERRIEGELN * s, ev_flap_lock_timeout, timer_flap_lock );
                                    };
    a_flap_lock_was_interrupted     { ev_flap_lock_was_interrupted; };
    a_flap_lock_finished            { ev_flap_lock_finished;  };
    a_flap_lock_timeout             { ev_flap_lock_interrupted; };
    a_flap_lock_stop_timer          { stop_timer ( timer_flap_lock ); };
  };

  on_exit
  {
    if ( !in_state ( Final ) )
    {
      a_flap_lock_stop_timer;
      a_flap_lock_was_interrupted;
    };
  };

  Transition  { Initial;        Final;                                        a_flap_lock_not_needed;                         g_flap_is_locked; };
  Transition  { Initial;        Flap_Locking;                                 a_flap_lock_start;                             !g_flap_is_locked; };
  Transition  { Flap_Locking;   Final;          ev_flap_lock_one_is_locked;   a_flap_lock_finished; a_flap_lock_stop_timer;   g_flap_is_locked; };
  Transition  { Flap_Locking;   Final;          ev_flap_lock_two_is_locked;   a_flap_lock_finished; a_flap_lock_stop_timer;   g_flap_is_locked; };
  Transition  { Flap_Locking;   Error;          ev_flap_lock_timeout;         a_flap_lock_timeout;                                              };
};
