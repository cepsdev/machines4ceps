Event ev_x_drive_to_indexposition_not_needed,   ev_x_drive_to_indexposition_starts,   ev_x_drive_to_indexposition_moving,   ev_x_drive_is_in_indexposition;
Event ev_x_drive_to_indexposition_interrupted,  ev_x_drive_to_indexposition_timeout,  ev_x_drive_to_indexposition_finished;
Event ev_x_drive_move_init;

Statemachine
{
  id  { sm_X_drive_to_indexposition;  };
  description { "X_drive_to_indexposition"; };
  States  { Initial;  Final;  Start;  Error;  };
  import  { sm_X_drive_move;  };
  Actions
  {
    a_x_drive_to_indexposition_not_needed     { ev_x_drive_to_indexposition_not_needed; };
    a_x_drive_to_indexposition_start          { ev_x_drive_to_indexposition_starts;
                                                ev_x_drive_move_init ( MODE_TO_TARGET, x_drive.INDEXPOSITION );
                                                start_timer ( DEF_TIME_X_FAHREN * s, ev_x_drive_to_indexposition_timeout,  timer_x_drive_to_indexposition_timeout );
                                              };
    a_x_drive_to_indexposition_moving         { ev_x_drive_to_indexposition_moving;       };
    a_x_drive_is_in_indexposition             { ev_x_drive_is_in_indexposition;           };
    a_x_drive_to_indexposition_timeout        { ev_x_drive_to_indexposition_interrupted;  };
    a_x_drive_to_indexposition_interrupted    { ev_x_drive_to_indexposition_interrupted;  };
    a_x_drive_stop_timout_timer               { stop_timer ( timer_x_drive_to_indexposition_timeout ); };
  };

  on_enter
  {
//    print ( "--- guard --- SENSOR_IP_X:             ", SENSOR_IP_X, "\n"
//          , "              x_drive.IstPos:          ", x_drive.IstPos, "\n"
//          );
  };
  on_exit
  {
    if ( !in_state ( Final, Error ) )
    {
      a_x_drive_stop_timout_timer;
    };
    ev_x_drive_to_indexposition_finished;
  };

  Transition  { Initial;                Final;                                                  a_x_drive_to_indexposition_not_needed;                                  g_x_drive_is_in_indexposition;  };
  Transition  { Initial;                Start;                                                  a_x_drive_to_indexposition_start;                                      !g_x_drive_is_in_indexposition;  };
  Transition  { Start;                  sm_X_drive_move;  ev_x_drive_move_init;                 a_x_drive_to_indexposition_moving;                                    };
  Transition  { sm_X_drive_move.Final;  Final;                                                  a_x_drive_is_in_indexposition;          a_x_drive_stop_timout_timer;    g_x_drive_is_in_indexposition;  };
  Transition  { sm_X_drive_move.Final;  Error;                                                  a_x_drive_to_indexposition_interrupted;                                !g_x_drive_is_in_indexposition;  };
  Transition  { sm_X_drive_move;        Error;            ev_x_drive_to_indexposition_timeout;  a_x_drive_to_indexposition_timeout;                                   };
  Transition  { sm_X_drive_move.Error;  Error;                                                  a_x_drive_to_indexposition_interrupted; a_x_drive_stop_timout_timer;  };
};

