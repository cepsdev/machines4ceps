Event ev_x_drive_stop, ev_x_drive_is_enabled, ev_x_drive_is_disabled;
Event ev_x_drive_movement_stopped, ev_x_drive_reset, ev_x_drive_move_up;
Event ev_x_drive_prepares_to_move;
Event ev_x_drive_move;
Event ev_x_drive_can_control, ev_x_drive_can_state_response;


global_functions
{
  x_drive_set_soll_position
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- x_drive_set_soll_position -------- inSollPos: ", inSollPos, ", inSollGeschw: ", inSollGeschw, "\n" );
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > x_drive.MAX_POS )
    {
      x_drive.SollPos = x_drive.MAX_POS;
    } else
    {
      if ( inSollPos < x_drive.MIN_POS )
      {
        x_drive.SollPos = x_drive.MIN_POS;
      } else
      {
        x_drive.SollPos = inSollPos;
      };
    };
    x_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- X_drive_move.SollPos:    ", x_drive.SollPos, ", SollGeschw: ", x_drive.SollGeschw, "\n" );
  };

  x_drive_set_target_speed
  {
    params{ inSollGeschw; };
    print ( "-------- x_drive_set_target_speed -------- inSollGeschw: ", inSollGeschw, "\n" );
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    if ( inSollGeschw >= 0 )
    {
      x_drive.SollPos = x_drive.MAX_POS;
      x_drive.VorzeichenSpeed = 1;
    };
    if ( inSollGeschw < 0 )
    {
      x_drive.SollPos = x_drive.MIN_POS;
      x_drive.VorzeichenSpeed = -1;
    };
    if ( inSollGeschw == 0 )
    {
      x_drive.SollGeschw = x_drive.SPEED_MAX;
    } else
    {
      x_drive.SollGeschw = x_drive.VorzeichenSpeed * x_drive.SollGeschwAbsolut;
    };
  };
};

Statemachine
{
  val MOVEMENT_SELECTION_IDX          = 1;
  val TARGET_VALUE_IDX                = 2;

  id  { sm_X_drive_move;  };
  description { "X_drive_move"; };
  States  { Initial;  Final;  Error;  Moving; SlowDown;  };

  import  { sm_X_drive_enable;  };
  import  { sm_X_drive_disable; };
  import  { sm_X_drive_brake_release; };
  import  { sm_X_drive_brake_apply; };

  Actions
  {
    a_x_drive_movement_stopped
    {
      //print("-------- ev_x_drive_movement_stopped --------\n");

      ev_x_drive_movement_stopped;
    };
    a_x_drive_movement_start
    {
      print ( "-------- ev_x_drive_move --------\n" );

      x_drive.Control.ANTRIEB_MODE          = x_drive.Control.ANTRIEB_MODE_DEFAULT;

      ev_x_drive_can_control;
      ev_x_drive_move;
    };
    a_x_drive_stop_moving
    {
      x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
      ev_x_drive_can_control;
    };
    a_x_drive_slow_down
    {
      print ( "-------- a_x_drive_slow_down --------\n" );
      x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_SPEED;
      x_drive.SollGeschw = 0;
      ev_x_drive_can_control;
    };
  };

  on_enter
  {
    if ( argc() < 2 )
    {
      print ( "---------------------------------------- Too few arguments for start of 'sm_X_drive_move' \n" );
    } else
    {
      if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_TO_TARGET )
      {
        x_drive_set_soll_position ( argv ( TARGET_VALUE_IDX ), x_drive.SPEED_DEFAULT );
      } else 
      if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_GIVEN_SPEED )
      {
        x_drive_set_target_speed ( argv ( TARGET_VALUE_IDX ) );
      };
    };
    x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
  };

  on_exit
  {
    x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    ev_x_drive_stop;
    ev_x_drive_can_control;
  };

  Transition  { Initial;                        sm_X_drive_enable;                                                                          };
  Transition  { sm_X_drive_enable.Final;        sm_X_drive_brake_release;                                                                   };
  Transition  { sm_X_drive_enable.Error;        Error;                                                                                      };
  Transition  { sm_X_drive_brake_release.Final; Moving;                                                     a_x_drive_movement_start;       };
  Transition  { sm_X_drive_brake_release.Error; Error;                                                                                      };
  Transition  { Moving;                         sm_X_drive_brake_apply;     ev_x_drive_can_state_response;  a_x_drive_stop_moving;          g_x_drive_reach_inpos;    };
  Transition  { Moving;                         SlowDown;                   ev_x_drive_can_state_response;  a_x_drive_slow_down;           !g_x_drive_reach_inpos &&  g_x_drive_is_in_soll_position;  };
  Transition  { Moving;                         SlowDown;                   ev_x_drive_stop;                a_x_drive_slow_down;            };
  Transition  { SlowDown;                       sm_X_drive_brake_apply;     ev_x_drive_can_state_response;  a_x_drive_stop_moving;          g_x_drive_is_slow_down;   };
  Transition  { sm_X_drive_brake_apply.Final;   sm_X_drive_disable;                                                                         };
  Transition  { sm_X_drive_brake_apply.Error;   Error;                                                                                      };
  Transition  { sm_X_drive_disable.Final;       Final;                                                      a_x_drive_movement_stopped;     };
  Transition  { sm_X_drive_disable.Error;       Error;                                                                                      };
};

