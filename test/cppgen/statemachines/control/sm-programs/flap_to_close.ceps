Event ev_flap_to_close_starts,    ev_flap_close_starting, ev_flap_to_close_was_interrupted, ev_flap_to_close_not_needed;
Event ev_flap_to_close_finished,  ev_flap_close_finished, ev_flap_to_close_interrupted,     ev_flap_to_close_preconditions_are_not_met;
Event ev_flap_lock_starting,      ev_flap_unlock_starting;
Event ev_flap_lock_finished,      ev_flap_unlock_finished;

Statemachine
{
  id  { sm_Flap_to_close; };
  description { "Flap_to_close";  };
  States  { Initial;  Final;  Start;  Error;  };

  import  { sm_Flap_precondition; };
  import  { sm_Flap_unlock; };
  import  { sm_Flap_close;  };
  import  { sm_Flap_lock; };

  Actions
  {
    a_flap_to_close_not_needed                { ev_flap_to_close_not_needed;  };
    a_flap_to_close_starts                    { ev_flap_to_close_starts;  };
    a_flap_to_close_finished                  { ev_flap_to_close_finished;  };
    a_flap_to_close_was_interrupted           { ev_flap_to_close_was_interrupted; };
    a_flap_to_close_preconditions_are_not_met { ev_flap_to_close_preconditions_are_not_met; };
    a_flap_unlock_starting                    { ev_flap_unlock_starting;  };
    a_flap_close_starting                     { ev_flap_close_starting; };
    a_flap_lock_starting                      { ev_flap_lock_starting;  };
    a_flap_to_close_interrupted               { ev_flap_to_close_interrupted; };
  };

  on_enter
  {
    print ( "Flap_to_close::on_enter SENSOR_HZO / SENSOR_HZG : ", SENSOR_HZO, " / ", SENSOR_HZG, "\n" );
  };
  on_exit
  {
    if ( !in_state ( Final ) )
    {
      print ( "Flap_to_close.on_exit --- z_drive.IstPos: ", z_drive.IstPos, ", SENSOR_AB_Y: ", SENSOR_AB_Y, ", SENSOR_IP_Z: ", SENSOR_IP_Z, "\n\n" );
      a_flap_to_close_was_interrupted;
    };
  };

  Transition  { Initial;                    Final;                                          a_flap_to_close_not_needed;                 g_flap_is_closed;               };
  Transition  { Initial;                    Start;                                          a_flap_to_close_starts;                    !g_flap_is_closed;               };
  Transition  { Start;                      Error;                                          a_flap_to_close_preconditions_are_not_met; !g_flap_to_close_preconditions;  };
  Transition  { Start;                      sm_Flap_unlock;                                 a_flap_unlock_starting;                     g_flap_to_close_preconditions;  };
  Transition  { sm_Flap_unlock.Final;       sm_Flap_precondition; ev_flap_unlock_finished;                                            };
  Transition  { sm_Flap_unlock.Error;       Error;                                          a_flap_to_close_interrupted;              };
  Transition  { sm_Flap_precondition.Final; sm_Flap_close;                                  a_flap_close_starting;                    };
  Transition  { sm_Flap_precondition.Error; Error;                                          a_flap_to_close_interrupted;              };
  Transition  { sm_Flap_close.Final;        sm_Flap_lock;                                   a_flap_lock_starting;                     };
  Transition  { sm_Flap_close.Error;        Error;                                          a_flap_to_close_interrupted;              };
  Transition  { sm_Flap_lock.Final;         Final;                ev_flap_lock_finished;    a_flap_to_close_finished;                 };
  Transition  { sm_Flap_lock.Error;         Error;                                          a_flap_to_close_interrupted;              };
};
