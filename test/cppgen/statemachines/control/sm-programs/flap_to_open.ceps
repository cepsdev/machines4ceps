Event ev_flap_to_open_starts,     ev_flap_open_starting,  ev_flap_to_open_was_interrupted,  ev_flap_to_open_not_needed;
Event ev_flap_to_open_finished,   ev_flap_open_finished,  ev_flap_to_open_interrupted,      ev_flap_to_open_preconditions_are_not_met;
Event ev_flap_lock_starting,      ev_flap_unlock_starting;
Event ev_flap_lock_finished,      ev_flap_unlock_finished;

Statemachine
{
  id  { sm_Flap_to_open;  };
  description { "Flap_to_open";  };
  States  { Initial;  Final;  Start;  Error;  };

  import  { sm_Flap_precondition; };
  import  { sm_Flap_unlock; };
  import  { sm_Flap_open; };
  import  { sm_Flap_lock; };

  Actions
  {
    a_flap_to_open_not_needed                 { ev_flap_to_open_not_needed; };
    a_flap_to_open_starts                     { ev_flap_to_open_starts; };
    a_flap_to_open_finished                   { ev_flap_to_open_finished; };
    a_flap_to_open_was_interrupted            { ev_flap_to_open_was_interrupted;  };
    a_flap_to_open_preconditions_are_not_met  { ev_flap_to_open_preconditions_are_not_met;  };
    a_flap_unlock_starting                    { ev_flap_unlock_starting;  };
    a_flap_open_starting                      { ev_flap_open_starting;  };
    a_flap_lock_starting                      { ev_flap_lock_starting;  };
    a_flap_to_open_interrupted                { ev_flap_to_open_interrupted; };
  };

  on_enter
  {
    print ( "Flap_to_open.on_enter SENSOR_HZO / SENSOR_HZG : ", SENSOR_HZO, " / ", SENSOR_HZG, "\n" );
  };
  on_exit
  {
    if ( !in_state ( Final, Error ) )
    {
      print ( "Flap_to_open.on_exit --- z_drive.IstPos: ", z_drive.IstPos, ", SENSOR_AB_Y: ", SENSOR_AB_Y, ", SENSOR_IP_Z: ", SENSOR_IP_Z, "\n\n" );
      a_flap_to_open_was_interrupted;
    };
  };

  Transition  { Initial;                    Final;                                          a_flap_to_open_not_needed;                  g_flap_is_open;  };
  Transition  { Initial;                    Start;                                          a_flap_to_open_starts;                     !g_flap_is_open;  };
  Transition  { Start;                      Error;                                          a_flap_to_open_preconditions_are_not_met;   g_flap_is_wrong || !g_flap_to_open_preconditions; };
  Transition  { Start;                      sm_Flap_unlock;                                 a_flap_unlock_starting;                    !g_flap_is_wrong &&  g_flap_to_open_preconditions; };
  Transition  { sm_Flap_unlock.Final;       sm_Flap_precondition; ev_flap_unlock_finished;                                            };
  Transition  { sm_Flap_unlock.Error;       Error;                                          a_flap_to_open_interrupted;               };
  Transition  { sm_Flap_precondition.Final; sm_Flap_open;                                   a_flap_open_starting;                     };
  Transition  { sm_Flap_precondition.Error; Error;                                          a_flap_to_open_interrupted;               };
  Transition  { sm_Flap_open.Final;         sm_Flap_lock;         ev_flap_open_finished;    a_flap_lock_starting;                     };
  Transition  { sm_Flap_open.Error;         Error;                                          a_flap_to_open_interrupted;               };
  Transition  { sm_Flap_lock.Final;         Final;                ev_flap_lock_finished;    a_flap_to_open_finished;                  };
  Transition  { sm_Flap_lock.Error;         Error;                                          a_flap_to_open_interrupted;               };
};
