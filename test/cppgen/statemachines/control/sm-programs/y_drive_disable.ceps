Event ev_y_drive_disable_starting,  ev_y_drive_disable, ev_y_drive_is_disabled;
Event ev_y_drive_disable_timeout,   ev_y_drive_disable_was_interrupted, ev_y_drive_disable_interrupted;
Event ev_y_drive_can_control, ev_y_drive_can_state_response;
Guard g_y_drive_has_antrieb_fault;

Statemachine
{
  id  { sm_Y_drive_disable; };
  description { "Y_drive_disable";  };
  States  { Initial;  Final;  Start;  Error;  Disabling;  };

  Actions
  {
    a_y_drive_disable_not_needed  { ev_y_drive_is_disabled; };
    a_y_drive_disable_starting    { ev_y_drive_disable_starting;  };
    a_y_drive_disable_start
    {
      print ( "---------- Y_drive disable ----------\n" );
      y_drive.Control.ANTRIEB_ENABLE_IN     = 0;
      ev_y_drive_can_control;
      ev_y_drive_disable;
      a_y_drive_set_timeout_timer;
      //ev_y_drive_disable_timeout; //  force timeout only for test
    };
    a_y_drive_is_disabled
    {
      a_y_drive_stop_timeout_timer;
      print ( "---------- Y_drive is_disabled ----------\n" );
      ev_y_drive_is_disabled;
    };
    a_y_drive_set_timeout_timer   { start_timer ( DEF_TIME_RUCKMLD_ANTRIEBE * s, ev_y_drive_disable_timeout,  timer_y_drive_disable );  };
    a_y_drive_was_interrupted     { a_y_drive_stop_timeout_timer; ev_y_drive_disable_was_interrupted; };
    a_y_drive_disable_timeout     { ev_y_drive_disable_interrupted; };
    a_y_drive_stop_timeout_timer  { stop_timer ( timer_y_drive_disable ); };
  };

  on_exit
  {
    if ( !in_state ( Final ) )
    {
      a_y_drive_was_interrupted;
    };
  };

  Transition  { Initial;      Final;                                       !g_y_drive_is_enabled;         a_y_drive_disable_not_needed; };
  Transition  { Initial;      Start;                                        g_y_drive_is_enabled;         a_y_drive_disable_starting;   };
  Transition  { Start;        Disabling;                                   !g_y_drive_has_antrieb_fault;  a_y_drive_disable_start;      };
  Transition  { Disabling;    Final;      ev_y_drive_can_state_response;   !g_y_drive_is_enabled;         a_y_drive_is_disabled;        };
  Transition  { Disabling;    Error;      ev_y_drive_disable_timeout;                                     a_y_drive_disable_timeout;    };
};

