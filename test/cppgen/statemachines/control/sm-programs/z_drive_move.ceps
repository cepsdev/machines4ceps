Event ev_z_drive_stop, ev_z_drive_is_enabled, ev_z_drive_is_disabled;
Event ev_z_drive_movement_stopped, ev_z_drive_reset, ev_z_drive_move_up;
Event ev_talin_is_ready_to_be_moved, ev_z_drive_prepares_to_move;
Event ev_z_drive_enable_timeout, ev_z_drive_moving_timeout, ev_z_drive_move, ev_z_drive_enable_starting, ev_z_drive_disable_starting;

Systemstate z_drive;
Systemstate IS_ENABLE_TIMER_ON, IS_MOVE_TIMER_ON;
Systemstate vorzeichen_speed;

// Globals {
// IS_ENABLE_TIMER_ON = 0;
// IS_MOVE_TIMER_ON   = 0;
// };

global_functions
{
  z_drive_set_target_position 
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- z_drive_set_target_position --------\n" );
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > z_drive.MAX_POS )
    {
      z_drive.SollPos = z_drive.MAX_POS;
    } else
    if ( inSollPos < z_drive.MAST_ZURRPOSITION )
    {
      z_drive.SollPos = z_drive.MAST_ZURRPOSITION;
    } else
    {
      z_drive.SollPos = inSollPos;
    };
    z_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- Z_drive_move.SollPos:    ", z_drive.SollPos, ", SollGeschw: ", z_drive.SollGeschw, "\n" );
  };

  z_drive_set_target_speed 
  {
    params{ inSollGeschw; };
    print ( "-------- z_drive_set_target_speed --------\n" );
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    vorzeichen_speed = inSollGeschw;
    print ( "-------------------------------- Z_drive_move.VORZEICHEN SPEED: ", vorzeichen_speed, "\n" );

    //if ( given_speed >= 0 )
    //  z_drive.SollPos = z_drive.MAX_POS;
    //if ( given_speed < 0 )
    //  z_drive.SollPos = z_drive.MAST_ZURRPOSITION;

    if ( vorzeichen_speed == 0 )
    {
      z_drive.SollGeschw = z_drive.SPEED_MAX;
    } else
    {
      z_drive.SollGeschw = vorzeichen_speed * z_drive.SollGeschwAbsolut;
    };

    print ( "-------------------------------- Z_drive_move.SollGeschw: ", z_drive.SollGeschw, ", vorzeichen_speed: ", vorzeichen_speed, "\n" );
  };
};

Statemachine
{
  val MOVEMENT_SELECTION_IDX          = 1;
  val TARGET_VALUE_IDX                = 2;
  val ENABLE_TIMER_IDX                = 3;
  val MOVE_TIMER_IDX                  = 4;

  id  { sm_Z_drive_move;  };
  description { "Z_drive_move"; };
  States  { Initial;  Final;  Moving; Prepare_Talin;  };

  import  { sm_Z_drive_enable;  };
  import  { sm_Z_drive_disable; };

  Actions
  {
    a_z_drive_enable_starting     { ev_z_drive_enable_starting; };
    a_z_drive_disable_starting    { ev_z_drive_disable_starting;  };
    a_z_drive_movement_stopped
    {
      //print("-------- ev_z_drive_movement_stopped --------\n");
      ivenet_platform_alignment_state.value = IVENET_PLATFORM_IS_NOT_ALIGNED;
      ev_z_drive_movement_stopped;
    };
    a_z_drive_movement_start
    {
      //print("-------- ev_z_drive_move --------\n");
      ivenet_platform_alignment_state.value = IVENET_PLATFORM_IS_NOT_ALIGNED_DUE_TO_MAST_MOVEMENT;
      ev_z_drive_move;
    };
    a_z_drive_set_enable_timeout  { if ( IS_ENABLE_TIMER_ON ) { start_timer ( DEF_TIME_RUCKMLD_ANTRIEBE * s, ev_z_drive_enable_timeout,  z_drive_enable_timeout_timer ); };  };
    a_z_drive_set_moving_timeout  { if ( IS_MOVE_TIMER_ON   ) { start_timer ( DEF_TIME_MAST_FAHREN * s,      ev_z_drive_moving_timeout,  z_drive_moving_timeout_timer ); };  };
    a_z_drive_stop_enable_timeout { stop_timer ( z_drive_enable_timeout_timer ); };
    a_z_drive_stop_moving_timeout { stop_timer ( z_drive_moving_timeout_timer ); };
//    a_z_drive_move                { ev_z_drive_move;  };
    a_prepare_talin
    {
      //print("-------- ev_z_drive_prepares_to_move --------\n");
      ev_z_drive_prepares_to_move;
    };
  };

  on_enter
  {
//    print("-------------------------------- Z_drive_move.on_enter(", argc(), ") \n");
//    print("-------------------------------- Z_drive_move.on_enter argv 0:", argv(0),"\n");
//    print("-------------------------------- Z_drive_move.on_enter argv 1:", argv(1),"\n");
//    print("-------------------------------- Z_drive_move.on_enter argv 2:", argv(2),"\n");
//    print("-------------------------------- Z_drive_move.on_enter argv 3:", argv(3),"\n");
//    print("-------------------------------- Z_drive_move.on_enter argv 4:", argv(4),"\n");
    if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_TO_TARGET ) 
    {
      z_drive_set_target_position ( argv ( TARGET_VALUE_IDX ), z_drive.SPEED_DEFAULT );
    } else
    if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_GIVEN_SPEED )
    {
      z_drive_set_target_speed ( argv ( TARGET_VALUE_IDX ) );
    };

    if ( argv ( ENABLE_TIMER_IDX ) == WITH_ENABLE_TIMEOUT )
    {
      IS_ENABLE_TIMER_ON = 1;
    } else
    {
      IS_ENABLE_TIMER_ON = 0;
    };

    if ( argv ( MOVE_TIMER_IDX ) == WITH_MOVING_TIMEOUT )
    {
      IS_MOVE_TIMER_ON = 1;
    } else
    {
      IS_MOVE_TIMER_ON  = 0;
    };
  };

  on_exit
  {
    ev_z_drive_stop; 
    if ( IS_ENABLE_TIMER_ON )
    {
      stop_timer ( z_drive_enable_timeout_timer );
    };
    if ( IS_MOVE_TIMER_ON )
    {
      stop_timer ( z_drive_moving_timeout_timer );
    };
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_STOP;
  };

  Transition  { Initial;            sm_Z_drive_enable;                                  a_z_drive_set_enable_timeout;   a_z_drive_enable_starting;  };
  Transition  { sm_Z_drive_enable;  Prepare_Talin;      ev_z_drive_is_enabled;          a_z_drive_stop_enable_timeout;  a_prepare_talin;  };
  Transition  { Prepare_Talin;      Moving;             ev_talin_is_ready_to_be_moved;  a_z_drive_movement_start;       a_z_drive_set_moving_timeout; };
  Transition  { Moving;             sm_Z_drive_disable; ev_z_drive_stop;                a_z_drive_stop_moving_timeout;  a_z_drive_disable_starting; };
  Transition  { sm_Z_drive_disable; Final;              ev_z_drive_is_disabled;         a_z_drive_movement_stopped; };
};

