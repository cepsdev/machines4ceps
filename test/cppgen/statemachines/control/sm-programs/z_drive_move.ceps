Event ev_z_drive_stop, ev_z_drive_is_enabled, ev_z_drive_is_disabled;
Event ev_z_drive_movement_stopped, ev_z_drive_reset;
Event ev_z_drive_prepares_to_move;
Event ev_z_drive_enable_timeout, ev_z_drive_move;
Event ev_z_drive_can_control, ev_z_drive_can_state_response;


global_functions
{
  z_drive_set_soll_position
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- z_drive_set_soll_position --------\n" );
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > z_drive.MAX_POS )
    {
      z_drive.SollPos = z_drive.MAX_POS;
    } else
    {
      if ( inSollPos < z_drive.MIN_POS )
      {
        z_drive.SollPos = z_drive.MIN_POS;
      } else
      {
        z_drive.SollPos = inSollPos;
      };
    };
    z_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- Z_drive_move.SollPos:    ", z_drive.SollPos, ", SollGeschw: ", z_drive.SollGeschw, "\n" );
  };

  z_drive_set_target_speed
  {
    params{ inVorzeichenSpeed; };
    print ( "-------- z_drive_set_target_speed --------\n" );
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    z_drive.VorzeichenSpeed = inVorzeichenSpeed;
    print ( "-------------------------------- Z_drive_move.VORZEICHEN SPEED: ", z_drive.VorzeichenSpeed, "\n" );

    if ( z_drive.VorzeichenSpeed == 0 )
    {
      z_drive.SollGeschw = z_drive.SPEED_MAX;
    } else
    {
      z_drive.SollGeschw = z_drive.VorzeichenSpeed * z_drive.SollGeschwAbsolut;
      if ( z_drive.VorzeichenSpeed >= 0 )
      {
        z_drive.SollPos = z_drive.MAX_POS;
      } else
      {
        if ( SENSOR_HZO ) //  g_flap_is_open
        {
          z_drive.SollPos = z_drive.MIN_POS;
        } else
        {
          z_drive.SollPos = z_drive.MAST_MINHOEHE;
        };
      };
    };

    print ( "-------------------------------- Z_drive_move.SollGeschw: ", z_drive.SollGeschw, ", VORZEICHEN: ", z_drive.VorzeichenSpeed, "\n" );
  };
};

Statemachine
{
  val MOVEMENT_SELECTION_IDX          = 1;
  val TARGET_VALUE_IDX                = 2;

  id  { sm_Z_drive_move;  };
  description { "Z_drive_move"; };
  States  { Initial;  Final;  Error;  Moving; SlowDown;  };

  import  { sm_Z_drive_enable;  };
  import  { sm_Z_drive_disable; };
  import  { sm_Z_drive_brake_release; };
  import  { sm_Z_drive_brake_apply; };

  Actions
  {
    a_z_drive_movement_stopped
    {
      //print("-------- ev_z_drive_movement_stopped --------\n");

      ev_z_drive_movement_stopped;
    };
    a_z_drive_movement_start
    {
      print ( "-------- ev_z_drive_move --------\n" );

      z_drive.Control.ANTRIEB_MODE          = z_drive.Control.ANTRIEB_MODE_DEFAULT;

//  up to now not working ! ->
//  ***Fatal Error: Expression in conditional should evaluate to integral type (int or double). Read:(OPERATOR != (FUNC_CALL (ID "Z_SollPosition_Berechnen" )(CALL_PARAMETERS (FLOAT 1060  )))(INT 0  ))
//       z_drive.CanSollPos        = Z_SollPosition_Berechnen ( z_drive.SollPos );
//       z_drive.CanSollGeschw     = Z_Set_Speed ( truncate ( z_drive.SollGeschw ) );
//       z_drive.CanSollStrom      = truncate ( z_drive.SollStrom / 16 );

      ev_z_drive_can_control;
      ev_z_drive_move;
    };
    a_z_drive_stop_moving
    {
      z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
      ev_z_drive_can_control;
    };
    a_z_drive_slow_down
    {
      print ( "-------- a_z_drive_slow_down --------\n" );
      z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_SPEED;
      z_drive.SollGeschw = 0;
      ev_z_drive_can_control;
    };
    a_prepare_talin
    {
      //print("-------- ev_z_drive_prepares_to_move --------\n");
      ev_z_drive_prepares_to_move;
    };
  };

  on_enter
  {
    if ( argc() < 2 )
    {
      print ( "---------------------------------------- Too few arguments for start of 'sm_Z_drive_move' \n" );
    } else
    {
  //     print ( "-------- Z_drive_move.on_enter argc  : ", argc(), "\n"
  //           , "                               argv 0: ", argv(0), "\n"
  //           , "                               argv 1: ", argv(1), "\n"
  //           , "                               argv 2: ", argv(2), "\n"
  //           , "                               argv 3: ", argv(3), "\n"
  //           , "                               argv 4: ", argv(4), "\n"
  //           );
      if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_TO_TARGET ) 
      {
        z_drive_set_soll_position ( argv ( TARGET_VALUE_IDX ), z_drive.SPEED_DEFAULT );
      } else
      if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_GIVEN_SPEED )
      {
        z_drive_set_target_speed ( argv ( TARGET_VALUE_IDX ) );
      };
    };
    z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
  };

  on_exit
  {
    z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    ev_z_drive_stop;
    ev_z_drive_can_control;
  };

  Transition  { Initial;                        sm_Z_drive_enable;                                                                          };
  Transition  { sm_Z_drive_enable.Final;        sm_Z_drive_brake_release;                                   a_prepare_talin;                };
  Transition  { sm_Z_drive_enable.Error;        Error;                                                                                      };
  Transition  { sm_Z_drive_brake_release.Final; Moving;                                                     a_z_drive_movement_start;       };
  Transition  { sm_Z_drive_brake_release.Error; Error;                                                                                      };
  Transition  { Moving;                         sm_Z_drive_brake_apply;     ev_z_drive_can_state_response;  a_z_drive_stop_moving;          g_z_drive_reach_inpos;    };
  Transition  { Moving;                         SlowDown;                   ev_z_drive_can_state_response;  a_z_drive_slow_down;           !g_z_drive_reach_inpos &&  g_z_drive_is_in_soll_position;  };
  Transition  { Moving;                         Error;                      ev_z_drive_can_state_response;                                 !g_z_drive_reach_inpos && !g_z_drive_is_in_soll_position && g_z_drive_is_not_moving;  };
  Transition  { Moving;                         SlowDown;                   ev_z_drive_stop;                a_z_drive_slow_down;            };
  Transition  { SlowDown;                       sm_Z_drive_brake_apply;     ev_z_drive_can_state_response;  a_z_drive_stop_moving;          g_z_drive_is_slow_down;   };
  Transition  { sm_Z_drive_brake_apply.Final;   sm_Z_drive_disable;                                                                         };
  Transition  { sm_Z_drive_brake_apply.Error;   Error;                                                                                      };
  Transition  { sm_Z_drive_disable.Final;       Final;                                                      a_z_drive_movement_stopped;     };
  Transition  { sm_Z_drive_disable.Error;       Error;                                                                                      };
};

