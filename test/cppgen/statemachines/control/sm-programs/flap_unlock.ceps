Event ev_flap_lock_one_is_unlocked, ev_flap_unlock_started,   ev_flap_unlock_timeout,         ev_flap_VHR_open,  ev_flap_unlock_preconditions_are_not_met;
Event ev_flap_lock_two_is_unlocked, ev_flap_unlock_finished,  ev_flap_unlock_was_interrupted, ev_flap_VHR_close;

Statemachine
{
  id  { sm_Flap_unlock; };
  description { "Flap_unlock";  };
  States  { Initial;  Final;  Flap_Unlocking; Error; };
  Actions
  {
    a_unlock_flap                           { ev_flap_VHR_open; ev_flap_unlock_started; };
    a_flap_lock                             { ev_flap_VHR_close; };
    a_was_interrupted                       { ev_flap_unlock_was_interrupted; };
    a_flap_unlock_preconditions_are_not_met { ev_flap_unlock_preconditions_are_not_met; };
    a_set_timeout_timer                     { start_timer ( DEF_TIME_HAUBE_ENTRIEGELN * s, ev_flap_unlock_timeout, timer_flap_unlock );  };
    a_finished                              { ev_flap_unlock_finished;  };
  };

  on_exit
  {
    stop_timer ( timer_flap_unlock );
    if ( !in_state ( Final, Error ) )
    {
      a_was_interrupted;
    };
  };

  Transition  { Initial;        Final;                                        a_finished;                               g_flap_is_unlocked; };
  Transition  { Initial;        Flap_Unlocking;                               a_unlock_flap;  a_set_timeout_timer;     !g_flap_is_unlocked  &&  g_flap_unlock_preconditions;  };
  Transition  { Initial;        Error;                                        a_flap_unlock_preconditions_are_not_met; !g_flap_is_unlocked  && !g_flap_unlock_preconditions;  };
  Transition  { Flap_Unlocking; Final;          ev_flap_lock_one_is_unlocked; a_finished;                               g_flap_is_unlocked; };
  Transition  { Flap_Unlocking; Final;          ev_flap_lock_two_is_unlocked; a_finished;                               g_flap_is_unlocked; };
};
