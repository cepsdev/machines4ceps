Event ev_flap_lock_one_is_unlocked, ev_flap_unlock_started,   ev_flap_unlock_timeout,         ev_flap_VHR_open, ev_flap_unlock_preconditions_are_not_met;
Event ev_flap_lock_two_is_unlocked, ev_flap_unlock_finished,  ev_flap_unlock_interrupted,     ev_flap_unlock_was_interrupted;

Statemachine
{
  id  { sm_Flap_unlock; };
  description { "Flap_unlock";  };
  States  { Initial;  Final;  Start;  Flap_Unlocking; Error; };
  Actions
  {
    a_flap_unlock_not_needed                { ev_flap_unlock_finished; };
    a_flap_unlock_start                     { ev_flap_VHR_open;
                                              ev_flap_unlock_started;
                                              start_timer ( DEF_TIME_HAUBE_ENTRIEGELN * s, ev_flap_unlock_timeout, timer_flap_unlock );
                                            };
    a_flap_unlock_was_interrupted           { ev_flap_unlock_was_interrupted; };
    a_flap_unlock_preconditions_are_not_met { ev_flap_unlock_preconditions_are_not_met; };
    a_flap_unlock_finished                  { ev_flap_unlock_finished;  };
    a_flap_unlock_timeout                   { ev_flap_unlock_interrupted; };
    a_flap_unlock_stop_timer                { stop_timer ( timer_flap_unlock ); };
  };

  on_exit
  {
    if ( !in_state ( Final, Error ) )
    {
      a_flap_unlock_stop_timer;
      a_flap_unlock_was_interrupted;
    };
  };

  Transition  { Initial;        Final;                                        a_flap_unlock_not_needed;                           g_flap_is_unlocked; };
  Transition  { Initial;        Start;                                                                                           !g_flap_is_unlocked; };
  Transition  { Start;          Flap_Unlocking;                               a_flap_unlock_start;                                g_flap_unlock_preconditions;  };
  Transition  { Start;          Error;                                        a_flap_unlock_preconditions_are_not_met;           !g_flap_unlock_preconditions;  };
  Transition  { Flap_Unlocking; Final;          ev_flap_lock_one_is_unlocked; a_flap_unlock_finished; a_flap_unlock_stop_timer;   g_flap_is_unlocked; };
  Transition  { Flap_Unlocking; Final;          ev_flap_lock_two_is_unlocked; a_flap_unlock_finished; a_flap_unlock_stop_timer;   g_flap_is_unlocked; };
  Transition  { Flap_Unlocking; Error;          ev_flap_unlock_timeout;       a_flap_unlock_timeout;                                                  };
};
