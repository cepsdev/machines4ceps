// X_drive
Event ev_x_drive_position_changed, ev_x_drive_sim_state_response;
Event ev_x_drive_sim_control; //  see file: rx-dingo.ceps

//  local events and guards
Event ev_x_drive_periodic_moving_timer;

Guard g_x_drive_is_operational, g_x_drive_enable_request, g_x_drive_fault, g_x_drive_control_stop, g_x_drive_brake_release_request;
Guard g_x_drive_speed_mode_request, g_x_drive_position_mode_request, g_x_drive_stop_request, g_x_drive_mode_request_not_used;

Systemstate x_drive_pos_diff, x_drive_speed_diff, x_drive_target_speed, x_drive_target_speed_diff;
Systemstate x_drive_current_braking_distance;  //  braking distance without acceleration
Systemstate x_drive_next_braking_distance_wa;  //  next braking distance with acceleration
Systemstate x_drive_acceleration, x_drive_acceleration_delay;

Globals
{
  g_x_drive_is_operational              =   in_state ( sm_X_drive_fue.Operational );
  g_x_drive_fault                       = 0;
  g_x_drive_enable_request              = ( x_drive.Control.ANTRIEB_ENABLE_IN != 0 );
  g_x_drive_brake_release_request       = ( x_drive.Control.ANTRIEB_BRAKE_RELEASE != 0 );
  g_x_drive_speed_mode_request          = ( x_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_SPEED );
  g_x_drive_position_mode_request       = ( x_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_POSITION );
  g_x_drive_stop_request                = ( x_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_STOP );
  g_x_drive_mode_request_not_used       = !g_x_drive_stop_request && !g_x_drive_speed_mode_request && !g_x_drive_position_mode_request;
};

Statemachine
{
  id  { sm_X_drive_sim_move; };
  description { "X_drive_sim_move"; };
  States  { Initial;  Stoped; MovingSpeed; MovingPosition;  Inpos;  };

  Actions
  {
    a_x_drive_start_moving_speed_mode
    {
      print ( "-------- X_drive_sim start speed mode --------\n" );
      print ( "-------- X_drive_sim starts moving with SollGeschw ( MKS / CAN ): ", x_drive.SollGeschw, " / ", x_drive.CanSollGeschw, "\n" );
      print ( "-------- X_drive_sim ------------------ IstPos / IstGeschw (CAN): ", x_drive.CanIstPos,  " / ", x_drive.CanIstGeschw, "\n" );
      x_drive.Status.ANTRIEB_INPOS    = 0;

      if ( ( x_drive.CanSollGeschw != 0 )
        || ( x_drive.CanIstGeschw != 0 )
        )
      {
        x_drive_target_speed  = x_drive.CanSollGeschw;
        start_periodic_timer ( 0.01 * s, ev_x_drive_periodic_moving_timer, timer_x_drive_moving );
      } else
      {
        print ( "-------- X_drive_sim SollGeschw == 0 ... do nothing" );
      };
    };
    a_x_drive_start_moving_position_mode
    {
      print ( "-------- X_drive_sim start position mode --------\n" );
      print ( "-------- X_drive_sim starts moving to SollPos    ( MKS / CAN ): ", x_drive.SollPos,    " / ", x_drive.CanSollPos, "\n" );
      print ( "-------- X_drive_sim ---------------- IstPos / IstGeschw (CAN): ", x_drive.CanIstPos,  " / ", x_drive.CanIstGeschw, "\n" );

      if ( x_drive.CanSollPos != x_drive.CanIstPos )
      {
        x_drive.Status.ANTRIEB_INPOS    = 0;

        a_x_drive_calculate_target_speed;
        start_periodic_timer ( 0.01 * s, ev_x_drive_periodic_moving_timer, timer_x_drive_moving );
      } else
      {
        print ( "-------- X_drive_sim CanSollPos == CanIstPos ... do nothing" );
      };
    };
    a_x_drive_calculate_target_speed
    {
      if ( x_drive.CanIstGeschw >= 0 )  x_drive_acceleration  = ( 0 + x_drive.CAN_ACCELERATION_MAX );
      else                              x_drive_acceleration  = ( 0 - x_drive.CAN_ACCELERATION_MAX );

      x_drive_pos_diff  = x_drive.CanSollPos - x_drive.CanIstPos;
      x_drive_acceleration_delay  = x_drive.CanIstGeschw * 1.001 / x_drive_acceleration;  //  faktor 1.001 prevent cut to integer
      x_drive_current_braking_distance  = truncate ( x_drive_acceleration_delay * x_drive.CanIstGeschw / 2 );
      x_drive_next_braking_distance_wa  = truncate ( 0.5 * ( 1 + x_drive_acceleration_delay ) * ( x_drive.CanIstGeschw + ( 1 * x_drive_acceleration ) ) );
//       print ( "-------- X_drive_sim ----- calc ----- CanIstPos / CanSollPos / pos_diff: ", x_drive.CanIstPos, " / ", x_drive.CanSollPos, " / ", x_drive_pos_diff, "\n" );
//       print ( "-------- X_drive_sim ----- calc ----- acceleration_delay / acceleration: ", x_drive_acceleration_delay, " / ", x_drive_acceleration, "\n" );
//       print ( "-------- X_drive_sim ----- calc ----- braking_distance   current / next: ", x_drive_current_braking_distance, " / ", x_drive_next_braking_distance_wa, "\n" );

      if ( x_drive_pos_diff > 0 )
      {
        if ( x_drive.CanIstGeschw > 0 )
        { //  right direction positiv
          if ( ( x_drive_pos_diff - x_drive.CanIstGeschw - x_drive_next_braking_distance_wa ) >= 0 )
          {
            x_drive_target_speed = x_drive.CanIstGeschw + x_drive_acceleration;
            print ( "-------- X_drive_sim ++acl ( ", x_drive_acceleration, " ) => ", x_drive_target_speed, "\n");
          } else
          if ( ( x_drive_pos_diff - x_drive.CanIstGeschw - x_drive_current_braking_distance ) >= 0 )
          {
            x_drive_target_speed  = x_drive.CanIstGeschw;
            print ( "-------- X_drive_sim ++=== ( 0 ) => ", x_drive_target_speed, "\n" );
          } else
          {
            if ( x_drive.CanIstGeschw > x_drive_acceleration )
            {
              x_drive_target_speed  = x_drive.CanIstGeschw - x_drive_acceleration;
              print ( "-------- X_drive_sim ++brk ( ", ( 0 - x_drive_acceleration ), " ) => ", x_drive_target_speed, "\n");
            } else
            {
              if ( ( 2 * x_drive_pos_diff ) > x_drive.CanIstGeschw )
              {
                x_drive_target_speed  = x_drive_pos_diff - ( x_drive.CanIstGeschw / 2 );
              } else
              {
                x_drive_target_speed  = 0;
              };
              print ( "-------- X_drive_sim ++brk ( ", x_drive_target_speed - x_drive.CanIstGeschw, " ) -> ", x_drive_target_speed, "\n");
            };
          };
        } else
        if ( x_drive.CanIstGeschw < 0 )
        { //  invert direction
          if ( ( ( x_drive_pos_diff - x_drive.CAN_ACCELERATION_MAX ) <= 0 )
            && ( ( x_drive.CanIstGeschw - x_drive_acceleration ) <= 0 )
            )
          {
            x_drive_target_speed  = x_drive_acceleration / 3;
            print ( "-------- X_drive_sim +-low ( ", x_drive_target_speed - x_drive.CanIstGeschw, " ) -> ", x_drive_target_speed, "\n");
          } else
          {
            x_drive_target_speed  = x_drive.CanIstGeschw - x_drive_acceleration;
            print ( "-------- X_drive_sim +-inv ( ", x_drive_acceleration, " ) -> ", x_drive_target_speed,  "\n");
          };
        } else
        { //  zero speed
          if ( x_drive_pos_diff > x_drive.CAN_ACCELERATION_MAX )
          { //  positiv startup
            x_drive_target_speed  = x_drive.CAN_ACCELERATION_MAX;
          } else
          { //  positiv low distance
            x_drive_target_speed  = x_drive_pos_diff;
          };
          print ( "-------- X_drive_sim 0+ini ( ", x_drive_target_speed - x_drive.CanIstGeschw, " ) => ", x_drive_target_speed, "\n" );
        };
      } else if ( x_drive_pos_diff < 0 )
      {
        if ( x_drive.CanIstGeschw < 0 )
        { //  right direction negativ
          if ( ( x_drive_pos_diff - x_drive.CanIstGeschw - x_drive_next_braking_distance_wa ) <= 0 )
          {
            x_drive_target_speed = x_drive.CanIstGeschw + x_drive_acceleration;
            print ( "-------- X_drive_sim --acl ( ", x_drive_acceleration, " ) => ", x_drive_target_speed,  "\n");
          } else
          if ( ( x_drive_pos_diff - x_drive.CanIstGeschw - x_drive_current_braking_distance ) <= 0 )
          {
            x_drive_target_speed  = x_drive.CanIstGeschw;
            print ( "-------- X_drive_sim --=== ( 0 ) => ", x_drive_target_speed, "\n" );
          } else
          {
            if ( x_drive.CanIstGeschw < x_drive_acceleration )
            {
              x_drive_target_speed  = x_drive.CanIstGeschw - x_drive_acceleration;
              print ( "-------- X_drive_sim --brk ( ", ( 0 - x_drive_acceleration ), " ) => ", x_drive_target_speed,  "\n");
            } else
            {
              if ( ( 2 * x_drive_pos_diff ) < x_drive_acceleration )
              {
                x_drive_target_speed  = x_drive_pos_diff - ( x_drive.CanIstGeschw / 2 );
              } else
              {
                x_drive_target_speed  = 0;
              };
              print ( "-------- X_drive_sim --brk ( ", x_drive_target_speed - x_drive.CanIstGeschw, " ) -> ", x_drive_target_speed,  "\n");
            };
          };
        } else
        if ( x_drive.CanIstGeschw > 0 )
        { //  invert direction
          if ( ( ( x_drive_pos_diff + x_drive.CAN_ACCELERATION_MAX ) >= 0 )
            && ( ( x_drive.CanIstGeschw - x_drive_acceleration ) >= 0 )
            )
          {
            x_drive_target_speed  = x_drive.CanIstGeschw / 3;
            print ( "-------- X_drive_sim -+low ( ", x_drive_target_speed - x_drive.CanIstGeschw, " ) -> ", x_drive_target_speed,  "\n");
          } else
          {
            x_drive_target_speed  = x_drive.CanIstGeschw - x_drive_acceleration;
            print ( "-------- X_drive_sim -+inv ( ", x_drive_acceleration, " ) -> ", x_drive_target_speed,  "\n");
          };
        } else
        { //  zero speed
          if ( x_drive_pos_diff < ( 0 - x_drive.CAN_ACCELERATION_MAX ) )
          { //  negative startup
            x_drive_target_speed  = ( 0 - x_drive.CAN_ACCELERATION_MAX );
          } else
          { //  negative low distance
            x_drive_target_speed  = x_drive_pos_diff;
          };
          print ( "-------- X_drive_sim 0-ini ( ", x_drive_target_speed - x_drive.CanIstGeschw, " ) => ", x_drive_target_speed, "\n" );
        };
      } else
      {
        if ( abs ( x_drive.CanIstGeschw ) > 0 )
        {
          x_drive_target_speed  = 0;
          print ( "-------- X_drive_sim ------ on pos zero --- braking distance reached => slow down \n" );
        } else
        {
          x_drive_target_speed  = 0;
          print ( "-------- X_drive_sim ------ on pos zero with speed zero\n" );
        };
      };

      if ( x_drive_target_speed > ( 0 + x_drive.CAN_SPEED_DEFAULT ) )
      {
        x_drive_target_speed = ( 0 + x_drive.CAN_SPEED_DEFAULT );
        print ( "-------- X_drive_sim - limit to + CAN_SPEED_DEFAULT\n" );
      };
      if ( x_drive_target_speed < ( 0 - x_drive.CAN_SPEED_DEFAULT ) )
      {
        x_drive_target_speed = ( 0 - x_drive.CAN_SPEED_DEFAULT );
        print ( "-------- X_drive_sim - limit to - CAN_SPEED_DEFAULT\n" );
      };
    };

    a_x_drive_moving_speed_mode
    {
      print ( "-------- X_drive_sim speed mode ----- CanIstPos / CanSollGeschw: ", x_drive.CanIstPos, " / ", x_drive.CanSollGeschw, "\n" );
      if ( ( x_drive.CanSollGeschw != 0 )
        || ( x_drive.CanIstGeschw != 0 )
        )
      {
        x_drive_target_speed  = x_drive.CanSollGeschw;
      };
      a_x_drive_moving;
    };

    a_x_drive_moving_position_mode
    {
      print ( "-------- X_drive_sim position mode -- CanIstPos / CanSollPos / CanIstGeschw: ", x_drive.CanIstPos, " / ", x_drive.CanSollPos, " / ", x_drive.CanIstGeschw, "\n" );

      a_x_drive_calculate_target_speed;
      print ( "-------- X_drive_sim ---------------- CanIstPos / CanSollPos / CanIstGeschw: ", x_drive.CanIstPos, " / ", x_drive.CanSollPos, " / ", x_drive.CanIstGeschw, "\n" );
      a_x_drive_moving;

      if ( ( abs ( x_drive_pos_diff )     < 3  )
        && ( abs ( x_drive.CanIstGeschw ) < 3  )
        )
      { //  requested position will be reached in this timeframe
        print ( "-------- X_drive_sim ----- rest ----- CanIstPos / CanSollPos / CanIstGeschw: ", x_drive.CanIstPos, " / ", x_drive.CanSollPos, " / ", x_drive.CanIstGeschw, "\n" );
        x_drive.Status.ANTRIEB_INPOS    = 1;
        print ( "-------- X_drive_sim ---------------- ANTRIEB_INPOS    = 1\n" );
        x_drive_pos_diff      = 0;
        x_drive_speed_diff    = 0;
        x_drive_target_speed  = 0;
        x_drive.CanIstGeschw  = 0;
        x_drive.CanIstPos     = x_drive.CanSollPos;
        print ( "-------- X_drive_sim ---------------- CanIstPos / CanSollPos / CanIstGeschw: ", x_drive.CanIstPos, " / ", x_drive.CanSollPos, " / ", x_drive.CanIstGeschw, "\n" );
      };
    };

    a_x_drive_moving
    {
      //  limiter
      if ( x_drive_target_speed > ( 0 + x_drive.CAN_SPEED_MAX ) )
      {
        x_drive_target_speed = ( 0 + x_drive.CAN_SPEED_MAX );
        print ( "-------- X_drive_sim - limit to + CAN_SPEED_MAX\n" );
      };
      if ( x_drive_target_speed < ( 0 - x_drive.CAN_SPEED_MAX ) )
      {
        x_drive_target_speed = ( 0 - x_drive.CAN_SPEED_MAX );
        print ( "-------- X_drive_sim - limit to - CAN_SPEED_MAX\n" );
      };

      x_drive_target_speed_diff = x_drive_target_speed - x_drive.CanIstGeschw;
      print ( "-------- X_drive_sim ---------------- target_speed / CanIstGeschw / target_speed_diff: ", x_drive_target_speed, " / ", x_drive.CanIstGeschw, " / ", x_drive_target_speed_diff, "\n" );
      if ( abs ( x_drive_target_speed_diff ) >=  x_drive.CAN_ACCELERATION_MAX )
      {
        if ( x_drive_target_speed_diff > 0 )
        {
          x_drive_speed_diff =     x_drive.CAN_ACCELERATION_MAX;
        } else
        {
          x_drive_speed_diff = 0 - x_drive.CAN_ACCELERATION_MAX;
        };
      } else
      {
        x_drive_speed_diff = x_drive_target_speed_diff;
        print ( "-------- X_drive reach target speed\n" );
      };

      x_drive.CanIstPos     = x_drive.CanIstGeschw + ( x_drive_speed_diff / 2 ) + x_drive.CanIstPos;
      x_drive.CanIstGeschw  = x_drive.CanIstGeschw +   x_drive_speed_diff;
      x_drive_pos_diff      = x_drive.CanSollPos - x_drive.CanIstPos;
      print ( "-------- X_drive_sim moving --------- CanIstPos / CanIstGeschw / speed_diff:  ", x_drive.CanIstPos, " / ", x_drive.CanIstGeschw, " / ", x_drive_speed_diff, "\n" );
      x_drive.CanIstStrom   = 20 + truncate ( (       x_drive.CanIstGeschw   + x_drive_speed_diff ) / 300 );
      ev_x_drive_position_changed;
    };
    a_x_drive_sim_stop_moving
    {
      print ( "-------- X_drive_sim stops moving --------\n" );
      stop_timer ( timer_x_drive_moving );
      x_drive.Status.ANTRIEB_INPOS    = 0;
    };
    a_x_drive_error_moving
    {
      print ( "-------- X_drive_sim error moving --------\n" );
      a_x_drive_sim_stop_moving;
    };
    a_x_drive_error_stoped
    {
      print ( "-------- X_drive_sim error stoped --------\n" );
      a_x_drive_sim_stop_moving;
    };
  };

  on_enter
  {
    //print("-------- X_drive_sim.on_enter(), SollGeschw: -------- ", x_drive.SollGeschw, "\n");
  };

  on_exit
  {
    if ( !in_state ( Stoped ) )
    {
      a_x_drive_sim_stop_moving;
    };
  };

  Transition  { Initial;        Stoped;         };
  Transition  { Stoped;         Stoped;         ev_x_drive_sim_control;             g_x_drive_mode_request_not_used;  a_x_drive_error_stoped;               };
  Transition  { Stoped;         MovingSpeed;    ev_x_drive_sim_control;             g_x_drive_speed_mode_request;     a_x_drive_start_moving_speed_mode;    };
  Transition  { Stoped;         MovingPosition; ev_x_drive_sim_control;             g_x_drive_position_mode_request;  a_x_drive_start_moving_position_mode; };

  Transition  { MovingSpeed;    MovingSpeed;    ev_x_drive_periodic_moving_timer;   g_x_drive_speed_mode_request;     a_x_drive_moving_speed_mode;          };
  Transition  { MovingSpeed;    MovingPosition; ev_x_drive_periodic_moving_timer;   g_x_drive_position_mode_request;  a_x_drive_start_moving_position_mode; };
  Transition  { MovingSpeed;    Stoped;         ev_x_drive_sim_control;             g_x_drive_stop_request;           a_x_drive_sim_stop_moving;            };
  Transition  { MovingSpeed;    Stoped;         ev_x_drive_sim_control;             g_x_drive_mode_request_not_used;  a_x_drive_error_moving;               };

  Transition  { MovingPosition; MovingPosition; ev_x_drive_periodic_moving_timer;   g_x_drive_position_mode_request;  a_x_drive_moving_position_mode;       };
  Transition  { MovingPosition; MovingSpeed;    ev_x_drive_periodic_moving_timer;   g_x_drive_speed_mode_request;     a_x_drive_start_moving_speed_mode;    };
  Transition  { MovingPosition; Stoped;         ev_x_drive_sim_control;             g_x_drive_stop_request;           a_x_drive_sim_stop_moving;            };
  Transition  { MovingPosition; Stoped;         ev_x_drive_sim_control;             g_x_drive_mode_request_not_used;  a_x_drive_error_moving;               };
  Transition  { MovingPosition; Inpos;                                              g_x_drive_reach_inpos;                                                  };

  Transition  { Inpos;          Stoped;         ev_x_drive_sim_control;             g_x_drive_stop_request;           a_x_drive_sim_stop_moving;            };
};

Statemachine
{
  id  { sm_X_drive_sim_brake; };
  description { "X_drive_sim_brake"; };
  States  { Initial;  Applied; /*Released;*/ };
  import  { sm_X_drive_sim_move;  };

  Actions
  {
    a_x_drive_sim_brake_release
    {
      print ( "-------- X_drive_sim brake is released  --------\n" );
      x_drive.Status.ANTRIEB_BRAKE_RELEASED = 1;
    };
    a_x_drive_sim_brake_apply
    {
      print ( "-------- X_drive_sim brake is applied  --------\n" );
      x_drive.Status.ANTRIEB_BRAKE_RELEASED = 0;
    };
  };
  on_enter  { a_x_drive_sim_brake_apply; };
  on_exit   { a_x_drive_sim_brake_apply; };

  Transition  { Initial;              Applied;              };
  Transition  { Applied;              sm_X_drive_sim_move;  a_x_drive_sim_brake_release;  g_x_drive_brake_release_request; };
  Transition  { sm_X_drive_sim_move;  Applied;              a_x_drive_sim_brake_apply;   !g_x_drive_brake_release_request; };
};

Statemachine
{
  id  { sm_X_drive_sim_enable; };
  description { "X_drive_sim_enable"; };
  States  { Initial;  Disabled; /*Enabled;*/ };
  import  { sm_X_drive_sim_brake;  };

  Actions
  {
    a_x_drive_sim_is_enabled
    {
      print ( "-------- X_drive_sim is enabled  --------\n" );
      x_drive.Status.ANTRIEB_ENABLE_OUT     = 1;
    };
    a_x_drive_sim_is_disabled
    {
      print ( "-------- X_drive_sim is disabled  --------\n" );
      x_drive.Status.ANTRIEB_ENABLE_OUT     = 0;
    };
  };
  on_enter  { a_x_drive_sim_is_disabled; };
  on_exit   { a_x_drive_sim_is_disabled; };

  Transition  { Initial;              Disabled;                                         g_x_drive_is_operational; };
  Transition  { Disabled;             sm_X_drive_sim_brake; a_x_drive_sim_is_enabled;   g_x_drive_enable_request; };
  Transition  { sm_X_drive_sim_brake; Disabled;             a_x_drive_sim_is_disabled; !g_x_drive_enable_request; };
};

Statemachine
{
  id  { sm_X_drive_sim; };
  description { "X_drive_sim"; };
  States  { Initial;  NotReady; /*Ready;*/  };
  import  { sm_X_drive_sim_enable;  };

  Actions
  {
    a_x_drive_sim_is_ready
    {
      print ( "-------- X_drive_sim is ready --------\n" );
      x_drive.Status.ANTRIEB_READY  = 1;
    };
    a_x_drive_sim_is_not_ready
    {
      print ( "-------- X_drive_sim is not ready --------\n" );
      x_drive.Status.ANTRIEB_READY  = 0;
    };
  };
  on_enter
  {
    a_x_drive_sim_is_not_ready;
    start_periodic_timer ( DEF_ANTRIEBE_PERIODE * s, ev_x_drive_sim_state_response, timer_x_drive_sim_state_response );
  };
  on_exit
  {
    a_x_drive_sim_is_not_ready;
    stop_timer ( timer_x_drive_sim_state_response );
  };

  Transition  { Initial;                NotReady;               };
  Transition  { NotReady;               sm_X_drive_sim_enable;  a_x_drive_sim_is_ready;      !g_x_drive_fault;  };
  Transition  { sm_X_drive_sim_enable;  NotReady;               a_x_drive_sim_is_not_ready;   g_x_drive_fault;  };
};
