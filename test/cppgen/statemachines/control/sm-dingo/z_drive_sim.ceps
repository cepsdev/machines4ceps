// Z_drive
Event ev_z_drive_position_changed, ev_z_drive_sim_state_response;
Event ev_z_drive_sim_control; //  see file: rx-dingo.ceps

//  local events and guards
Event ev_z_drive_periodic_moving_timer;

Guard g_z_drive_is_operational, g_z_drive_enable_request, g_z_drive_fault, g_z_drive_control_stop, g_z_drive_brake_release_request;
Guard g_z_drive_speed_mode_request, g_z_drive_position_mode_request, g_z_drive_stop_request, g_z_drive_mode_request_not_used;

Systemstate z_drive_pos_diff, z_drive_speed_diff, z_drive_target_speed, z_drive_target_speed_diff;
Systemstate z_drive_current_braking_distance;  //  braking distance without acceleration
Systemstate z_drive_next_braking_distance_wa;  //  next braking distance with acceleration
Systemstate z_drive_acceleration, z_drive_acceleration_delay;

Globals
{
  g_z_drive_is_operational              =   in_state ( sm_Z_drive_fue.Operational );
  g_z_drive_fault                       = 0;
  g_z_drive_enable_request              = ( z_drive.Control.ANTRIEB_ENABLE_IN == 1 );
  g_z_drive_brake_release_request       = ( z_drive.Control.ANTRIEB_BRAKE_RELEASE == 1 );
  g_z_drive_speed_mode_request          = ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_SPEED );
  g_z_drive_position_mode_request       = ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_POSITION );
  g_z_drive_stop_request                = ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_STOP );
  g_z_drive_mode_request_not_used       = !g_z_drive_stop_request && !g_z_drive_speed_mode_request && !g_z_drive_position_mode_request;
};

Statemachine
{
  id  { sm_Z_drive_sim_move; };
  description { "Z_drive_sim_move"; };
  States  { Initial;  Stoped; MovingSpeed; MovingPosition;  Inpos;  };

  Actions
  {
    a_z_drive_start_moving_speed_mode
    {
      print ( "-------- Z_drive_sim start speed mode --------\n" );
      print ( "-------- Z_drive_sim starts moving with SollGeschw ( MKS / CAN ): ", z_drive.SollGeschw, " / ", z_drive.CanSollGeschw, "\n" );
      print ( "-------- Z_drive_sim ------------------ IstPos / IstGeschw (CAN): ", z_drive.CanIstPos,  " / ", z_drive.CanIstGeschw, "\n" );
      z_drive.Status.ANTRIEB_INPOS    = 0;

      if ( ( z_drive.CanSollGeschw != 0 )
        || ( z_drive.CanIstGeschw != 0 )
        )
      {
        z_drive_target_speed  = z_drive.CanSollGeschw;
        start_periodic_timer ( 0.01 * s, ev_z_drive_periodic_moving_timer, timer_z_drive_moving );
      } else
      {
        print ( "-------- Z_drive_sim SollGeschw == 0 ... do nothing" );
      };
    };
    a_z_drive_start_moving_position_mode
    {
      print ( "-------- Z_drive_sim start position mode --------\n" );
      print ( "-------- Z_drive_sim starts moving to SollPos    ( MKS / CAN ): ", z_drive.SollPos,    " / ", z_drive.CanSollPos, "\n" );
      print ( "-------- Z_drive_sim ---------------- IstPos / IstGeschw (CAN): ", z_drive.CanIstPos,  " / ", z_drive.CanIstGeschw, "\n" );

      if ( z_drive.CanSollPos != z_drive.CanIstPos )
      {
        z_drive.Status.ANTRIEB_INPOS    = 0;

        a_z_drive_calculate_target_speed;
        start_periodic_timer ( 0.01 * s, ev_z_drive_periodic_moving_timer, timer_z_drive_moving );
      } else
      {
        print ( "-------- Z_drive_sim CanSollPos == CanIstPos ... do nothing" );
      };
    };
    a_z_drive_calculate_target_speed
    {
      if ( z_drive.CanIstGeschw >= 0 )  z_drive_acceleration  = ( 0 + z_drive.CAN_ACCELERATION_MAX );
      else                              z_drive_acceleration  = ( 0 - z_drive.CAN_ACCELERATION_MAX );

      z_drive_pos_diff  = z_drive.CanSollPos - z_drive.CanIstPos;
      z_drive_acceleration_delay  = z_drive.CanIstGeschw * 1.001 / z_drive_acceleration;  //  faktor 1.001 prevent cut to integer
      z_drive_current_braking_distance  = truncate ( z_drive_acceleration_delay * z_drive.CanIstGeschw / 2 );
      z_drive_next_braking_distance_wa  = truncate ( 0.5 * ( 1 + z_drive_acceleration_delay ) * ( z_drive.CanIstGeschw + ( 1 * z_drive_acceleration ) ) );
//       print ( "-------- Z_drive_sim ----- calc ----- CanIstPos / CanSollPos / pos_diff: ", z_drive.CanIstPos, " / ", z_drive.CanSollPos, " / ", z_drive_pos_diff, "\n" );
//       print ( "-------- Z_drive_sim ----- calc ----- acceleration_delay / acceleration: ", z_drive_acceleration_delay, " / ", z_drive_acceleration, "\n" );
//       print ( "-------- Z_drive_sim ----- calc ----- braking_distance   current / next: ", z_drive_current_braking_distance, " / ", z_drive_next_braking_distance_wa, "\n" );

      if ( z_drive_pos_diff > 0 )
      {
        if ( z_drive.CanIstGeschw > 0 )
        { //  right direction positiv
          if ( ( z_drive_pos_diff - z_drive.CanIstGeschw - z_drive_next_braking_distance_wa ) >= 0 )
          {
            z_drive_target_speed = z_drive.CanIstGeschw + z_drive_acceleration;
            print ( "-------- Z_drive_sim ++acl ( ", z_drive_acceleration, " ) => ", z_drive_target_speed, "\n");
          } else
          if ( ( z_drive_pos_diff - z_drive.CanIstGeschw - z_drive_current_braking_distance ) >= 0 )
          {
            z_drive_target_speed  = z_drive.CanIstGeschw;
            print ( "-------- Z_drive_sim ++=== ( 0 ) => ", z_drive_target_speed, "\n" );
          } else
          {
            if ( z_drive.CanIstGeschw > z_drive_acceleration )
            {
              z_drive_target_speed  = z_drive.CanIstGeschw - z_drive_acceleration;
              print ( "-------- Z_drive_sim ++brk ( ", ( 0 - z_drive_acceleration ), " ) => ", z_drive_target_speed, "\n");
            } else
            {
              if ( ( 2 * z_drive_pos_diff ) > z_drive.CanIstGeschw )
              {
                z_drive_target_speed  = z_drive_pos_diff - ( z_drive.CanIstGeschw / 2 );
              } else
              {
                z_drive_target_speed  = 0;
              };
              print ( "-------- Z_drive_sim ++brk ( ", z_drive_target_speed - z_drive.CanIstGeschw, " ) -> ", z_drive_target_speed, "\n");
            };
          };
        } else
        if ( z_drive.CanIstGeschw < 0 )
        { //  invert direction
          if ( ( ( z_drive_pos_diff - z_drive.CAN_ACCELERATION_MAX ) <= 0 )
            && ( ( z_drive.CanIstGeschw - z_drive_acceleration ) <= 0 )
            )
          {
            z_drive_target_speed  = z_drive_acceleration / 3;
            print ( "-------- Z_drive_sim +-low ( ", z_drive_target_speed - z_drive.CanIstGeschw, " ) -> ", z_drive_target_speed, "\n");
          } else
          {
            z_drive_target_speed  = z_drive.CanIstGeschw - z_drive_acceleration;
            print ( "-------- Z_drive_sim +-inv ( ", z_drive_acceleration, " ) -> ", z_drive_target_speed,  "\n");
          };
        } else
        { //  zero speed
          if ( z_drive_pos_diff > z_drive.CAN_ACCELERATION_MAX )
          { //  positiv startup
            z_drive_target_speed  = z_drive.CAN_ACCELERATION_MAX;
          } else
          { //  positiv low distance
            z_drive_target_speed  = z_drive_pos_diff;
          };
          print ( "-------- Z_drive_sim 0+ini ( ", z_drive_target_speed - z_drive.CanIstGeschw, " ) => ", z_drive_target_speed, "\n" );
        };
      } else if ( z_drive_pos_diff < 0 )
      {
        if ( z_drive.CanIstGeschw < 0 )
        { //  right direction negativ
          if ( ( z_drive_pos_diff - z_drive.CanIstGeschw - z_drive_next_braking_distance_wa ) <= 0 )
          {
            z_drive_target_speed = z_drive.CanIstGeschw + z_drive_acceleration;
            print ( "-------- Z_drive_sim --acl ( ", z_drive_acceleration, " ) => ", z_drive_target_speed,  "\n");
          } else
          if ( ( z_drive_pos_diff - z_drive.CanIstGeschw - z_drive_current_braking_distance ) <= 0 )
          {
            z_drive_target_speed  = z_drive.CanIstGeschw;
            print ( "-------- Z_drive_sim --=== ( 0 ) => ", z_drive_target_speed, "\n" );
          } else
          {
            if ( z_drive.CanIstGeschw < z_drive_acceleration )
            {
              z_drive_target_speed  = z_drive.CanIstGeschw - z_drive_acceleration;
              print ( "-------- Z_drive_sim --brk ( ", ( 0 - z_drive_acceleration ), " ) => ", z_drive_target_speed,  "\n");
            } else
            {
              if ( ( 2 * z_drive_pos_diff ) < z_drive_acceleration )
              {
                z_drive_target_speed  = z_drive_pos_diff - ( z_drive.CanIstGeschw / 2 );
              } else
              {
                z_drive_target_speed  = 0;
              };
              print ( "-------- Z_drive_sim --brk ( ", z_drive_target_speed - z_drive.CanIstGeschw, " ) -> ", z_drive_target_speed,  "\n");
            };
          };
        } else
        if ( z_drive.CanIstGeschw > 0 )
        { //  invert direction
          if ( ( ( z_drive_pos_diff + z_drive.CAN_ACCELERATION_MAX ) >= 0 )
            && ( ( z_drive.CanIstGeschw - z_drive_acceleration ) >= 0 )
            )
          {
            z_drive_target_speed  = z_drive.CanIstGeschw / 3;
            print ( "-------- Z_drive_sim -+low ( ", z_drive_target_speed - z_drive.CanIstGeschw, " ) -> ", z_drive_target_speed,  "\n");
          } else
          {
            z_drive_target_speed  = z_drive.CanIstGeschw - z_drive_acceleration;
            print ( "-------- Z_drive_sim -+inv ( ", z_drive_acceleration, " ) -> ", z_drive_target_speed,  "\n");
          };
        } else
        { //  zero speed
          if ( z_drive_pos_diff < ( 0 - z_drive.CAN_ACCELERATION_MAX ) )
          { //  negative startup
            z_drive_target_speed  = ( 0 - z_drive.CAN_ACCELERATION_MAX );
          } else
          { //  negative low distance
            z_drive_target_speed  = z_drive_pos_diff;
          };
          print ( "-------- Z_drive_sim 0-ini ( ", z_drive_target_speed - z_drive.CanIstGeschw, " ) => ", z_drive_target_speed, "\n" );
        };
      } else
      {
        if ( abs ( z_drive.CanIstGeschw ) > 0 )
        {
          z_drive_target_speed  = 0;
          print ( "-------- Z_drive_sim ------ on pos zero --- braking distance reached => slow down \n" );
        } else
        {
          z_drive_target_speed  = 0;
          print ( "-------- Z_drive_sim ------ on pos zero with speed zero\n" );
        };
      };

      if ( z_drive_target_speed > ( 0 + z_drive.CAN_SPEED_DEFAULT ) )
      {
        z_drive_target_speed = ( 0 + z_drive.CAN_SPEED_DEFAULT );
        print ( "-------- Z_drive_sim - limit to + CAN_SPEED_DEFAULT\n" );
      };
      if ( z_drive_target_speed < ( 0 - z_drive.CAN_SPEED_DEFAULT ) )
      {
        z_drive_target_speed = ( 0 - z_drive.CAN_SPEED_DEFAULT );
        print ( "-------- Z_drive_sim - limit to - CAN_SPEED_DEFAULT\n" );
      };
    };

    a_z_drive_moving_speed_mode
    {
      print ( "-------- Z_drive_sim speed mode ----- CanIstPos / CanSollGeschw: ", z_drive.CanIstPos, " / ", z_drive.CanSollGeschw, "\n" );
      if ( ( z_drive.CanSollGeschw != 0 )
        || ( z_drive.CanIstGeschw != 0 )
        )
      {
        z_drive_target_speed  = z_drive.CanSollGeschw;
      };
      a_z_drive_moving;
    };

    a_z_drive_moving_position_mode
    {
      print ( "-------- Z_drive_sim position mode -- CanIstPos / CanSollPos / CanIstGeschw: ", z_drive.CanIstPos, " / ", z_drive.CanSollPos, " / ", z_drive.CanIstGeschw, "\n" );

      a_z_drive_calculate_target_speed;
      print ( "-------- Z_drive_sim ---------------- CanIstPos / CanSollPos / CanIstGeschw: ", z_drive.CanIstPos, " / ", z_drive.CanSollPos, " / ", z_drive.CanIstGeschw, "\n" );
      a_z_drive_moving;

      if ( ( abs ( z_drive_pos_diff )     < 3  )
        && ( abs ( z_drive.CanIstGeschw ) < 3  )
        )
      { //  requested position will be reached in this timeframe
        print ( "-------- Z_drive_sim ----- rest ----- CanIstPos / CanSollPos / CanIstGeschw: ", z_drive.CanIstPos, " / ", z_drive.CanSollPos, " / ", z_drive.CanIstGeschw, "\n" );
        z_drive.Status.ANTRIEB_INPOS    = 1;
        print ( "-------- Z_drive_sim ---------------- ANTRIEB_INPOS    = 1\n" );
        z_drive_pos_diff      = 0;
        z_drive_speed_diff    = 0;
        z_drive_target_speed  = 0;
        z_drive.CanIstGeschw  = 0;
        z_drive.CanIstPos     = z_drive.CanSollPos;
        print ( "-------- Z_drive_sim ---------------- CanIstPos / CanSollPos / CanIstGeschw: ", z_drive.CanIstPos, " / ", z_drive.CanSollPos, " / ", z_drive.CanIstGeschw, "\n" );
      };
    };

    a_z_drive_moving
    {
      //  limiter
      if ( z_drive_target_speed > ( 0 + z_drive.CAN_SPEED_MAX ) )
      {
        z_drive_target_speed = ( 0 + z_drive.CAN_SPEED_MAX );
        print ( "-------- Z_drive_sim - limit to + CAN_SPEED_MAX\n" );
      };
      if ( z_drive_target_speed < ( 0 - z_drive.CAN_SPEED_MAX ) )
      {
        z_drive_target_speed = ( 0 - z_drive.CAN_SPEED_MAX );
        print ( "-------- Z_drive_sim - limit to - CAN_SPEED_MAX\n" );
      };

      z_drive_target_speed_diff = z_drive_target_speed - z_drive.CanIstGeschw;
      print ( "-------- Z_drive_sim ---------------- target_speed / CanIstGeschw / target_speed_diff: ", z_drive_target_speed, " / ", z_drive.CanIstGeschw, " / ", z_drive_target_speed_diff, "\n" );
      if ( abs ( z_drive_target_speed_diff ) >=  z_drive.CAN_ACCELERATION_MAX )
      {
        if ( z_drive_target_speed_diff > 0 )
        {
          z_drive_speed_diff =     z_drive.CAN_ACCELERATION_MAX;
        } else
        {
          z_drive_speed_diff = 0 - z_drive.CAN_ACCELERATION_MAX;
        };
      } else
      {
        z_drive_speed_diff = z_drive_target_speed_diff;
        print ( "-------- Z_drive_sim reach target speed\n" );
      };

      z_drive.CanIstPos     = z_drive.CanIstGeschw + ( z_drive_speed_diff / 2 ) + z_drive.CanIstPos;
      z_drive.CanIstGeschw  = z_drive.CanIstGeschw +   z_drive_speed_diff;
      z_drive_pos_diff      = z_drive.CanSollPos - z_drive.CanIstPos;
      print ( "-------- Z_drive_sim moving --------- CanIstPos / CanIstGeschw / speed_diff:  ", z_drive.CanIstPos, " / ", z_drive.CanIstGeschw, " / ", z_drive_speed_diff, "\n" );
      if ( z_drive.CanIstGeschw >= 0 )  { z_drive.CanIstStrom   = 20 + truncate ( (       z_drive.CanIstGeschw   + z_drive_speed_diff ) / 100 ); }
      else                              { z_drive.CanIstStrom   = 20 + truncate ( ( abs ( z_drive.CanIstGeschw ) + z_drive_speed_diff ) / 200 ); };
      ev_z_drive_position_changed;
    };
    a_z_drive_sim_stop_moving
    {
      print ( "-------- Z_drive_sim stops moving --------\n" );
      stop_timer ( timer_z_drive_moving );
      z_drive.Status.ANTRIEB_INPOS    = 0;
    };
    a_z_drive_error_moving
    {
      print ( "-------- Z_drive_sim error moving --------\n" );
      a_z_drive_sim_stop_moving;
    };
    a_z_drive_error_stoped
    {
      print ( "-------- Z_drive_sim error stoped --------\n" );
      a_z_drive_sim_stop_moving;
    };
  };

  on_enter
  {
    //print("-------- Z_drive_sim.on_enter(), SollGeschw: -------- ", z_drive.SollGeschw, "\n");
  };

  on_exit
  {
    if ( !in_state ( Stoped ) )
    {
      a_z_drive_sim_stop_moving;
    };
  };

  Transition  { Initial;        Stoped;         };
  Transition  { Stoped;         Stoped;         ev_z_drive_sim_control;             g_z_drive_mode_request_not_used;  a_z_drive_error_stoped;               };
  Transition  { Stoped;         MovingSpeed;    ev_z_drive_sim_control;             g_z_drive_speed_mode_request;     a_z_drive_start_moving_speed_mode;    };
  Transition  { Stoped;         MovingPosition; ev_z_drive_sim_control;             g_z_drive_position_mode_request;  a_z_drive_start_moving_position_mode; };

  Transition  { MovingSpeed;    MovingSpeed;    ev_z_drive_periodic_moving_timer;   g_z_drive_speed_mode_request;     a_z_drive_moving_speed_mode;          };
  Transition  { MovingSpeed;    MovingPosition; ev_z_drive_periodic_moving_timer;   g_z_drive_position_mode_request;  a_z_drive_start_moving_position_mode; };
  Transition  { MovingSpeed;    Stoped;         ev_z_drive_sim_control;             g_z_drive_stop_request;           a_z_drive_sim_stop_moving;            };
  Transition  { MovingSpeed;    Stoped;         ev_z_drive_sim_control;             g_z_drive_mode_request_not_used;  a_z_drive_error_moving;               };

  Transition  { MovingPosition; MovingPosition; ev_z_drive_periodic_moving_timer;   g_z_drive_position_mode_request;  a_z_drive_moving_position_mode;       };
  Transition  { MovingPosition; MovingSpeed;    ev_z_drive_periodic_moving_timer;   g_z_drive_speed_mode_request;     a_z_drive_start_moving_speed_mode;    };
  Transition  { MovingPosition; Stoped;         ev_z_drive_sim_control;             g_z_drive_stop_request;           a_z_drive_sim_stop_moving;            };
  Transition  { MovingPosition; Stoped;         ev_z_drive_sim_control;             g_z_drive_mode_request_not_used;  a_z_drive_error_moving;               };
  Transition  { MovingPosition; Inpos;                                              g_z_drive_reach_inpos;                                                  };

  Transition  { Inpos;          Stoped;         ev_z_drive_sim_control;             g_z_drive_stop_request;           a_z_drive_sim_stop_moving;            };
};

Statemachine
{
  id  { sm_Z_drive_sim_brake; };
  description { "Z_drive_sim_brake"; };
  States  { Initial;  Applied; /*Released;*/ };
  import  { sm_Z_drive_sim_move;  };

  Actions
  {
    a_z_drive_brake_release
    {
      print ( "-------- Z_drive_sim brake is released  --------\n" );
      z_drive.Status.ANTRIEB_BRAKE_RELEASED = 1;
    };
    a_z_drive_brake_apply
    {
      print ( "-------- Z_drive_sim brake is applied  --------\n" );
      z_drive.Status.ANTRIEB_BRAKE_RELEASED = 0;
    };
  };
  on_enter  { a_z_drive_brake_apply; };
  on_exit   { a_z_drive_brake_apply; };

  Transition  { Initial;              Applied;              };
  Transition  { Applied;              sm_Z_drive_sim_move;  a_z_drive_brake_release;  g_z_drive_brake_release_request; };
  Transition  { sm_Z_drive_sim_move;  Applied;              a_z_drive_brake_apply;   !g_z_drive_brake_release_request; };
};

Statemachine
{
  id  { sm_Z_drive_sim_enable; };
  description { "Z_drive_sim_enable"; };
  States  { Initial;  Disabled; /*Enabled;*/ };
  import  { sm_Z_drive_sim_brake;  };

  Actions
  {
    a_z_drive_sim_is_enabled
    {
      print ( "-------- Z_drive_sim is enabled  --------\n" );
      z_drive.Status.ANTRIEB_ENABLE_OUT     = 1;
    };
    a_z_drive_sim_is_disabled
    {
      print ( "-------- Z_drive_sim is disabled  --------\n" );
      z_drive.Status.ANTRIEB_ENABLE_OUT     = 0;
    };
  };
  on_enter  { a_z_drive_sim_is_disabled; };
  on_exit   { a_z_drive_sim_is_disabled; };

  Transition  { Initial;              Disabled;                                         g_z_drive_is_operational; };
  Transition  { Disabled;             sm_Z_drive_sim_brake; a_z_drive_sim_is_enabled;   g_z_drive_enable_request; };
  Transition  { sm_Z_drive_sim_brake; Disabled;             a_z_drive_sim_is_disabled; !g_z_drive_enable_request; };
};

Statemachine
{
  id  { sm_Z_drive_sim; };
  description { "Z_drive_sim"; };
  States  { Initial;  NotReady; /*Ready;*/  };
  import  { sm_Z_drive_sim_enable;  };

  Actions
  {
    a_z_drive_sim_is_ready
    {
      print ( "-------- Z_drive_sim is ready --------\n" );
      z_drive.Status.ANTRIEB_READY  = 1;
    };
    a_z_drive_sim_is_not_ready
    {
      print ( "-------- Z_drive_sim is not ready --------\n" );
      z_drive.Status.ANTRIEB_READY  = 0;
    };
  };
  on_enter
  {
    a_z_drive_sim_is_not_ready;
    start_periodic_timer ( DEF_ANTRIEBE_PERIODE * s, ev_z_drive_sim_state_response, timer_z_drive_sim_state_response );
  };
  on_exit
  {
    a_z_drive_sim_is_not_ready;
    stop_timer ( timer_z_drive_sim_state_response );
  };

  Transition  { Initial;                NotReady;               };
  Transition  { NotReady;               sm_Z_drive_sim_enable;  a_z_drive_sim_is_ready;      !g_z_drive_fault;  };
  Transition  { sm_Z_drive_sim_enable;  NotReady;               a_z_drive_sim_is_not_ready;   g_z_drive_fault;  };
};
