// ------------------------------------------------------------------------
//      SEND LOGIC FOR TRGS/BAG
// ------------------------------------------------------------------------

global_functions
{
  print_drive_control_
  {
    params{ _drive; _DriveName; };
    print ( "======== TX-BAG    - CONTROL ====================== ", _DriveName, "\n"
          , "-------- ANTRIEB_MODE:           ", _drive.Control.ANTRIEB_MODE, "\n"
          , "-------- ANTRIEB_ENABLE_IN:      ", _drive.Control.ANTRIEB_ENABLE_IN, "\n"
          , "-------- BRAKE_RELEASE:          ", _drive.Control.ANTRIEB_BRAKE_RELEASE, "\n"
          , "-------- RESET_FAULT:            ", _drive.Control.ANTRIEB_RESET_FAULT, "\n"
          , "-------- SollPos    CAN / MKS :  ", _drive.CanSollPos,     " / ", _drive.SollPos,     "\n"
          , "-------- SollGeschw CAN / MKS :  ", _drive.CanSollGeschw,  " / ", _drive.SollGeschw,  "\n"
          , "-------- SollStrom  CAN / MKS :  ", _drive.CanSollStrom,   " / ", _drive.SollStrom,   " ( not used )\n"
          , "===================================================\n"
          );
  };
  print_io_module_control_
  {
    print ( "======== TX-BAG    - CONTROL ====================== IO-module\n"
          , "-------- VENTIL_VV1    : ", VENTIL_VV1,    "\n"
          , "-------- VENTIL_VZ1O   : ", VENTIL_VZ1O,   "\n"
          , "-------- VENTIL_VZ1V   : ", VENTIL_VZ1V,   "\n"
          , "-------- VENTIL_HRO    : ", VENTIL_HRO,    "\n"
          , "-------- VENTIL_HVZO   : ", VENTIL_HVZO,   "\n"
          , "-------- VENTIL_HVZS   : ", VENTIL_HVZS,   "\n"
          , "-------- VENTIL_HVZON  : ", VENTIL_HVZON,  "\n"
          , "-------- VENTIL_HVZSN  : ", VENTIL_HVZSN,  "\n"
          , "-------- VENTIL_SVK    : ", VENTIL_SVK,    "\n"
          , "-------- VENTIL_SVZE   : ", VENTIL_SVZE,   "\n"
          , "-------- VENTIL_SVZA   : ", VENTIL_SVZA,   "\n"
          , "===================================================\n"
          );
  };
  assemble_frame_AA_and_send_to_iom
  {
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out             = VENTIL_VZ1O;  //  bit 1
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out          = VENTIL_VZ1V;  //  bit 2

    io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out                           = VENTIL_VV1;   //  bit 5

    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out         = VENTIL_SVZE;  //  bit 0
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out         = VENTIL_SVZA;  //  bit 1
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out                   = VENTIL_SVK;   //  bit 2

    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out          = VENTIL_HVZS;  //  bit 3
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out             = VENTIL_HVZO;  //  bit 4
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out  = VENTIL_HVZSN; //  bit 5
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out     = VENTIL_HVZON; //  bit 6
    io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out                      = VENTIL_HRO;   //  bit 7

    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  };
  assemble_frame_AA_and_send_to_sim
  {
    si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out        = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out       = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out          = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out         = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 1;
    send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
  };
  assemble_frame_bag_pik_and_send_to_extbg
  {
    bag_piktogramm_fzg_spg_out                                   = Evaluiere_Bordnetz_Spannung ( Vehicle.tension_bordnet );
    bag_piktogramm_horizontierung_out                            = ANTENNA_ALIGNMENT_STATUS;
    bag_piktogramm_fue_out                                       = 0;
    bag_piktogramm_warnlampe_mastbediener_out                    = 7;
    send ( frame_extbg_bag_piktogramme, channel_can_1_out );
  };
  assemble_frame_MD_and_send_to_extbg
  {
    extbg_fahrzeugnetzspannung_out          = 0;
    extbg_gangstellung_out                  = Vehicle.Gear;
    extbg_feststellbremse_out               = Vehicle.Brake;
    extbg_motordrehzahl_out                 = Vehicle.Engine_rpm;
    send ( frame_extbg_motordaten, channel_can_1_out );
  };
  assemble_frame_MV_and_send_to_extbg
  {
    istposition_x_achse_out                 = truncate ( x_drive.IstPos * 10 );
    istposition_y_achse_out                 = truncate ( y_drive.IstPos * 10 );
    istwinkel_talin_x_out                   = truncate ( Talin_state.axis_x * 10 );
    istwinkel_talin_y_out                   = truncate ( Talin_state.axis_y * 10 );
    send ( frame_extbg_messwerte_navigation, channel_can_1_out );
  };
  assemble_frame_ZK_and_send_to_extbg
  {
    extbg_luftdruck_pneumatiktank_out                             = truncate ( Pneumatics.system_pressure      * 2 );
    extbg_luftdruck_stuetze_links_out                             = truncate ( Pneumatics.stilt_left_pressure  * 2 );
    extbg_luftdruck_stuetze_rechts_out                            = truncate ( Pneumatics.stilt_right_pressure * 2 );
    extbg_zustand_mastantrieb_stoerung_kommunikation_out          = !Z_DRIVE_COMMUNICATION_INCIDENT;
    extbg_zustand_mastantrieb_interner_fehler_out                 = z_drive.Status.ANTRIEB_FAULT;
    extbg_zustand_antrieb_x_ok_out                                = !X_DRIVE_COMMUNICATION_INCIDENT;
    extbg_zustand_antrieb_y_ok_out                                = !Y_DRIVE_COMMUNICATION_INCIDENT;
    extbg_zustand_talin_daten_gueltig_out                         = ( Talin_state.isValid > 0 );
    extbg_zustand_antrieb_x_interner_fehler_out                   = x_drive.Status.ANTRIEB_FAULT;
    extbg_zustand_antrieb_y_interner_fehler_out                   = y_drive.Status.ANTRIEB_FAULT;
    extbg_zustand_heckverteiler_ok_out                            = !HV_COMMUNICATION_INCIDENT;
    extbg_kommunikation_ivenet_ok_out                             = !IVENET_COMMUNICATION_INCIDENT;
    extbg_kommunikation_psm_ok_out                                = PSM_IS_OPERATIONAL;
    send ( frame_extbg_zustand_komponenten, channel_can_1_out );
  };
  assemble_frame_ZP_and_send_to_extbg
  {
    extbg_zurrung_plattform_out                                  = ( z_drive.IstPos <= z_drive.MAST_ZURRPOSITION ) && ( !SENSOR_VZ1O &&  SENSOR_VZ1V );
    extbg_sensorik_stuetzen_bodenkontakt_stuetze_links_out       = !SENSOR_SMOL && ( Pneumatics.stilt_left_pressure  <= STILT_PRESSURE_GROUND_CONTACT );
    extbg_sensorik_stuetzen_bodenkontakt_stuetze_rechts_out      = !SENSOR_SMOR && ( Pneumatics.stilt_right_pressure <= STILT_PRESSURE_GROUND_CONTACT );
    extbg_sensorik_stuetzen_SENSOR_SMOL_out                      = SENSOR_SMOL;
    extbg_sensorik_stuetzen_SENSOR_SMOR_out                      = SENSOR_SMOR;
    extbg_sensorik_stuetzen_SENSOR_SMUL_out                      = SENSOR_SMUL;
    extbg_sensorik_stuetzen_SENSOR_SMUR_out                      = SENSOR_SMUR;
    extbg_sensorik_stuetzen_klemmung_links_geschlossen_out       = !SENSOR_SEKOL &&  SENSOR_SEKGL;
    extbg_sensorik_stuetzen_klemmung_rechts_geschlossen_out      = !SENSOR_SEKOR &&  SENSOR_SEKGR;;
    extbg_sensorik_haube_geschlossen_out                         = SENSOR_HZG;
    extbg_sensorik_haube_offen_out                               = SENSOR_HZO;
    extbg_istposition_z_achse_out                                = truncate ( z_drive.IstPos );
    extbg_parkposition_radar_io_module_out                       = SENSOR_IN_PARKPOS;
    extbg_parkposition_radar_ivenet_out                          = ( ivenet_radar_position_state.isValid_in > 0 ) && ( ivenet_radar_position_state.isRadarInParkposition > 0 );
    send ( frame_extbg_zustand_plattform, channel_can_1_out );
  };
  assemble_frame_ZR_and_send_to_extbg
  {
    extbg_bag_fahrzeugwinkel_x_out          = truncate ( Vehicle.angle_x );
    extbg_bag_fahrzeugwinkel_y_out          = truncate ( Vehicle.angle_y );
    extbg_messwert_windmesser_gueltig_out   = Heckverteiler_state.wind_gueltig;
    extbg_messwert_windmesser_out           = Heckverteiler_state.wind_speed;
    send ( frame_extbg_zustand_ruestsatz, channel_can_1_out );
  };
  assemble_frame_and_send_to_x_drive
  {
    params{ _drive; };
    s_frame_drive_target_pos_xdrv_out             = truncate ( _drive.CanSollPos );
    s_frame_drive_target_speed_xdrv_out           = truncate ( _drive.CanSollGeschw / 16 );
    s_frame_drive_target_current_xdrv_out         = truncate ( _drive.CanSollStrom / 16 );

    s_frame_drive_control_mode_xdrv_out           = truncate ( _drive.Control.ANTRIEB_MODE );
    s_frame_drive_control_enable_xdrv_out         = truncate ( _drive.Control.ANTRIEB_ENABLE_IN );
    s_frame_drive_control_brake_release_xdrv_out  = truncate ( _drive.Control.ANTRIEB_BRAKE_RELEASE );
    s_frame_drive_control_reset_fault_xdrv_out    = truncate ( _drive.Control.ANTRIEB_RESET_FAULT );
    s_frame_drive_control_calibrate_pos_xdrv_out  = truncate ( _drive.Control.ANTRIEB_CALIBRATE_POS );

 //   print_drive_state(_drive.Control, _drive.Status);
    print_drive_control_ ( _drive, "X_drive" );

    send ( frame_drive_request_x, channel_can_1_out );
  };
  assemble_frame_and_send_to_y_drive
  {
    params{ _drive; };
    s_frame_drive_target_pos_ydrv_out             = truncate ( _drive.CanSollPos );
    s_frame_drive_target_speed_ydrv_out           = truncate ( _drive.CanSollGeschw / 16 );
    s_frame_drive_target_current_ydrv_out         = truncate ( _drive.CanSollStrom / 16 );

    s_frame_drive_control_mode_ydrv_out           = truncate ( _drive.Control.ANTRIEB_MODE );
    s_frame_drive_control_enable_ydrv_out         = truncate ( _drive.Control.ANTRIEB_ENABLE_IN );
    s_frame_drive_control_brake_release_ydrv_out  = truncate ( _drive.Control.ANTRIEB_BRAKE_RELEASE );
    s_frame_drive_control_reset_fault_ydrv_out    = truncate ( _drive.Control.ANTRIEB_RESET_FAULT );
    s_frame_drive_control_calibrate_pos_ydrv_out  = truncate ( _drive.Control.ANTRIEB_CALIBRATE_POS );

 //   print_drive_state(_drive.Control, _drive.Status);
    print_drive_control_ ( _drive, "Y_drive" );

    send ( frame_drive_request_y, channel_can_1_out );
  };
  assemble_frame_and_send_to_z_drive
  {
    params{ _drive; };
    s_frame_drive_target_pos_zdrv_out             = truncate ( _drive.CanSollPos );
    s_frame_drive_target_speed_zdrv_out           = truncate ( _drive.CanSollGeschw / 16 );
    s_frame_drive_target_current_zdrv_out         = truncate ( _drive.CanSollStrom / 16 );

    s_frame_drive_control_mode_zdrv_out           = truncate ( _drive.Control.ANTRIEB_MODE );
    s_frame_drive_control_enable_zdrv_out         = truncate ( _drive.Control.ANTRIEB_ENABLE_IN );
    s_frame_drive_control_brake_release_zdrv_out  = truncate ( _drive.Control.ANTRIEB_BRAKE_RELEASE );
    s_frame_drive_control_reset_fault_zdrv_out    = truncate ( _drive.Control.ANTRIEB_RESET_FAULT );
    s_frame_drive_control_calibrate_pos_zdrv_out  = truncate ( _drive.Control.ANTRIEB_CALIBRATE_POS );

//    print_drive_state(_drive.Control, _drive.Status);
    print_drive_control_ ( _drive, "Z_drive" );

    send ( frame_drive_request_z, channel_can_1_out );
  };
  event_logging
  {
    params{ inEvent; };
    print ( "-------- TX-BAG  -------- Event = ", inEvent, "\n" );
  };
};

post_event_processing
{

//   if ( ( argv ( 0 ) == "ev_xyz_starts" ) && (irgendwas_anderes) )
//     send();
  
//   if (DEBUG) print ( "post_event_processing\n", "Event = ", argv(0), "\n" );
//   if (changed("luminance_request_target_value" ) ){
//      print ( "Value of 'luminance_request_target_value' changed", "\n" );
//      send(luminance_request, out_channel);
//    }

//    print ( "-------- TX-BAG  -------- Event = ", argv(0), "\n" );

// ------------------------------------------------------------------------  
//                  DRIVES
// ------------------------------------------------------------------------

  // X drive -------------------------------------------------------
  if ( argv ( 0 ) == "ev_x_drive_can_control" )
  {
    event_logging ( argv ( 0 ) );

    x_drive.CanSollPos        = X_SollPosition_Berechnen ( x_drive.SollPos );
    x_drive.CanSollGeschw     = 16 * X_Set_Speed ( truncate ( x_drive.SollGeschw ) );
    x_drive.CanSollStrom      = truncate ( 10 * x_drive.SollStrom );

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else

  // Y drive -------------------------------------------------------
  if ( argv ( 0 ) == "ev_y_drive_can_control" )
  {
    event_logging ( argv ( 0 ) );

    y_drive.CanSollPos        = Y_SollPosition_Berechnen ( y_drive.SollPos );
    y_drive.CanSollGeschw     = 16 * Y_Set_Speed ( truncate ( y_drive.SollGeschw ) );
    y_drive.CanSollStrom      = truncate ( 10 * y_drive.SollStrom );

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else

  // Z drive -------------------------------------------------------
  if ( argv ( 0 ) == "ev_z_drive_can_control" )
  {
    event_logging ( argv ( 0 ) );

    z_drive.CanSollPos        = Z_SollPosition_Berechnen ( z_drive.SollPos );
    z_drive.CanSollGeschw     = 16 * Z_Set_Speed ( truncate ( z_drive.SollGeschw ) );
    z_drive.CanSollStrom      = truncate ( 10 * z_drive.SollStrom );

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else

// ------------------------------------------------------------------------
//                  HECKVERTEILER
// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_heckverteiler_is_online" )
  {
    event_logging ( argv ( 0 ) );
    assemble_frame_AA_and_send_to_sim;
  } else

// ------------------------------------------------------------------------
//                  IO MODUL
// ------------------------------------------------------------------------

  if ( argv ( 0 ) == "ev_io_module_contol_AA" )
  {
    print_io_module_control_ ( );

    assemble_frame_AA_and_send_to_iom;
  } else
  if ( argv ( 0 ) == "ev_io_module_contol_FPTHV" )
  {
    io_modul_force_pdo_transmit_hv_change_counter_out = s_iom_force_pdo_transmit_counter;

    send ( io_modul_force_pdo_transmit_hv, channel_can_1_out );
  } else


// ------------------------------------------------------------------------  
//                  FUNKTIONSUEBERWACHUNG
// ------------------------------------------------------------------------  
  if ( argv ( 0 ) == "ev_bag_has_heartbeat" )
  {
    s_heartbeat_payload_bag_out = s_bag_heartbeat_payload;
    send ( frame_heartbeat_bag, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_x_drive_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_X_DRIVE;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_y_drive_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_Y_DRIVE;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_z_drive_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_Z_DRIVE;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_io_module_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_IO_MODULE;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_si_module_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_SI_MODULE;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_usv1_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_USV_1;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_usv2_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_USV_2;
    send ( frame_set_operational, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_extbg_set_operational" )
  {
    event_logging ( argv ( 0 ) );
    s_set_operational_node_id = CAN_ID_EXTBG;
    send ( frame_set_operational, channel_can_1_out );
  } else

  // ------------------------------------------------------------------------
  //                  EXTBG
  // ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_send_fortschrittsanzeige_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      bag_fortschrittsanzeigen_out = argv ( 1 );
      print ( "-------- TX-BAG  -------- ev_send_fortschrittsanzeige_to_extbg ( ", bag_fortschrittsanzeigen_out, " )\n" );
      bag_fortschrittsanzeigen_change_counter_out = bag_fortschrittsanzeigen_change_counter_out + 1;
      send ( frame_extbg_fortschritt_automatikbetrieb, channel_can_1_out );
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_fortschrittsanzeige_to_extbg ( ", bag_fortschrittsanzeigen_out, " ) not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_betriebsart_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      extbg_betriebsart_out                                        = 1;
      send ( frame_extbg_betriebsart, channel_can_1_out );
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_betriebsart_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_piktogramme_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      assemble_frame_bag_pik_and_send_to_extbg;
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_piktogramme_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_messwerte_navigation_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      assemble_frame_MV_and_send_to_extbg;
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_messwerte_navigation_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_zustand_plattform_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      assemble_frame_ZP_and_send_to_extbg;
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_zustand_plattform_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_zustand_komponenten_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      assemble_frame_ZK_and_send_to_extbg;
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_zustand_komponenten_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_motordaten_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      assemble_frame_MD_and_send_to_extbg;
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_motordaten_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_zustand_ruestsatz_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      assemble_frame_ZR_and_send_to_extbg;
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_zustand_ruestsatz_to_extbg not delivered\n" );
    };
  } else
  if ( argv ( 0 ) == "ev_send_software_version_to_extbg" )
  {
    if ( s_extBG_is_online )
    {
      bag_major_software_version_out = MAJOR_SOFTWARE_VERSION;
      bag_minor_software_version_out = MINOR_SOFTWARE_VERSION;
      send ( frame_bag_software_version, channel_can_1_out );
    } else
    {
      print ( "-------- TX-BAG  -------- ev_send_software_version_to_extbg not delivered\n" );
    };
  } else
  {
    //  use for debugging
//     event_logging ( argv ( 0 ) );
//     print ( "===  this event has no special handling  ===\n" );
  };

  if ( s_extBG_is_online )
  {
    // ------------- Fehlermeldungen ---------------
    if ( changed ( "extbg_error_0" )
      || changed ( "extbg_error_1" )
      || changed ( "extbg_error_2" )
      || changed ( "extbg_error_3" )
      || changed ( "extbg_error_4" )
      )
    {
      extbg_error_0_out = extbg_error_0;
      extbg_error_1_out = extbg_error_1;
      extbg_error_2_out = extbg_error_2;
      extbg_error_3_out = extbg_error_3;
      extbg_error_4_out = extbg_error_4;

      if ( ( extbg_error_0_out != NO_ERROR )
        || ( extbg_error_1_out != NO_ERROR )
        || ( extbg_error_2_out != NO_ERROR )
        || ( extbg_error_3_out != NO_ERROR )
        || ( extbg_error_4_out != NO_ERROR )
        )
      {
        bag_fehler_change_counter_out = bag_fehler_change_counter_out + 1;
        send ( frame_extbg_fortschritt_automatikbetrieb, channel_can_1_out );
      }
    };
  }; // s_extBG_is_online

};
