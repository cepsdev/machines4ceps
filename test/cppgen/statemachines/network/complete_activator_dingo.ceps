Event ev_x_drive_set_operational, ev_x_drive_sim_state_response;
Event ev_y_drive_set_operational, ev_y_drive_sim_state_response;
Event ev_z_drive_set_operational, ev_z_drive_sim_state_response;
Event ev_plug_extbg, ev_unplug_extbg;

Event ev_io_module_send_can_bus_message_ZHV1, ev_io_module_send_can_bus_message_ZHV2;

unique
{
  ev_io_module_send_can_bus_message_ZHV1;
  ev_io_module_send_can_bus_message_ZHV2;
};
no_transitions
{
  ev_x_drive_sim_state_response;
  ev_y_drive_sim_state_response;
  ev_z_drive_sim_state_response;

  ev_io_module_send_can_bus_message_ZHV1;
  ev_io_module_send_can_bus_message_ZHV2;
};

global_functions
{
//  a_stop_io_module{
//    stop ( sm_IO_module_fue );
//    stop ( sm_SI_module_fue );
//    print ( "IO Module just stopped\n" );
//    print ( "SI Module just stopped\n" );
//  };
//a_stop_usv{
//  stop ( sm_USV2_fue );
//  stop ( sm_USV1_fue );
//  print ( "USV1 just stopped\n" );
//  print ( "USV2 just stopped\n" );
//};
//     a_set_drives_operational {
//         ev_x_drive_set_operational;
//         ev_y_drive_set_operational;
//         ev_z_drive_set_operational;
//         print ( "X_drive just set operational\n" );
//         print ( "Y_drive just set operational\n" );
//         print ( "Z_drive just set operational\n" );
//     };
//    
//    a_send_msg{
//     extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_out = 1;
//     send ( frame_extbg_taster_betaetigung, channel_can_1_out );
//     print ( "Message 0x2E0 from ExtBG was sent\n" );
//        
//     extbg_force_bag_pdo_transmit_counter_out = extbg_force_bag_pdo_transmit_counter_out + 1;
//     send ( frame_extbg_force_bag_pdo_transmit, channel_can_1_out );
//     print ( "Message 0x1E1 from ExtBG was sent\n" );
//     };
//    
//     a_stilts_extend {
//         extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_out = 1;
//         send ( frame_extbg_taster_betaetigung, channel_can_1_out );
//     };
//     
//     a_interruption {
//         extbg_taster_betaetigung_automatikbetrieb_abbruch_out            = 1;
//         send ( frame_extbg_taster_betaetigung, channel_can_1_out );
//     };
//    
//    a_set_system_pressure_low {ev_set_system_pressure_low;};

    a_set_brake_to_active
    {
      print ( "Set BRAKE_IS_ACTIVE    >>>>>>>>>>>>>>>>>>>>> \n" );
      s_frame_parking_brake_out = BRAKE_IS_ACTIVE;
      send ( frame_GPM_13, channel_can_0_out );
    };

    a_set_gear_to_neutral
    {
      print ( "Set GEAR_IS_DC_NEUTRAL >>>>>>>>>>>>>>>>>>>>> \n" );
      s_frame_current_gear_out = GEAR_IS_DC_NEUTRAL;
      send ( frame_GPM_14, channel_can_0_out );
    };
};

Statemachine
{
  id  { sm_Plug_in_ExtBG; };
  import  { sm_ExtBG; };
  States  { Initial;  Final;  };
  Actions
  {
    a_msg1  { print ( "ExternalBG is online\n" ); };
    a_msg2  { print ( "ExternalBG is offline\n" ); };
  };
  Transition  { Initial;  sm_ExtBG; ev_plug_extbg;    a_msg1; };
  Transition  { sm_ExtBG; Final;    ev_unplug_extbg;  a_msg2; };
};

Simulation
{
  //  zuerst Funktions√ºberwachung
  Start { sm_IO_module_fue;                   };
  Start { sm_SI_module_fue;                   };
  Start { sm_USV2_fue;                        };
  Start { sm_USV1_fue;                        };
  Start { sm_X_drive_fue;                     };
  Start { sm_Y_drive_fue;                     };
  Start { sm_Z_drive_fue;                     };
  //  simulation of signal-processing of io-module
  Start { sm_IO_module_sim;                   };

  Start { sm_X_drive_sim;                     };
  Start { sm_Y_drive_sim;                     };
  Start { sm_Z_drive_sim;                     };

  Start { sm_X_drive_endschalter_IP_X;        };

  Start { sm_Y_drive_endschalter_AB_Y;        };
  Start { sm_Y_drive_endschalter_IP_Y;        };

  Start { sm_Mast_endschalter_EO_Z;           };
  Start { sm_Mast_endschalter_EU_Z;           };
  Start { sm_Mast_endschalter_IP_Z;           };
  Start { sm_Mast_endschalter_UB_Z;           };

  Start { sm_Antenna_endschalter_lock_VZ1O;   };
  Start { sm_Antenna_endschalter_lock_VZ1V;   };
  Start { sm_Antenna_valve_VZ1O;              };
  Start { sm_Antenna_valve_VZ1V;              };
  Start { sm_Dust_valve_VV1;                  };
  Start { sm_Flap_valve_HR;                   };
  Start { sm_Flap_valve_HVZO;                 };
  Start { sm_Flap_valve_HVZON;                };
  Start { sm_Flap_valve_HVZS;                 };
  Start { sm_Flap_valve_HVZSN;                };
  Start { sm_Flap_lock_HR1;                   };
  Start { sm_Flap_lock_HR2;                   };
  Start { sm_Flap_position;                   };
  Start { sm_Flap_endschalter_HR1O;           };
  Start { sm_Flap_endschalter_HR1V;           };
  Start { sm_Flap_endschalter_HR2O;           };
  Start { sm_Flap_endschalter_HR2V;           };
  Start { sm_Flap_endschalter_HZG;            };
  Start { sm_Flap_endschalter_HZO;            };
//  Start { sm_ExtBG;                           };
  Start { sm_PSM;                             };
  Start { sm_iVeNet;                          };
  Start { sm_Pneumatic_pressure_stilt_left;   };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;       };
  Start { sm_Stilt_position_left;             };
  Start { sm_Stilt_position_right;            };
  Start { sm_Stilts_endschalter_SEKGL;        };
  Start { sm_Stilts_endschalter_SEKGR;        };
  Start { sm_Stilts_endschalter_SEKOL;        };
  Start { sm_Stilts_endschalter_SEKOR;        };
  Start { sm_Stilts_endschalter_SMOL;         };
  Start { sm_Stilts_endschalter_SMOR;         };
  Start { sm_Stilts_endschalter_SMUL;         };
  Start { sm_Stilts_endschalter_SMUR;         };
  Start { sm_Stilts_valve_SVK;                };
  Start { sm_Stilts_valve_SVZA;               };
  Start { sm_Stilts_valve_SVZE;               };
  Start { sm_Talin;                           };
  //  Vehicle
  Start { sm_Vehicle_sim; };


//  start_timer ( 2*s, a_set_system_pressure_normal ); //  two seconds afer start trigger a can-mesage with level of system pressure

//  start_timer ( 5*s, a_stop_io_module );
//  start_timer ( 6*s, a_stop_usv );
//  start_timer ( 1*s, a_set_drives_operational );

//  // EXTBG (next 2 lines to plug it in)
//   Start{Plug_in_ExtBG;};
//   start_timer(2*s, ev_plug_extbg);

//  start_timer ( 6*s, ev_extbg_set_operational);
//  start_timer ( 10*s, a_send_msg);
//  start_timer ( 10*s, ev_unplug_extbg);  
//  start_timer ( 10*s, a_stilts_extend);
//  start_timer ( 12*s, a_interruption);

//  // STILTS
//  start_timer(6*s, a_set_system_pressure_low);
//  start_timer(8*s, a_stilts_extend);

//     // MAST OPERATIONS 
//      start_timer(15*s, a_set_gear_to_neutral);
//      start_timer(16*s, a_set_brake_to_active);

};
