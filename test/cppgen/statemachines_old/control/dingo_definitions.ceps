Guard g_antenna_valve_lock_is_in_unlocking_position, g_antenna_valve_lock_is_in_locking_position;
Guard g_mast_height_is_ge_lower_working_position;
Guard g_stilts_valve_SVK_is_in_locking_position,  g_stilts_valve_SVK_is_in_unlocking_position;
Guard g_stilts_valve_is_in_retracting_position,   g_stilts_valve_is_in_extending_position;
Guard g_stilts_valve_is_in_prepare_position,      g_stilts_valves_are_in_closed_position;
Guard g_x_drive_is_operational, g_y_drive_is_operational, g_z_drive_is_operational;
Guard g_sensor_IP_x_drive,  g_sensor_AB_y_drive,  g_sensor_IP_y_drive;
Guard g_io_module_is_functional, g_usv1_is_functional, g_x_drive_is_functional, g_y_drive_is_functional;
Guard g_si_module_is_functional, g_usv2_is_functional, g_z_drive_is_functional, g_extbg_is_functional;
Guard g_flap_valve_HR_is_closed, g_flap_valve_HR_is_open;
Guard g_flap_lock_HR1_is_closed, g_flap_lock_HR1_is_open;
Guard g_flap_lock_HR2_is_closed, g_flap_lock_HR2_is_open;
Guard g_valves_are_in_closing_flap_position, g_valves_are_in_opening_flap_position;


// --------------------------------------------
// ----------------- STATES -------------------
// --------------------------------------------

// --------------------------------------------
// ------------------- FLAP -------------------
val DELAY_VHR_OPEN    = 0.05;
val DELAY_VHR_CLOSE   = 0.06;
val DELAY_HR1_OPEN    = 0.11;
val DELAY_HR1_CLOSE   = 0.22;
val DELAY_HR2_OPEN    = 0.12;
val DELAY_HR2_CLOSE   = 0.23;
val DELAY_HR1O_OPEN   = 0.01;
val DELAY_HR1O_CLOSE  = 0.02;
val DELAY_HR2O_OPEN   = 0.015;
val DELAY_HR2O_CLOSE  = 0.025;
val DELAY_HR1V_OPEN   = 0.03;
val DELAY_HR1V_CLOSE  = 0.04;
val DELAY_HR2V_OPEN   = 0.035;
val DELAY_HR2V_CLOSE  = 0.045;

val DELAY_HVZO_OPEN   = 0.05;
val DELAY_HVZO_CLOSE  = 0.06;
val DELAY_HVZS_OPEN   = 0.05;
val DELAY_HVZS_CLOSE  = 0.06;

// Ansteuerung CS 13
Systemstate VENTIL_HRS;
Systemstate VENTIL_VZ1O;  //  Ventil Verzurrung Zylinder 1 Oeffnen
Systemstate VENTIL_VZ1V;  //  Ventil Verzurrung Zylinder 1 Verriegeln
Systemstate VENTIL_VV1;

// Ansteuerung CS 14
Systemstate VENTIL_SVZA;
Systemstate VENTIL_SVZE;
Systemstate VENTIL_SVK;
Systemstate VENTIL_HVZO;
Systemstate VENTIL_HVZON;
Systemstate VENTIL_HVZS;
Systemstate VENTIL_HVZSN;
Systemstate VENTIL_HRO;

Systemstate Flap_position;
val FLAP_POSITION_MIN       =   0.0;
val FLAP_POSITION_MAX       =  90.0;
val FLAP_POSITION_DEFAULT   = FLAP_POSITION_MIN;
val FLAP_PRESSURE_MOVING_COEFFICIENT  = 0.5; //  related to System_pressure

// --------------------------------------------
// ---------------- PRESSURE ------------------
Systemstate Stilt_left_pressure;
Systemstate Stilt_right_pressure;
Systemstate System_pressure;

val DEFAULT_SYSTEM_PRESSURE             = 6.0;
val START_SYSTEM_PRESSURE               = 0.0;
val LOW_SYSTEM_PRESSURE                 = 4.5;
val DEFAULT_STILT_PRESSURE              = 0.0;
val STILT_PRESSURE_ON_GROUND            = 0.2;
val STILT_PRESSURE_MOVING_COEFFICIENT   = 0.95; //  related to System_pressure

// --------------------------------------------
// ------------------- StÃ¼tzen ----------------
val DELAY_SVZA_OPEN   = 0.05;
val DELAY_SVZA_CLOSE  = 0.06;
val DELAY_SVZE_OPEN   = 0.07;
val DELAY_SVZE_CLOSE  = 0.08;

Systemstate Stilt_position_left;
Systemstate Stilt_position_right;
val STILTS_POSITION_MIN           =   0.0;
val STILTS_POSITION_MAX           = 100.0;
val STILTS_NO_GROUND_CONTACT      = 2 * STILTS_POSITION_MAX;
//  //  values that stilts could not reach the ground
// val STILTS_POSITION_GROUND_DEFAULT_LEFT   = STILTS_NO_GROUND_CONTACT;
// val STILTS_POSITION_GROUND_DEFAULT_RIGHT  = STILTS_NO_GROUND_CONTACT;
//  values that stilts could reach the ground
val STILTS_POSITION_GROUND_DEFAULT_LEFT   = STILTS_POSITION_MAX - 40.0;
val STILTS_POSITION_GROUND_DEFAULT_RIGHT  = STILTS_POSITION_MAX - 20.0;
Systemparameter STILTS_POSITION_GROUND_LEFT;
Systemparameter STILTS_POSITION_GROUND_RIGHT;

// --------------------------------------------
// ----------------- GLOBALS ------------------
// --------------------------------------------
Globals
{
// --------------------------------------------
// ------------------- FLAP -------------------
  Flap_position = FLAP_POSITION_DEFAULT;

  // Ansteuerung CS 13
  VENTIL_HRS   = 0;
  VENTIL_VZ1O  = 0; //  Ventil Verzurrung Zylinder 1 Oeffnen
  VENTIL_VZ1V  = 0; //  Ventil Verzurrung Zylinder 1 Verriegeln
  VENTIL_VV1   = 0;

  // Ansteuerung CS 14
  VENTIL_SVZA  = 0;
  VENTIL_SVZE  = 0;
  VENTIL_SVK   = 0;
  VENTIL_HVZO  = 0;
  VENTIL_HVZON = 0;
  VENTIL_HVZS  = 0;
  VENTIL_HVZSN = 0;
  VENTIL_HRO   = 0;

// --------------------------------------------
// ---------------- PRESSURE ------------------
  System_pressure       = START_SYSTEM_PRESSURE;
  Stilt_left_pressure   = START_SYSTEM_PRESSURE;
  Stilt_right_pressure  = START_SYSTEM_PRESSURE;

  Stilt_position_left   = STILTS_POSITION_MIN;
  Stilt_position_right  = STILTS_POSITION_MIN;
  STILTS_POSITION_GROUND_LEFT   =  STILTS_POSITION_GROUND_DEFAULT_LEFT;   //  only for simulation of ground contact
  STILTS_POSITION_GROUND_RIGHT  =  STILTS_POSITION_GROUND_DEFAULT_RIGHT;  //  only for simulation of ground contact

// --------------------------------------------
// ----------------- GUARDS -------------------
// --------------------------------------------
  g_valves_are_in_closing_flap_position           =   in_state ( sm_Flap_valve_HVZO.Closed )  &&  in_state ( sm_Flap_valve_HVZON.Open )
                                                  &&  in_state ( sm_Flap_valve_HVZS.Open )    &&  in_state ( sm_Flap_valve_HVZSN.Open );
  g_valves_are_in_opening_flap_position           =   in_state ( sm_Flap_valve_HVZO.Open )    &&  in_state ( sm_Flap_valve_HVZON.Open )
                                                  &&  in_state ( sm_Flap_valve_HVZS.Closed )  &&  in_state ( sm_Flap_valve_HVZSN.Open );

  g_flap_valve_HR_is_closed                       =   in_state ( sm_Flap_valve_HR.Closed );
  g_flap_valve_HR_is_open                         =   in_state ( sm_Flap_valve_HR.Open );

  g_flap_lock_HR1_is_closed                       =   in_state ( sm_Flap_lock_HR1.Closed );
  g_flap_lock_HR1_is_open                         =   in_state ( sm_Flap_lock_HR1.Open );

  g_flap_lock_HR2_is_closed                       =   in_state ( sm_Flap_lock_HR2.Closed );
  g_flap_lock_HR2_is_open                         =   in_state ( sm_Flap_lock_HR2.Open );

  g_antenna_valve_lock_is_in_locking_position     =   in_state ( sm_Antenna_valve_VZ1O.Closed ) &&  in_state ( sm_Antenna_valve_VZ1V.Open );
  g_antenna_valve_lock_is_in_unlocking_position   =   in_state ( sm_Antenna_valve_VZ1O.Open )   &&  in_state ( sm_Antenna_valve_VZ1V.Closed );

  g_stilts_valve_SVK_is_in_locking_position       =   in_state ( sm_Stilts_valve_SVK.Closed );
  g_stilts_valve_SVK_is_in_unlocking_position     =   in_state ( sm_Stilts_valve_SVK.Open );

  g_stilts_valve_is_in_retracting_position        =   in_state ( sm_Stilts_valve_SVZE.Open )    &&  in_state ( sm_Stilts_valve_SVZA.Closed );
  g_stilts_valve_is_in_extending_position         =   in_state ( sm_Stilts_valve_SVZE.Closed )  &&  in_state ( sm_Stilts_valve_SVZA.Open );
  g_stilts_valve_is_in_prepare_position           =   in_state ( sm_Stilts_valve_SVZE.Open )    &&  in_state ( sm_Stilts_valve_SVZA.Open );
  g_stilts_valves_are_in_closed_position          =   in_state ( sm_Stilts_valve_SVZE.Closed )  &&  in_state ( sm_Stilts_valve_SVZA.Closed );

  g_mast_height_is_ge_lower_working_position      =   ( z_drive.IstPos  >= z_drive.MAST_MINHOEHE );

  g_sensor_IP_x_drive                             =   ( x_drive.IstPos  >=  ( x_drive.INDEXPOSITION - x_drive.ANGLE_TOLERANCE ) )
                                                  &&  ( x_drive.IstPos  <=  ( x_drive.INDEXPOSITION + x_drive.ANGLE_TOLERANCE ) );

  g_sensor_AB_y_drive                             =   ( y_drive.IstPos  >=  ( y_drive.ARBEITSPOSITION + y_drive.ARBEITSBEREICH_MIN - y_drive.ANGLE_TOLERANCE  ) )
                                                  &&  ( y_drive.IstPos  <=  ( y_drive.ARBEITSPOSITION + y_drive.ARBEITSBEREICH_MAX + y_drive.ANGLE_TOLERANCE  ) );

  g_sensor_IP_y_drive                             =   ( y_drive.IstPos  >=  ( y_drive.INDEXPOSITION - y_drive.ANGLE_TOLERANCE  ) )
                                                  &&  ( y_drive.IstPos  <=  ( y_drive.INDEXPOSITION + y_drive.ANGLE_TOLERANCE  ) );

// --------------------------------------------
// ----------------- DRIVES -------------------
  g_x_drive_is_operational                        =   in_state ( sm_X_drive_fue.Operational );
  g_y_drive_is_operational                        =   in_state ( sm_Y_drive_fue.Operational );
  g_z_drive_is_operational                        =   in_state ( sm_Z_drive_fue.Operational );
// --------------------------------------------
// ------------------ DEBUG -------------------
  g_io_module_is_functional                       = 1;
  g_si_module_is_functional                       = 1;
  g_usv1_is_functional                            = 1;
  g_usv2_is_functional                            = 1;
  g_x_drive_is_functional                         = 1;
  g_y_drive_is_functional                         = 1;
  g_z_drive_is_functional                         = 1;
  g_extbg_is_functional                           = 1;
};
