//  local events
Event ev_flap_moving_time;

Guard g_flap_opening, g_flap_closeing;

val   SIM_FLAP_MOVING_TIMER_PERIOD = 0.2; //  sec
Globals
{
  g_flap_opening    = g_flap_lock_HR1_is_open && g_flap_lock_HR2_is_open && g_valves_are_in_opening_flap_position;
  g_flap_closeing   = g_flap_lock_HR1_is_open && g_flap_lock_HR2_is_open && g_valves_are_in_closing_flap_position;
};

// ----------------------------------------------------------------------

Statemachine
{
  id  { sm_Flap_position; };
  States  { Initial;  Flap_Stoped; Flap_Opening; Flap_Closing; };
  Actions
  {
    a_start_opening
    {
      start_periodic_timer ( SIM_FLAP_MOVING_TIMER_PERIOD * s, ev_flap_moving_time, timer_flap_moving );
    };
    a_start_closeing
    {
      start_periodic_timer ( SIM_FLAP_MOVING_TIMER_PERIOD * s, ev_flap_moving_time, timer_flap_moving );
    };
    a_opening
    {
      if ( Flap_position < FLAP_POSITION_MAX )
      {
        Flap_position = Flap_position + ( FLAP_PRESSURE_MOVING_COEFFICIENT * System_pressure );
        if ( Flap_position > FLAP_POSITION_MAX )
        {
          Flap_position = FLAP_POSITION_MAX;
        };
        print ( "--- dingo-sim --- Flap_position: ", Flap_position, " and opening\n" );
      };
    };
    a_closeing
    {
      if ( Flap_position > FLAP_POSITION_MIN )
      {
        Flap_position = Flap_position - ( FLAP_PRESSURE_MOVING_COEFFICIENT * System_pressure );
        if ( Flap_position < FLAP_POSITION_MIN )
        {
          Flap_position = FLAP_POSITION_MIN;
        };
        print ( "--- dingo-sim --- Flap_position: ", Flap_position, " and closeing\n" );
      };
    };
    a_stop_moving
    {
      stop_timer ( timer_flap_moving );
      print ( "--- dingo-sim --- Flap_position: ", Flap_position, " and stoped\n" );
    };
  };
  on_exit
  {
    stop_timer ( timer_flap_moving );
  };

  Transition  { Initial;      Flap_Stoped; };
  Transition  { Flap_Stoped;  Flap_Opening;                         a_start_opening;    g_flap_opening;  };
  Transition  { Flap_Stoped;  Flap_Closing;                         a_start_closeing;   g_flap_closeing; };
  Transition  { Flap_Opening; Flap_Opening;   ev_flap_moving_time;  a_opening;          g_flap_opening;  };
  Transition  { Flap_Opening; Flap_Stoped;                          a_stop_moving;     !g_flap_opening;  };
  Transition  { Flap_Closing; Flap_Closing;   ev_flap_moving_time;  a_closeing;         g_flap_closeing;  };
  Transition  { Flap_Closing; Flap_Stoped;                          a_stop_moving;     !g_flap_closeing;  };
};

// ----------------------------------------------------------------------
