Event ev_x_drive_stop, ev_x_drive_is_enabled, ev_x_drive_is_disabled;
Event ev_x_drive_movement_stopped, ev_x_drive_reset, ev_x_drive_move_up;
Event ev_talin_is_ready_to_be_moved, ev_x_drive_prepares_to_move;
Event ev_x_drive_enable_timeout, ev_x_drive_moving_timeout, ev_x_drive_move, ev_x_drive_enable_starting, ev_x_drive_disable_starting;

Systemstate x_drive;
Systemstate IS_ENABLE_TIMER_ON, IS_MOVE_TIMER_ON;
Systemstate given_speed;

global_functions
{
  x_drive_set_target_position
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- x_drive_set_target_position --------\n" );
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > x_drive.MAX_POS )
    {
      x_drive.SollPos = x_drive.MAX_POS;
    } else
    {
      if ( inSollPos < x_drive.MIN_POS )
      {
        x_drive.SollPos = x_drive.MIN_POS;
      } else
      {
        x_drive.SollPos = inSollPos;
      };
    };
    x_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- X_drive_move.SollPos:    ", x_drive.SollPos, ", SollGeschw: ", x_drive.SollGeschw, "\n" );
  };

  x_drive_set_target_speed
  {
    params{ inSollGeschw; };
    print ( "-------- x_drive_set_target_speed --------\n" );
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    if ( inSollGeschw >= 0 )
    {
      x_drive.SollPos = x_drive.MAX_POS;
    };
    if ( inSollGeschw < 0 )
    {
      x_drive.SollPos = x_drive.MIN_POS;
    };
    if ( inSollGeschw == 0 )
    {
      x_drive.SollGeschw = x_drive.SPEED_MAX;
    } else
    {
      x_drive.SollGeschw = abs ( inSollGeschw );
    };
  };
};

Statemachine
{
  val MOVEMENT_SELECTION_IDX          = 1;
  val TARGET_VALUE_IDX                = 2;
  val ENABLE_TIMER_IDX                = 3;
  val MOVE_TIMER_IDX                  = 4;

  id  { sm_X_drive_move;  };
  description { "X_drive_move"; };
  States  { Initial;  Final;  Moving; Prepare_Talin;  };

  import  { sm_X_drive_enable;  };
  import  { sm_X_drive_disable; };

  Actions
  {
    a_x_drive_enable_starting     { ev_x_drive_enable_starting; };
    a_x_drive_disable_starting    { ev_x_drive_disable_starting;  };
    a_x_drive_movement_stopped    { ev_x_drive_movement_stopped;  };
    a_x_drive_movement_start
    {
      print ( "-------- ev_x_drive_move --------\n" );
//  arki: warum nicht auch...?
//      ivenet_mast_state.value_out = IVENET_MAST_IS_MOVING_ANTENNA_DEPLOYMENT;
      ev_x_drive_move;
    };
    a_x_drive_set_enable_timeout  { if ( IS_ENABLE_TIMER_ON ) { start_timer ( DEF_TIME_RUCKMLD_ANTRIEBE * s,  ev_x_drive_enable_timeout,  x_drive_enable_timeout_timer ); }; };
    a_x_drive_set_moving_timeout  { if ( IS_MOVE_TIMER_ON   ) { start_timer ( DEF_TIME_X_FAHREN * s,          ev_x_drive_moving_timeout,  x_drive_moving_timeout_timer ); }; };
    a_x_drive_stop_enable_timeout { stop_timer ( x_drive_enable_timeout_timer ); };
    a_x_drive_stop_moving_timeout { stop_timer ( x_drive_moving_timeout_timer ); };
//    a_x_drive_move                { ev_x_drive_move;  };
  };

  on_enter
  {
    if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_TO_TARGET )
    {
      x_drive_set_target_position ( argv ( TARGET_VALUE_IDX ), x_drive.SPEED_DEFAULT );
    } else 
    if ( argv ( MOVEMENT_SELECTION_IDX ) == MODE_GIVEN_SPEED )
    {
      x_drive_set_target_speed ( argv ( TARGET_VALUE_IDX ) );
    };

    if ( argv ( ENABLE_TIMER_IDX ) == WITH_ENABLE_TIMEOUT )
    {
      IS_ENABLE_TIMER_ON = 1;
    } else
    {
      IS_ENABLE_TIMER_ON  = 0;
    };

    if ( argv ( MOVE_TIMER_IDX ) == WITH_MOVING_TIMEOUT )
    {
      IS_MOVE_TIMER_ON = 1;
    } else
    {
      IS_MOVE_TIMER_ON  = 0;
    };
  };

  on_exit
  {
    ev_x_drive_stop; 
    if ( IS_ENABLE_TIMER_ON )
    {
      stop_timer ( x_drive_enable_timeout_timer );
    };
    if ( IS_MOVE_TIMER_ON )
    {
      stop_timer ( x_drive_moving_timeout_timer );
    };
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_STOP;
  };

  Transition  { Initial;            sm_X_drive_enable;                          a_x_drive_set_enable_timeout;   a_x_drive_enable_starting;  };
  Transition  { sm_X_drive_enable;  Moving;             ev_x_drive_is_enabled;  a_x_drive_stop_enable_timeout;  a_x_drive_movement_start;   a_x_drive_set_moving_timeout; };
  Transition  { Moving;             sm_X_drive_disable; ev_x_drive_stop;        a_x_drive_stop_moving_timeout;  a_x_drive_disable_starting; };
  Transition  { sm_X_drive_disable; Final;              ev_x_drive_is_disabled; a_x_drive_movement_stopped; };
};

