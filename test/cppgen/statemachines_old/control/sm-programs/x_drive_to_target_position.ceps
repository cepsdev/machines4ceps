Event ev_x_drive_to_target_position_timeout, ev_x_drive_move_go, ev_x_drive_is_in_target_position;
Event ev_x_drive_enable_timeout, ev_x_drive_moving_timeout, ev_x_drive_movement_stopped;
Systemstate SOLL_POS;

Statemachine
{
  id  { sm_X_drive_to_target_position;  };
  description { "X_drive_to_target_position";  };
  States  { Initial;  Start;  Final;  Error;  };
  import  { sm_X_drive_move;  };
  Actions
  {
    a_x_drive_move_to_target_position     { ev_x_drive_move_go ( MODE_TO_TARGET, SOLL_POS, WITH_ENABLE_TIMEOUT, WITH_MOVING_TIMEOUT ); };
    a_x_drive_is_in_target_position       { ev_x_drive_is_in_target_position; };
    a_x_drive_to_target_position_timeout  { ev_x_drive_to_target_position_timeout;  };
  };

  on_enter
  {
    if ( argc() < 1 )
    {
      print("---------------------------------------- Too few arguments for start of 'X_drive_to_target_position' \n");
    } else
    {
      SOLL_POS = argv ( 1 );

      if ( SOLL_POS > x_drive.MAX_POS )
      {
        x_drive.SollPos = x_drive.MAX_POS;
      } else
      {
        if ( SOLL_POS < x_drive.MIN_POS )
        {
          x_drive.SollPos = x_drive.MIN_POS;
        } else
        {
          x_drive.SollPos = SOLL_POS;
        };
      };
    };
  };
  //on_exit{};

  Transition  { Initial;          Final;                                          a_x_drive_is_in_target_position;        g_x_drive_is_in_target_position;  };
  Transition  { Initial;          Start;                                          a_x_drive_move_to_target_position;     !g_x_drive_is_in_target_position;  };
  Transition  { Start;            sm_X_drive_move;  ev_x_drive_move_go; };
  Transition  { sm_X_drive_move;  Error;            ev_x_drive_enable_timeout;    a_x_drive_to_target_position_timeout; };
  Transition  { sm_X_drive_move;  Error;            ev_x_drive_moving_timeout;    a_x_drive_to_target_position_timeout; };
  Transition  { sm_X_drive_move;  Final;            ev_x_drive_movement_stopped;  a_x_drive_is_in_target_position;      };
};

