Event ev_flap_to_close_starts,    ev_flap_close_starting, ev_flap_to_close_was_interrupted;
Event ev_flap_to_close_finished,  ev_flap_close_finished, ev_flap_to_close_preconditions_are_not_met, ev_flap_preconditioning_finished;
Event ev_flap_lock_starting,      ev_flap_lock_finished;
Event ev_flap_unlock_starting,    ev_flap_unlock_finished;

Statemachine
{
  id  { sm_Flap_to_close; };
  description { "Flap_to_close";  };
  States  { Initial; Final;  Error; };

  import  { sm_Flap_precondition; };
  import  { sm_Flap_unlock; };
  import  { sm_Flap_close;  };
  import  { sm_Flap_lock; };

  Actions
  {
    a_flap_to_close_finished                  { ev_flap_to_close_finished;  };
    a_flap_to_close_starts                    { ev_flap_to_close_starts;  };
    a_flap_to_close_was_interrupted           { ev_flap_to_close_was_interrupted; };
    a_flap_to_close_preconditions_are_not_met { ev_flap_to_close_preconditions_are_not_met; };
    a_flap_unlock_starting                    { ev_flap_unlock_starting;  };
    a_flap_close_starting                     { ev_flap_close_starting; };
    a_flap_lock_starting                      { ev_flap_lock_starting;  };
  };

  on_exit
  {
    if ( !in_state ( Final ) )
    {
      print ( "\n\n"
            , "Flap_to_close.on_exit --- z_drive.IstPos: ", z_drive.IstPos, ", SENSOR_AB_Y: ", SENSOR_AB_Y, ", SENSOR_IP_Z: ", SENSOR_IP_Z, "\n"
            , "\n\n"
            );
      a_flap_to_close_was_interrupted;
    };
  };

  Transition  { Initial;              Final;                                                  a_flap_to_close_finished;                   g_flap_is_closed; }; 
  Transition  { Initial;              sm_Flap_unlock;                                         a_flap_unlock_starting;                    !g_flap_is_closed &&  g_flap_to_close_preconditions; };
  Transition  { Initial;              Error;                                                  a_flap_to_close_preconditions_are_not_met; !g_flap_is_closed && !g_flap_to_close_preconditions; };
  Transition  { sm_Flap_precondition; sm_Flap_close;        ev_flap_preconditioning_finished; a_flap_close_starting;  };
  Transition  { sm_Flap_unlock;       sm_Flap_precondition; ev_flap_unlock_finished;          a_flap_close_starting;  };
  Transition  { sm_Flap_close;        sm_Flap_lock;         ev_flap_close_finished;           a_flap_lock_starting; };
  Transition  { sm_Flap_lock;         Final;                ev_flap_lock_finished;            a_flap_to_close_finished; };
};
