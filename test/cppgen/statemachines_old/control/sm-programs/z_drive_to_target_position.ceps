Event ev_z_drive_to_target_position_timeout, ev_mast_move, ev_z_drive_stop, ev_z_drive_is_in_target_position, ev_z_drive_to_target_position_preconditions_are_not_met, ev_z_drive_move_to_target_position_starts;

Statemachine
{
  id  { sm_Z_drive_to_target_position;  };
  description { "Z_drive_to_target_position";  };
  States  { Initial;  Start;  Final;  Error;  };
  import  { sm_Z_drive_move;  };
  Actions
  {
    a_z_drive_start                                         { ev_z_drive_move_to_target_position_starts;  };
    a_z_drive_to_target_position_preconditions_are_not_met
    {
      print ( "---------------------------------------- Z_drive_to_target_position: Preconditions are not met \n" );
      ev_z_drive_to_target_position_preconditions_are_not_met;
    };
    a_z_drive_move_to_target_position
    {
      if ( Betriebsmodus == MODUS_AUTOMATIKBETRIEB )
      {
        print ( "---------------------------------------- 'Z_drive_to_target_position' with Betriebsmodus == MODUS_AUTOMATIKBETRIEB \n" );
        print ( "---------------------------------------- 'Z_drive_to_target_position' with SOLL_POS = ", SOLL_POS, " \n" );
        ev_mast_move ( MODE_TO_TARGET, SOLL_POS, WITHOUT_ENABLE_TIMEOUT, WITHOUT_MOVING_TIMEOUT );
      } else
      {
        print ( "---------------------------------------- 'Z_drive_to_target_position' with Betriebsmodus != MODUS_AUTOMATIKBETRIEB \n" );
        ev_mast_move ( MODE_TO_TARGET, SOLL_POS, WITHOUT_ENABLE_TIMEOUT, WITHOUT_MOVING_TIMEOUT );
      };
    };
    a_z_drive_is_in_target_position         { ev_z_drive_is_in_target_position; };
    a_z_drive_to_target_position_timeout    { ev_z_drive_to_target_position_timeout;  };
  };

  on_enter
  {
    //print("---------------------------------------- Z_drive_to_target_position.on_enter(", argc(), ") \n");
    if ( argc() < 1 )
    {
      print ( "---------------------------------------- Z_drive_to_target_position: Too few arguments to start \n" );
    } else
    {
      print ( "---------------------------------------- Z_drive_to_target_position: argv(1) is:  ", argv(1), " \n" );
      print ( "---------------------------------------- Z_drive_to_target_position, IstPos ", z_drive.IstPos, " \n" );
      SOLL_POS = argv(1);
      if ( SOLL_POS > z_drive.MAX_POS )
      {
        z_drive.SollPos = z_drive.MAX_POS;
      } else
      if ( SOLL_POS < z_drive.MAST_MINHOEHE )
      {
        z_drive.SollPos = z_drive.MAST_MINHOEHE;
      } else
      {
        z_drive.SollPos = SOLL_POS;
      };

      print ( "---------------------------------------- Z_drive_to_target_position, SollPos ", z_drive.SollPos, " \n" );
      print ( "---------------------------------------- Z_drive_to_target_position, <=       ", (z_drive.IstPos <= z_drive.SollPos + z_drive.POSITION_TOLERANCE), " \n" );
      print ( "---------------------------------------- Z_drive_to_target_position, >=       ", (z_drive.IstPos >= z_drive.SollPos - z_drive.POSITION_TOLERANCE), " \n" );
    };
  };

  //on_exit{};

  Transition  { Initial;          Final;                                          a_z_drive_is_in_target_position;                         g_z_drive_is_in_target_position; };
  Transition  { Initial;          Start;                                          a_z_drive_move_to_target_position; a_z_drive_start;     !g_z_drive_is_in_target_position && g_z_drive_to_target_position_preconditions; };
  Transition  { Initial;          Error;                                          a_z_drive_to_target_position_preconditions_are_not_met; !g_z_drive_to_target_position_preconditions;  };
  Transition  { Start;            sm_Z_drive_move;  ev_mast_move; };
  Transition  { sm_Z_drive_move;  Error;            ev_z_drive_enable_timeout;    a_z_drive_to_target_position_timeout; };
  Transition  { sm_Z_drive_move;  Error;            ev_z_drive_moving_timeout;    a_z_drive_to_target_position_timeout; };
  Transition  { sm_Z_drive_move;  Final;            ev_z_drive_movement_stopped;  a_z_drive_is_in_target_position;      };
};

