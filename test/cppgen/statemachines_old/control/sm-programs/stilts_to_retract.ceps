Event ev_stilts_are_locked,   ev_stilts_are_preconditioned, ev_stilts_are_retracted;
Event ev_stilts_are_unlocked, ev_stilts_close_all_valves,   ev_stilts_lock;
Event ev_stilts_to_retract_started,   ev_stilts_to_retract_started_stilts_retract,  ev_stilts_to_retract_preconditions_are_not_met;
Event ev_stilts_to_retract_finished,  ev_stilts_to_retract_started_stilts_unlock,   ev_stilts_to_retract_was_interrupted;
Event ev_stilts_to_retract_timeout,   ev_stilts_to_retract_started_stilts_lock;

Guard g_stilts_all_are_retracted, g_stilts_to_retract_preconditions;

Statemachine
{
  id  { sm_Stilts_to_retract;};
  description { "Stilts_to_retract"; };
  States  { Initial; Final;  Error; };

  import  { sm_Stilts_preconditioning;  };
  import  { sm_Stilts_unlock; };
  import  { sm_Stilts_retract;  };
  import  { sm_Stilts_lock; };

  Actions
  {
    a_stilts_to_retract_started                 { ev_stilts_to_retract_started; };
    a_stilts_to_retract_started_stilts_unlock   { ev_stilts_to_retract_started_stilts_unlock; };    //  only for display of progress on extBg
    a_stilts_to_retract_started_stilts_retract  { ev_stilts_to_retract_started_stilts_retract;  };  //  only for display of progress on extBg
    a_stilts_to_retract_started_stilts_lock     { ev_stilts_to_retract_started_stilts_lock; };      //  only for display of progress on extBg
    a_stilts_to_retract_finished                { ev_stilts_close_all_valves;  ev_stilts_to_retract_finished; };
    a_stilts_retract_exit_timer                 { start_timer ( DEF_TIME_STUETZEN_FAHREN * s, ev_stilts_to_retract_timeout, timer_stilts_to_retract ); };
    a_preconditions_are_not_met                 { ev_stilts_to_retract_preconditions_are_not_met; };
    a_was_interrupted                           { ev_stilts_to_retract_was_interrupted;  ev_stilts_lock;  };
  };

  on_exit
  {
    stop_timer ( timer_stilts_to_retract );
    if ( !in_state ( Final, Error ) )
    {
      a_was_interrupted;
    };
  };

  Transition  { Initial;                    sm_Stilts_preconditioning;                                a_stilts_retract_exit_timer; a_stilts_to_retract_started;  !g_stilts_all_are_retracted &&  g_stilts_to_retract_preconditions; };
  Transition  { Initial;                    Error;                                                    a_preconditions_are_not_met;                               !g_stilts_all_are_retracted && !g_stilts_to_retract_preconditions; };
  Transition  { sm_Stilts_preconditioning;  sm_Stilts_unlock;           ev_stilts_are_preconditioned; a_stilts_to_retract_started_stilts_unlock;  };
  Transition  { sm_Stilts_unlock;           sm_Stilts_retract;          ev_stilts_are_unlocked;       a_stilts_to_retract_started_stilts_retract; };
  Transition  { sm_Stilts_retract;          sm_Stilts_lock;             ev_stilts_are_retracted;      a_stilts_to_retract_started_stilts_lock;  };
  Transition  { sm_Stilts_lock;             Final;                      ev_stilts_are_locked;         a_stilts_to_retract_finished; };
  Transition  { Initial;                    Final;                                                    a_stilts_to_retract_finished;                               g_stilts_all_are_retracted; };
};

