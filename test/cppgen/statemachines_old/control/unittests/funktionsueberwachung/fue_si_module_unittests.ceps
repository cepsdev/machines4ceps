// <description>

Funktionsueberwachung_SI_Modul_unittests {};

Event EXIT;

Globals
{
  // Redefinition for test acceleration
  NODE_HEARTBEAT_PERIOD = 0.01; 
};

global_functions
{
  a_stop_si_timers
  {
    stop_timer(si_module_supervision_heartbeat_timer);
    stop_timer(si_module_heartbeat_timer);
    EXIT;
  };

  a_stop_si_module
  {
    stop(sm_SI_module);
  };
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_SI_Modul_unittests;};Test{SI_module_becoming_Operational;};

  Start { sm_SI_module;  };
  Start { sm_SI_module_operational_state; };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_si_timers);

  ASSERT_END_STATES_CONTAINS{sm_SI_module.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_SI_module_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_SI_Modul_unittests;};Test{SI_module_becoming_Operational;};

  Start { sm_SI_module; };
  ev_si_module_set_operational;
  ASSERT_CURRENT_STATES_CONTAINS{sm_SI_module.Operational;};

  Start { sm_SI_module_operational_state; };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_si_timers);

  ASSERT_END_STATES_CONTAINS{sm_SI_module.Operational;};
  ASSERT_END_STATES_CONTAINS{sm_SI_module_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_SI_Modul_unittests;};Test{SI_module_lacks_multiple_heartbeats_when_being_preoperational;};

  Start { sm_SI_module; };
  Start { sm_SI_module_operational_state; };

  stop(sm_SI_module);
  start_timer(3*NODE_HEARTBEAT_PERIOD*s, a_stop_si_timers);

  ASSERT_END_STATES_CONTAINS{sm_SI_module_operational_state.PreOperational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_SI_Modul_unittests;};Test{SI_module_fails_when_being_preoperational;};

  g_si_module_is_functional = 0;

  Start { sm_SI_module; };
  Start { sm_SI_module_operational_state; };

  start_timer(4*NODE_HEARTBEAT_PERIOD*s, a_stop_si_timers);

  ASSERT_END_STATES_CONTAINS_NOT{sm_SI_module_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_SI_Modul_unittests;};Test{SI_module_lacks_multiple_heartbeats_when_being_operational;};

  Start { sm_SI_module; };
  Start { sm_SI_module_operational_state; };

  start_timer(2*NODE_HEARTBEAT_PERIOD*s, a_stop_si_timers);
  start_timer(5*NODE_HEARTBEAT_PERIOD*s, a_stop_si_module);

  ASSERT_END_STATES_CONTAINS{sm_SI_module_operational_state.Operational;};
};

// ------------------------------------------------------------------------  
Simulation
{
  TestCase{Funktionsueberwachung_SI_Modul_unittests;};Test{SI_module_fails_when_being_operational;};

  Start { sm_SI_module; };
  Start { sm_SI_module_operational_state; };

  stop(sm_SI_module);
  start_timer(6*NODE_HEARTBEAT_PERIOD*s, a_stop_si_timers);

  ASSERT_END_STATES_CONTAINS{sm_SI_module_operational_state.Offline;};
};
