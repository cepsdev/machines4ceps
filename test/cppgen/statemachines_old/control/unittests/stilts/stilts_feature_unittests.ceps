Event ev_stilts_to_extend_failed;

Globals
{
  // Redefinition for test acceleration
  TIMER_ACTIVATION = 0.1;
};

Stilts_feature_unittests
{
  SENSOR_KAMPFSCHALTER_A            = 0;
//  g_system_pressure_is_sufficient = 1;
//  Pneumatics.system_pressure      = DEFAULT_SYSTEM_PRESSURE;
  System_pressure       = DEFAULT_SYSTEM_PRESSURE;
  Stilt_position_left   = STILTS_POSITION_MIN;
  Stilt_position_right  = STILTS_POSITION_MIN;
};


Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Initialization;};

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL; };
  Start { sm_Stilts_endschalter_SMUR; };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.On;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Stilts_to_extend;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer(timer_stilts_SVZA_is_open);
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer(timer_stilts_SVZE_is_open);
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};
  stop_timer ( timer_stilts_preconditioning );
//  stop_timer(timer_stilts_extend);
  stop_timer(timer_stilts_to_extend);

//  ASSERT_END_STATES_CONTAINS_NOT{S1.Final;};
};

Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Stilts_to_extend_given_no_ground_for_left_stilt;};

  STILTS_POSITION_GROUND_LEFT   = STILTS_NO_GROUND_CONTACT;

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL; };
  Start { sm_Stilts_endschalter_SMUR; };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Stilts_to_extend;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer(timer_stilts_SVZA_is_open);
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer(timer_stilts_SVZE_is_open);
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};

  print("==> ==> ev_stilts_preconditioning_timeout\n");
  stop_timer ( timer_stilts_preconditioning );
  ev_stilts_preconditioning_timeout;
  print("==> ==> ev_stilts_SVZE_is_close\n");
  stop_timer(timer_stilts_SVZE_is_close);
  ev_stilts_SVZE_is_close;  //  delay_timer
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};

  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.Off;};

  print("==> ==>\n...\n");

  Stilt_position_left   = STILTS_POSITION_GROUND_DEFAULT_LEFT - 1;
  Stilt_position_right  = STILTS_POSITION_GROUND_DEFAULT_LEFT - 1;
  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("==> ==>\n...\n");

  Stilt_position_left   = STILTS_POSITION_MAX - 1;
  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("Stilt_position_left / Stilt_position_right: ", Stilt_position_left, " / ", Stilt_position_right, "\n" );
  print("Pneumatics.stilt_left_pressure / Pneumatics.stilt_right_pressure: ", Pneumatics.stilt_left_pressure, " / ", Pneumatics.stilt_right_pressure, "\n" );

  print("==> ==> ev_stilts_valve_state\n");
  ev_stilts_valve_state;
  print("Pneumatics.stilt_left_pressure / Pneumatics.stilt_right_pressure: ", Pneumatics.stilt_left_pressure, " / ", Pneumatics.stilt_right_pressure, "\n" );

  print("==> ==> ev_stilts_SVZA_is_close\n");
  stop_timer(timer_stilts_SVZA_is_close);
  ev_stilts_SVZA_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unlocked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unlocked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.Final;};
  stop_timer(timer_stilts_to_extend);
};

Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Stilts_to_extend_given_no_ground_for_right_stilt;};

  STILTS_POSITION_GROUND_RIGHT  = STILTS_NO_GROUND_CONTACT;

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL; };
  Start { sm_Stilts_endschalter_SMUR; };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Stilts_to_extend;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer(timer_stilts_SVZA_is_open);
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer(timer_stilts_SVZE_is_open);
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};

  print("==> ==> ev_stilts_preconditioning_timeout\n");
  stop_timer ( timer_stilts_preconditioning );
  ev_stilts_preconditioning_timeout;
  print("==> ==> ev_stilts_SVZE_is_close\n");
  stop_timer ( timer_stilts_SVZE_is_close );
  ev_stilts_SVZE_is_close;  //  delay_timer
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};

  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.Off;};

  print("==> ==>\n...\n");

  Stilt_position_left   = STILTS_POSITION_GROUND_DEFAULT_RIGHT - 1;
  Stilt_position_right  = STILTS_POSITION_GROUND_DEFAULT_RIGHT - 1;
  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("Stilt_position_left / Stilt_position_right: ", Stilt_position_left, " / ", Stilt_position_right, "\n" );
  print("Pneumatics.stilt_left_pressure / Pneumatics.stilt_right_pressure: ", Pneumatics.stilt_left_pressure, " / ", Pneumatics.stilt_right_pressure, "\n" );

  print("==> ==>\n...\n");

  Stilt_position_right   = STILTS_POSITION_MAX - 1;
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("==> ==> ev_stilts_valve_state\n");
  ev_stilts_valve_state;
  print("==> ==> ev_stilts_SVZA_is_close\n");
  stop_timer ( timer_stilts_SVZA_is_close );
  ev_stilts_SVZA_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unlocked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unlocked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.Final;};
  stop_timer ( timer_stilts_to_extend );
};

Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Stilts_to_extend_given_good_path;};

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL; };
  Start { sm_Stilts_endschalter_SMUR; };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Stilts_to_extend;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer ( timer_stilts_SVZA_is_open );
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer ( timer_stilts_SVZE_is_open );
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};

  print("==> ==> ev_stilts_preconditioning_timeout\n");
  stop_timer ( timer_stilts_preconditioning );
  ev_stilts_preconditioning_timeout;
  print("==> ==> ev_stilts_SVZE_is_close\n");
  stop_timer ( timer_stilts_SVZE_is_close );
  ev_stilts_SVZE_is_close;  //  delay_timer
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};

  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.Off;};

  /**
    * 
    * Guard under consideration is (stilts_extend.ceps line 28):
    *  
    *  !g_stilts_all_have_ground_contact 
    *  && !g_stilt_any_is_extended 
    *  && !g_stilts_all_are_locked 
    *  && (g_kampfschalter_is_active || g_system_pressure_is_sufficient);
  
    * Transition not taken because aforementioned guard is false. Inspection shows that this is the case
    * because g_stilts_all_have_ground_contact is true (rest of the guard evaluates to true, only !g_stilts_all_have_ground_contact evaluates to false). 
    * 
    * What is g_stilts_all_have_ground_contact?
    * g_stilts_all_have_ground_contact is true because the expressions '!SENSOR_SMOL  && !SENSOR_SMUL' and '!SENSOR_SMOR  && !SENSOR_SMUR'
    * are true.
    * 
    * The systemstates SENSOR_SMOL,SENSOR_SMUL,SENSOR_SMOR and SENSOR_SMUR are initialized to 0 in base_defs.ceps and change value
    * only in dingo state machines (e.g. stilts_endschalter_SMOR.ceps)
    * 
    * Take e.eg. SENSOR_SMUL: SENSOR_SMUL  is never set to 1 because  Pneumatics.stilt_left_pressure < 2. 
    * 
    */

  print("==> ==>\n...\n");

  Stilt_position_left   = STILTS_POSITION_GROUND_DEFAULT_LEFT - 1;
  Stilt_position_right  = STILTS_POSITION_GROUND_DEFAULT_RIGHT - 1;
  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("Stilt_position_left / Stilt_position_right: ", Stilt_position_left, " / ", Stilt_position_right, "\n" );
  print("Pneumatics.stilt_left_pressure / Pneumatics.stilt_right_pressure: ", Pneumatics.stilt_left_pressure, " / ", Pneumatics.stilt_right_pressure, "\n" );

  ev_stilts_valve_state;
  print("==> ==> ev_stilts_SVZA_is_close\n");
  stop_timer ( timer_stilts_SVZA_is_close );
  ev_stilts_SVZA_is_close;

//  print("SENSOR_SMUL / SENSOR_SMUR: ", SENSOR_SMUL, " / ", SENSOR_SMUR, "\n" );
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Locked;}; 
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Locked;}; 
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Neither_nor;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Neither_nor;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_extend.Final;};
  stop_timer ( timer_stilts_to_extend );
};


Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Stilts_to_retract_given_good_path_from_ground;};

  Stilt_position_left   = STILTS_POSITION_GROUND_DEFAULT_LEFT;
  Stilt_position_right  = STILTS_POSITION_GROUND_DEFAULT_RIGHT;

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL;  };
  Start { sm_Stilts_endschalter_SMUR;  };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Stilts_to_retract; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_retract.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer ( timer_stilts_SVZA_is_open );
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer ( timer_stilts_SVZE_is_open );
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};

  print("==> ==> ev_stilts_preconditioning_timeout\n");
  stop_timer ( timer_stilts_preconditioning );
  ev_stilts_preconditioning_timeout;

  print("==> ==> ev_stilts_SVZA_is_close\n");
  stop_timer ( timer_stilts_SVZA_is_close );
  ev_stilts_SVZA_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};

  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("==> ==>\n...\n");

  Stilt_position_left   = 1.0;
  Stilt_position_right  = 1.0;
  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

//  ev_stilt_left_state_change;
//  ev_stilt_right_state_change;

  print("==> ==> ev_stilts_SVZE_is_close\n");
  stop_timer ( timer_stilts_SVZE_is_close );
  ev_stilts_SVZE_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Retracted;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Retracted;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_retract.Final;};
  stop_timer ( timer_stilts_to_retract );
};

Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Stilts_to_retract_given_good_path_from_max_pos;};

  Stilt_position_left   = STILTS_POSITION_MAX;
  Stilt_position_right  = STILTS_POSITION_MAX;

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL;  };
  Start { sm_Stilts_endschalter_SMUR;  };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Stilts_to_retract; };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_retract.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer ( timer_stilts_SVZA_is_open );
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer ( timer_stilts_SVZE_is_open );
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};

  print("==> ==> ev_stilts_preconditioning_timeout\n");
  stop_timer ( timer_stilts_preconditioning );
  ev_stilts_preconditioning_timeout;

  print("==> ==> ev_stilts_SVZA_is_close\n");
  stop_timer ( timer_stilts_SVZA_is_close );
  ev_stilts_SVZA_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};

  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("==> ==>\n...\n");

  Stilt_position_left   = 1.0;
  Stilt_position_right  = 1.0;
  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

//  ev_stilt_left_state_change;
//  ev_stilt_right_state_change;

  print("==> ==> ev_stilts_SVZE_is_close\n");
  stop_timer ( timer_stilts_SVZE_is_close );
  ev_stilts_SVZE_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Retracted;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Retracted;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_to_retract.Final;};
  stop_timer ( timer_stilts_to_retract );
};

Statemachine
{
  id  { sm_Ctrl;  };
  States  { Initial;  Idle; };
  import  { sm_Stilts_to_retract;  };

  Transition  { Initial;              sm_Stilts_to_retract; };
  Transition  { sm_Stilts_to_retract; Idle;                 ev_stilts_to_retract_timeout;  };
};

Simulation
{
  TestCase{Stilts_feature_unittests;};Test{Stilts_to_retract_given_timeout;};

  Stilt_position_left   = STILTS_POSITION_MAX;
  Stilt_position_right  = STILTS_POSITION_MAX;

  Start { sm_Stilts_valve_SVK;  };
  Start { sm_Stilts_VK_left;  };
  Start { sm_Stilts_VK_right; };
  Start { sm_Stilts_valve_SVZA;  };
  Start { sm_Stilts_valve_SVZE;  };
  Start { sm_Stilt_position_left;  };
  Start { sm_Stilt_position_right;  };
  Start { sm_Stilts_endschalter_SEKGL;  };
  Start { sm_Stilts_endschalter_SEKGR;  };
  Start { sm_Stilts_endschalter_SEKOL;  };
  Start { sm_Stilts_endschalter_SEKOR;  };
  Start { sm_Stilts_endschalter_SMUL;  };
  Start { sm_Stilts_endschalter_SMUR;  };
  Start { sm_Stilts_endschalter_SMOL; };
  Start { sm_Stilts_endschalter_SMOR; };
  Start { sm_Stilt_left;  };
  Start { sm_Stilt_right; };
  Start { sm_Pneumatic_pressure_stilt_left;  };
  Start { sm_Pneumatic_pressure_stilt_right;  };
  Start { sm_Pneumatic_pressure_system;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVK.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGL.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKGR.Yes;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOL.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SEKOR.No;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUL.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMUR.On;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOL.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_endschalter_SMOR.Off;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Closed;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Unknown;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_left.Stoped;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_position_right.Stoped;};

  print("==> ==> ev_set_system_pressure_normal\n");
  ev_set_system_pressure_normal;
  Start { sm_Ctrl;  };

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.sm_Stilts_to_retract.sm_Stilts_preconditioning;};

  print("==> ==> ev_stilts_SVZA_is_open\n");
  stop_timer ( timer_stilts_SVZA_is_open );
  ev_stilts_SVZA_is_open; //  delay_timer
  print("==> ==> ev_stilts_SVZE_is_open\n");
  stop_timer ( timer_stilts_SVZE_is_open );
  ev_stilts_SVZE_is_open; //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Open;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZE.Open;};
//  stop(sm_Stilts_endschalter_SMOR);
//  stop(sm_Stilts_endschalter_SMOL);

  print("==> ==> ev_stilts_preconditioning_timeout\n");
  stop_timer ( timer_stilts_preconditioning );
  ev_stilts_preconditioning_timeout;

  print("==> ==> ev_stilts_SVZA_is_close\n");
  stop_timer ( timer_stilts_SVZA_is_close );
  ev_stilts_SVZA_is_close;  //  delay_timer

  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_valve_SVZA.Closed;};

  print("==> ==> ev_stilts_left_moving_time\n");
  ev_stilts_left_moving_time;   //  timer-tick
  print("==> ==> ev_stilts_right_moving_time\n");
  ev_stilts_right_moving_time;  //  timer-tick

  print("==> ==> ev_stilts_SVZE_is_close\n");
  stop_timer ( timer_stilts_SVZE_is_close );
  ev_stilts_SVZE_is_close;  //  delay_timer

//  ev_stilt_left_state_change;
//  ev_stilt_right_state_change;

  print("==> ==> ev_stilts_to_retract_timeout\n");
  stop_timer ( timer_stilts_to_retract );
  ev_stilts_to_retract_timeout;

  ASSERT_CURRENT_STATES_CONTAINS{sm_Ctrl.Idle;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_left.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilts_VK_right.Locked;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_left.Neither_nor;};
  ASSERT_CURRENT_STATES_CONTAINS{sm_Stilt_right.Neither_nor;};
};
