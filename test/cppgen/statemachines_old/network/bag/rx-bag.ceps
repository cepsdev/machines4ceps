Event ev_x_drive_actual_values, ev_y_drive_actual_values, ev_z_drive_actual_values, ev_antenna_parkpos_state_change;
Event ev_system_pressure_changed, ev_vehicle_inclination_x_changed, ev_vehicle_inclination_y_changed;
Event ev_antenna_alignment_changed, ev_z_drive_SENSOR_UB_Z_changed, ev_z_drive_SENSOR_IP_Z_changed;
Event ev_current_radar_changed, ev_current_others_changed, ev_current_drives_changed, ev_current_pneumatic_changed, ev_wind_speed_changed;

// ------------------------------------------------------------------------
//      RECEPTION of data from IO MODULE, SI MODULE, EXTBG, USV etc.
// ------------------------------------------------------------------------

global_functions
{
  print_drive_state_
  {
    params{ _drive; _DriveName; };
    print ( "========== RX-BAG    - STATUS  ====================== ", _DriveName, "\n"
          , "---------- ANTRIEB_READY:         ", _drive.Status.ANTRIEB_READY, "\n"
          , "---------- ANTRIEB_ENABLE_OUT:    ", _drive.Status.ANTRIEB_ENABLE_OUT, "\n"
          , "---------- ANTRIEB_INPOS:         ", _drive.Status.ANTRIEB_INPOS, "\n"
          , "---------- LIMIT_SWITCH_CW:       ", _drive.Status.ANTRIEB_LIMIT_SWITCH_CW, "\n"
          , "---------- LIMIT_SWITCH_CCW:      ", _drive.Status.ANTRIEB_LIMIT_SWITCH_CCW, "\n"
          , "---------- BREAK_RELEASED:        ", _drive.Status.ANTRIEB_BREAK_RELEASED, "\n"
          , "---------- REMOTE_OUTPUT_STATUS:  ", _drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS, "\n"
          , "---------- ANTRIEB_FAULT:         ", _drive.Status.ANTRIEB_FAULT, "\n"
          , "---------- IstPos    CAN / MKS :  ", _drive.CanIstPos,     " / ", _drive.IstPos,     "\n"
          , "---------- IstGeschw CAN / MKS :  ", _drive.CanIstGeschw,  " / ", _drive.IstGeschw,  "\n"
          , "---------- IstStrom  CAN / MKS :  ", _drive.CanIstStrom,   " / ", _drive.IstStrom,   " ( not used )\n"
          , "=====================================================\n"
          );
  };
//  on_luminance_request{
// //   if ( changed ( "luminance_request_target_value_in" ) )
//     luminance_target_value_changed(luminance_request_target_value_in);
//     // event(payload);
//  };


//     print ( "---------- RECEIVE ---------- ev_io_module_has_heartbeat\n" );
//     print ( "---------- RECEIVE ---------- s_heartbeat_can_id  ", s_heartbeat_can_id, "\n" );
//     print ( "---------- PROCESS ---------- s_heartbeat_payload_in  ", s_heartbeat_payload_in, "\n" );

// ------------------------------------------------------------------------  
//                  SI MODULE
// ------------------------------------------------------------------------
  handler_si_modul_geraetestatus
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_geraetestatus\n" );

  };

  handler_si_modul_digitale_eingaenge
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_digitale_eingaenge\n" );

  };

  handler_si_modul_analoge_eingaenge_1
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_1\n" );

  };

  handler_si_modul_analoge_eingaenge_2
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_2\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_radar = si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_in;
      ev_current_radar_changed;
    };
  };

  handler_si_modul_analoge_eingaenge_3
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_3\n" );

  };

  handler_si_modul_analoge_eingaenge_4
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_4\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_other_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_others = si_modul_analoger_eingang_strom_other_nicht_verstaerkt_in;
      ev_current_others_changed;
    };
  };

  handler_si_modul_analoge_eingaenge_5
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_5\n" );

  };

  handler_si_modul_analoge_eingaenge_6
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_6\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_drives = si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_in;
      ev_current_drives_changed;
    };
  };

  handler_si_modul_analoge_eingaenge_7
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_7\n" );

  };

  handler_si_modul_analoge_eingaenge_8
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_8\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_pneumatic = si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_in;
      ev_current_pneumatic_changed;
    };
  };

// ------------------------------------------------------------------------  
//                  IO MODULE WIND
// ------------------------------------------------------------------------
  handler_io_modul_sensordaten_windmesser
  {
//    print ( "---------- RX-BAG  ---------- handler_io_modul_sensordaten_windmesser\n" );

    if ( changed ( "io_modul_sensordaten_windmesser_windstaerke_in" )
      || changed ( "io_modul_sensordaten_windmesser_gueltig_in" )
      )
    {
      Heckverteiler_state.wind_gueltig = io_modul_sensordaten_windmesser_gueltig_in;
      Heckverteiler_state.wind_speed   = io_modul_sensordaten_windmesser_windstaerke_in;
      ev_wind_speed_changed;
    };
  };

// ------------------------------------------------------------------------  
//                  IO_MODULE_PNEUMATICS
// ------------------------------------------------------------------------
  handler_io_modul_pneumatiktank
  {
//    print ( "---------- RX-BAG  ---------- handler_io_modul_pneumatiktank\n" );

    if ( changed ( "io_modul_luftdruck_pneumatiktank_systemdruck_in" ) )
    {
      Pneumatics.system_pressure       = Get_Pressure ( io_modul_luftdruck_pneumatiktank_systemdruck_in ) / 2.0;
      print ( "------------ RX-BAG ------------ Pneumatics.system_pressure  ", Pneumatics.system_pressure, "\n" );
      ev_system_pressure_changed;
    };
    if ( changed ( "io_modul_luftdruck_pneumatiktank_druck_stuetze_links_in" ) )
    {
      Pneumatics.stilt_left_pressure   = Get_Pressure ( io_modul_luftdruck_pneumatiktank_druck_stuetze_links_in ) / 2.0;
      print ( "------------ RX-BAG ------------ Pneumatics.stilt_left_pressure  ", Pneumatics.stilt_left_pressure, "\n" );
      ev_stilt_left_state_change; //  arki: nothing better?
    };
    if ( changed ( "io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_in" ) )
    {
      Pneumatics.stilt_right_pressure  = Get_Pressure ( io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_in ) / 2.0;
      print ( "------------ RX-BAG ------------ Pneumatics.stilt_right_pressure ", Pneumatics.stilt_right_pressure, "\n" );
      ev_stilt_right_state_change; //  arki: nothing better?
    };
  };


// ------------------------------------------------------------------------  
//                  X DRIVE
// ------------------------------------------------------------------------
  handler_x_drive_emcy
  {
    print ( "---------- RX-BAG  ---------- handler_x_drive_emcy\n" );
  };

  handler_x_drive_response
  {
//    print ( "---------- RX-BAG  ---------- handler_x_drive_response\t" );

    if ( changed ( "s_frame_drive_status_ready_xdrv_in" )
      || changed ( "s_frame_drive_status_enable_xdrv_in" )
      || changed ( "s_frame_drive_status_inpos_xdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_cw_xdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_ccw_xdrv_in" )
      || changed ( "s_frame_drive_status_break_released_xdrv_in" )
      || changed ( "s_frame_drive_status_remote_output_status_xdrv_in" )
      || changed ( "s_frame_drive_status_fault_xdrv_in" )
      )
    {
      x_drive.Status.ANTRIEB_READY                = s_frame_drive_status_ready_xdrv_in;
      x_drive.Status.ANTRIEB_ENABLE_OUT           = s_frame_drive_status_enable_xdrv_in;
      x_drive.Status.ANTRIEB_INPOS                = s_frame_drive_status_inpos_xdrv_in;
      x_drive.Status.ANTRIEB_LIMIT_SWITCH_CW      = s_frame_drive_status_limit_switch_cw_xdrv_in;
      x_drive.Status.ANTRIEB_LIMIT_SWITCH_CCW     = s_frame_drive_status_limit_switch_ccw_xdrv_in;
      x_drive.Status.ANTRIEB_BREAK_RELEASED       = s_frame_drive_status_break_released_xdrv_in;
      x_drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS = s_frame_drive_status_remote_output_status_xdrv_in;
      x_drive.Status.ANTRIEB_FAULT                = s_frame_drive_status_fault_xdrv_in;

      print_drive_state_ ( x_drive, "X_drive" );

      if ( ( x_drive.Status.ANTRIEB_READY         == 1 )
        && ( x_drive.Status.ANTRIEB_ENABLE_OUT    == 1 )
        && ( x_drive.Status.ANTRIEB_FAULT         == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_x_drive_is_enabled\n" );
        ev_x_drive_is_enabled;
      };

      if ( ( x_drive.Status.ANTRIEB_READY          == 1 )
        && ( x_drive.Status.ANTRIEB_ENABLE_OUT     == 0 )
        && ( x_drive.Status.ANTRIEB_BREAK_RELEASED == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_x_drive_is_disabled\n" );
        ev_x_drive_is_disabled;
      };

      if ( x_drive.Status.ANTRIEB_INPOS          == 1 )
      {
        print ( "---------- RX-BAG  ---------- ev_x_drive_stop\n" );
        ev_x_drive_stop;
      };
    };

    if ( changed ( "s_frame_drive_actual_pos_xdrv_in" ) )
    {
      x_drive.CanIstPos = s_frame_drive_actual_pos_xdrv_in;
      x_drive.IstPos    = X_IstPosition_Berechnen ( x_drive.CanIstPos );
      print_drive_state_ ( x_drive, "X_drive  CHANGE OF pos" );
      ev_x_drive_actual_values ( x_drive.IstPos );
    };
  };


// ------------------------------------------------------------------------  
//                  Y DRIVE
// ------------------------------------------------------------------------
  handler_y_drive_emcy
  {
    print ( "---------- RX-BAG  ---------- handler_y_drive_emcy\n" );
  };

  handler_y_drive_response
  {
//    print ( "---------- RX-BAG  ---------- handler_y_drive_response\n" );

    if ( changed ( "s_frame_drive_status_ready_ydrv_in" )
      || changed ( "s_frame_drive_status_enable_ydrv_in" )
      || changed ( "s_frame_drive_status_inpos_ydrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_cw_ydrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_ccw_ydrv_in" )
      || changed ( "s_frame_drive_status_break_released_ydrv_in" )
      || changed ( "s_frame_drive_status_remote_output_status_ydrv_in" )
      || changed ( "s_frame_drive_status_fault_ydrv_in" )
      )
    {
      y_drive.Status.ANTRIEB_READY                = s_frame_drive_status_ready_ydrv_in;
      y_drive.Status.ANTRIEB_ENABLE_OUT           = s_frame_drive_status_enable_ydrv_in;
      y_drive.Status.ANTRIEB_INPOS                = s_frame_drive_status_inpos_ydrv_in;
      y_drive.Status.ANTRIEB_LIMIT_SWITCH_CW      = s_frame_drive_status_limit_switch_cw_ydrv_in;
      y_drive.Status.ANTRIEB_LIMIT_SWITCH_CCW     = s_frame_drive_status_limit_switch_ccw_ydrv_in;
      y_drive.Status.ANTRIEB_BREAK_RELEASED       = s_frame_drive_status_break_released_ydrv_in;
      y_drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS = s_frame_drive_status_remote_output_status_ydrv_in;
      y_drive.Status.ANTRIEB_FAULT                = s_frame_drive_status_fault_ydrv_in;

      print_drive_state_ ( y_drive, "Y_drive" );

      if ( ( y_drive.Status.ANTRIEB_READY         == 1 )
        && ( y_drive.Status.ANTRIEB_ENABLE_OUT    == 1 )
        && ( y_drive.Status.ANTRIEB_FAULT         == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_y_drive_is_enabled\n" );
        ev_y_drive_is_enabled;
      };

      if ( ( y_drive.Status.ANTRIEB_READY          == 1 )
        && ( y_drive.Status.ANTRIEB_ENABLE_OUT     == 0 )
        && ( y_drive.Status.ANTRIEB_BREAK_RELEASED == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_y_drive_is_disabled\n" );
        ev_y_drive_is_disabled;
      };

      if ( y_drive.Status.ANTRIEB_INPOS          == 1 )
      {
        print ( "---------- RX-BAG  ---------- ev_y_drive_stop\n" );
        ev_y_drive_stop;
      };
    };

    if ( changed ( "s_frame_drive_actual_pos_ydrv_in" ) )
    {
      y_drive.CanIstPos = s_frame_drive_actual_pos_ydrv_in;
      y_drive.IstPos    = Y_IstPosition_Berechnen ( y_drive.CanIstPos );
      print_drive_state_ ( y_drive, "Y_drive  CHANGE OF pos" );
      ev_y_drive_actual_values ( y_drive.IstPos );
    };
  };


// ------------------------------------------------------------------------  
//                  Z DRIVE
// ------------------------------------------------------------------------
  handler_z_drive_emcy
  {
    print ( "---------- RX-BAG  ---------- handler_z_drive_emcy\n" );
  };

  handler_z_drive_response
  {
//    print ( "---------- RX-BAG  ---------- handler_z_drive_response\t" );

    if ( changed ( "s_frame_drive_status_ready_zdrv_in" )
      || changed ( "s_frame_drive_status_enable_zdrv_in" )
      || changed ( "s_frame_drive_status_inpos_zdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_cw_zdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_ccw_zdrv_in" )
      || changed ( "s_frame_drive_status_break_released_zdrv_in" )
      || changed ( "s_frame_drive_status_remote_output_status_zdrv_in" )
      || changed ( "s_frame_drive_status_fault_zdrv_in" )
      )
    {
      z_drive.Status.ANTRIEB_READY                = s_frame_drive_status_ready_zdrv_in;
      z_drive.Status.ANTRIEB_ENABLE_OUT           = s_frame_drive_status_enable_zdrv_in;
      z_drive.Status.ANTRIEB_INPOS                = s_frame_drive_status_inpos_zdrv_in;
      z_drive.Status.ANTRIEB_LIMIT_SWITCH_CW      = s_frame_drive_status_limit_switch_cw_zdrv_in;
      z_drive.Status.ANTRIEB_LIMIT_SWITCH_CCW     = s_frame_drive_status_limit_switch_ccw_zdrv_in;
      z_drive.Status.ANTRIEB_BREAK_RELEASED       = s_frame_drive_status_break_released_zdrv_in;
      z_drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS = s_frame_drive_status_remote_output_status_zdrv_in;
      z_drive.Status.ANTRIEB_FAULT                = s_frame_drive_status_fault_zdrv_in;

      print_drive_state_ ( z_drive, "Z_drive" );

      if ( ( z_drive.Status.ANTRIEB_READY         == 1 )
        && ( z_drive.Status.ANTRIEB_ENABLE_OUT    == 1 )
        && ( z_drive.Status.ANTRIEB_FAULT         == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_z_drive_is_enabled\n" );
        ev_z_drive_is_enabled;
      };

      if ( ( z_drive.Status.ANTRIEB_READY          == 1 )
        && ( z_drive.Status.ANTRIEB_ENABLE_OUT     == 0 )
        && ( z_drive.Status.ANTRIEB_BREAK_RELEASED == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_z_drive_is_disabled\n" );
        ev_z_drive_is_disabled;
      };

      if ( z_drive.Status.ANTRIEB_INPOS          == 1 )
      {
        print ( "---------- RX-BAG  ---------- ev_z_drive_stop\n" );
        ev_z_drive_stop;
      };
    };

    if ( changed ( "s_frame_drive_actual_pos_zdrv_in" ) )
    {
      z_drive.CanIstPos = s_frame_drive_actual_pos_zdrv_in;
      z_drive.IstPos    = Z_IstPosition_Berechnen ( z_drive.CanIstPos );
      print_drive_state_ ( z_drive, "Z_drive  CHANGE OF pos" );
      ev_z_drive_actual_values ( z_drive.IstPos );
    };
  };





// ------------------------------------------------------------------------  
//                  EXTBG
// ------------------------------------------------------------------------

  handler_force_bag_pdo_transmit 
  {
    print ( "---------- RX-BAG  ---------- handler_force_bag_pdo_transmit\n" );

//    if ( extbg_is_online && changed ( "force_bag_pdo_transmit_counter_in" ) )
//    {
        // Softwareversion
        bag_major_software_version_out = MAJOR_SOFTWARE_VERSION;
        bag_minor_software_version_out = MINOR_SOFTWARE_VERSION;
        send ( frame_bag_software_version, channel_can_1_out );

        // Fahrzeugwinkel X,Y
        bag_fahrzeugwinkel_x_out                = truncate ( Vehicle.angle_x );
        bag_fahrzeugwinkel_y_out                = truncate ( Vehicle.angle_y );
        messwert_windmesser_gueltig_out         = Heckverteiler_state.wind_gueltig;
        messwert_windmesser_out                 = Heckverteiler_state.wind_speed;
        send ( frame_zustand_ruestsatz, channel_can_1_out );

        // Motordaten
        fahrzeugnetzspannung_out                = 0;
        gangstellung_out                        = Vehicle.Gear;
        feststellbremse_out                     = Vehicle.Brake;
        motordrehzahl_out                       = Vehicle.Engine_rpm;
        send ( frame_motordaten, channel_can_1_out );

        // Zustand Komponenten
        extbg_luftdruck_pneumatiktank_out                             = truncate ( Pneumatics.system_pressure      * 2 );
        extbg_luftdruck_stuetze_links_out                             = truncate ( Pneumatics.stilt_left_pressure  * 2 );
        extbg_luftdruck_stuetze_rechts_out                            = truncate ( Pneumatics.stilt_right_pressure * 2 );
        extbg_zustand_mastantrieb_stoerung_kommunikation_out          = !Z_DRIVE_COMMUNICATION_INCIDENT;
        extbg_zustand_mastantrieb_interner_fehler_out                 = z_drive.Status.ANTRIEB_FAULT;
        extbg_zustand_antrieb_x_ok_out                                = !X_DRIVE_COMMUNICATION_INCIDENT;
        extbg_zustand_antrieb_y_ok_out                                = !Y_DRIVE_COMMUNICATION_INCIDENT;
        extbg_zustand_talin_daten_gueltig_out                         = ( Talin_state.isValid > 0 );
        extbg_zustand_antrieb_x_interner_fehler_out                   = x_drive.Status.ANTRIEB_FAULT;
        extbg_zustand_antrieb_y_interner_fehler_out                   = y_drive.Status.ANTRIEB_FAULT;
        extbg_zustand_heckverteiler_ok_out                            = !HV_COMMUNICATION_INCIDENT;
        extbg_kommunikation_ivenet_ok_out                             = !IVENET_COMMUNICATION_INCIDENT;
        send ( frame_zustand_komponenten, channel_can_1_out );

        // Betriebsstunden
        bag_betriebsstunden_out                 = 42;
//        send ( frame_betriebsstunden, channel_can_1_out );

        // Zustand Plattform
        zurrung_plattform_out                                        = ( z_drive.IstPos <= z_drive.MAST_ZURRPOSITION ) && ( !SENSOR_VZ1O &&  SENSOR_VZ1V );
        sensorik_stuetzen_bodenkontakt_stuetze_links_out             = !SENSOR_SMOL && ( Pneumatics.stilt_left_pressure  <= STILT_PRESSURE_GROUND_CONTACT );
        sensorik_stuetzen_bodenkontakt_stuetze_rechts_out            = !SENSOR_SMOR && ( Pneumatics.stilt_right_pressure <= STILT_PRESSURE_GROUND_CONTACT );
        sensorik_stuetzen_SENSOR_SMOL_out                            = SENSOR_SMOL;
        sensorik_stuetzen_SENSOR_SMOR_out                            = SENSOR_SMOR;
        sensorik_stuetzen_SENSOR_SMUL_out                            = SENSOR_SMUL;
        sensorik_stuetzen_SENSOR_SMUR_out                            = SENSOR_SMUR;
        sensorik_stuetzen_klemmung_links_geschlossen_out             = !SENSOR_SEKOL &&  SENSOR_SEKGL;
        sensorik_stuetzen_klemmung_rechts_geschlossen_out            = !SENSOR_SEKOR &&  SENSOR_SEKGR;;
        extbg_sensorik_haube_out                                     = SENSOR_HZO;
        istposition_z_achse_out                                      = truncate ( z_drive.IstPos );
        parkposition_radar_out                                       = SENSOR_IN_PARKPOS;
        send ( frame_zustand_plattform, channel_can_1_out );

        // Messwerte Navigation
        istposition_x_achse_out                                      = truncate ( x_drive.IstPos * 10 );
        istposition_y_achse_out                                      = truncate ( y_drive.IstPos * 10 );
        istwinkel_talin_x_out                                        = truncate ( Talin_state.axis_x * 10 );
        istwinkel_talin_y_out                                        = truncate ( Talin_state.axis_y * 10 );
        send ( frame_messwerte_navigation, channel_can_1_out );

        // Piktogramme
        bag_piktogramm_fzg_spg_out                                   = Evaluiere_Bordnetz_Spannung ( Vehicle.tension_bordnet );
        bag_piktogramm_horizontierung_out                            = ANTENNA_ALIGNMENT_STATUS;
        bag_piktogramm_fue_out                                       = 0;
        bag_piktogramm_warnlampe_mastbediener_out                    = 7;
        send ( frame_bag_piktogramme, channel_can_1_out );

        // Fortschrittsmeldungen

        // Betriebsmodus
        extbg_betriebsart_out                                        = 1;
        send ( frame_betriebsart, channel_can_1_out );
//    }
  };


  handler_extbg_taster_manuell_betaetigung 
  {
    print ( "---------- RX-BAG  ---------- handler_extbg_taster_manuell_betaetigung\n" );

    if ( extbg_is_online )
    {
//                  MANUELLER BETRIEB 
// ------------------------------------------------------------------------
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out    = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out    = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_in" ) ) 
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in == 1 )
        {} else
        {};
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in == 1 )
        {} else
        {}
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in == 1 )
        {} else
        {}
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in == 1 )
        {} else
        {}
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in == 1 )
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in 1\n" );
          ev_mast_move_up;
        } else
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in 0\n" );
          ev_z_drive_stop;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in  == 1 )
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in 1\n" );
          ev_mast_move_down;
        } else
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in 0\n" );
          ev_z_drive_stop;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_in == 1 )
        {
          ev_mast_anfahren;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_radar_power_on_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_radar_power_on_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out = 1;  
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out = 0;  
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };

//              MANUELLER BETRIEB 2
// ------------------------------------------------------------------------
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_in == 1 )
        {
          ev_x_drive_to_indexposition;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_in == 1 )
        {
          ev_y_drive_to_indexposition;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_in == 1 )
        {
          ev_y_drive_to_arbeitsposition;
        };
      };
    };
  };


  handler_extbg_taster_betaetigung 
  {
    print ( "------------------- RX-BAG - handler_extbg_taster_betaetigung\n" );

// ------------------------------------------------------------------------
//                  EINZELBETRIEB 
// ------------------------------------------------------------------------
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_in == 1
      )
    {
      ev_stilts_to_extend;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in ----------\n" );
      ev_stilts_to_retract;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_haube_auf_in" ) 
      &&            extbg_taster_betaetigung_einzelbetrieb_haube_auf_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_haube_auf_in ----------\n" );
      ev_flap_to_open;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_haube_zu_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_haube_zu_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_haube_zu_in ----------\n" );
      ev_flap_to_close;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in ----------\n" );
      ev_antenna_lashing_unlock;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in ----------\n" );
      ev_antenna_lashing_lock;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in ----------\n" );
      ev_antenna_to_raise;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in ----------\n" );
      ev_antenna_to_hinge_down;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in = 1----------\n" );
      ev_mast_ausfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in == 0
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in = 0----------\n" );
      ev_mast_ausfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in ----------\n" );
      ev_mast_einfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in ----------\n" );
      ev_dust_discharge_to_do;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_abbruch_in" ) )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_abbruch_in ----------\n" );
      if ( extbg_taster_betaetigung_einzelbetrieb_abbruch_in > 0 )
      {
        TASTE_E_ABBRUCH = 1;
        ev_taste_e_abbruch_is_active;
      } else 
      {
        TASTE_E_ABBRUCH = 0;
        ev_taste_e_abbruch_is_not_active;
      };
    };

// ------------------------------------------------------------------------
//            AUTOMATIKBETRIEB
// ------------------------------------------------------------------------
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_in == 1
      )
    {
      ev_system_extend;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_in == 1
      )
    {
      ev_system_retract;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_in == 1
      )
    {
      ev_stilts_to_extend;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_in == 1
      )
    {
      ev_stilts_to_retract;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_in == 1
      )
    {
      ev_mast_anfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_horizontieren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_horizontieren_in == 1
      )
    {
      ev_antenna_to_level_out;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_abbruch_in" ) )
    {
      print ( "---------- extbg_taster_betaetigung_automatikbetrieb_abbruch_in ----------\n" );
      if ( extbg_taster_betaetigung_automatikbetrieb_abbruch_in > 0 )
      {
        //ev_extbg_automatic_mode_program_abortion;
        TASTE_A_ABBRUCH = 1;
        ev_taste_a_abbruch_is_active;
      } else 
      {
        //ev_extbg_automatic_mode_program_abortion;
        TASTE_A_ABBRUCH = 0;
        ev_taste_a_abbruch_is_not_active;
      };
    };
  };

  handler_extbg_z_drive_sollwerte
  {
    print ( "---------- RX-BAG  ---------- handler_extbg_z_drive_sollwerte\n" );

//                  SOLL GESCHW
// ------------------------------------------------------------------------
    if ( changed ( "extbg_z_drive_sollgeschwindigkeit_in" ) )
    {
//      print ( "handler_extbg_z_drive_sollwerte --- extbg_z_drive_sollgeschwindigkeit_in:", extbg_z_drive_sollgeschwindigkeit_in, "\n" );
      z_drive.SollGeschwAbsolut = extbg_z_drive_sollgeschwindigkeit_in;
      if ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_SPEED )
      {
        z_drive.SollGeschw = vorzeichen_speed * z_drive.SollGeschwAbsolut;
        z_drive.CanSollGeschw = Z_Set_Speed ( truncate ( z_drive.SollGeschw ) );
        print ( "handler_extbg_z_drive_sollwerte --- z_drive.SollGeschw:", z_drive.SollGeschw, "\n" );

        assemble_frame_and_send_to_z_drive ( z_drive );
      };
    };

//                  SOLL POS
// ------------------------------------------------------------------------
    if ( changed ( "extbg_z_drive_sollposition_in" ) )
    {
//      print ( "handler_extbg_z_drive_sollwerte --- extbg_z_drive_sollposition_in:", extbg_z_drive_sollposition_in, "\n" );
      z_drive.SollPos = extbg_z_drive_sollposition_in;
      if ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_POSITION )
      {
        z_drive.CanSollPos        = Z_SollPosition_Berechnen ( z_drive.SollPos );
        print ( "handler_extbg_z_drive_sollwerte --- z_drive.SollPos:",z_drive.SollPos, "\n" );

        assemble_frame_and_send_to_z_drive ( z_drive );
      };
    };
  };

// ------------------------------------------------------------------------
//                  IO MODUL
// ------------------------------------------------------------------------
  handler_io_modul_sensordaten
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_sensordaten\n" );

    if ( changed ( "io_modul_sensordaten_x_plattform_talin_in" )
      || changed ( "io_modul_sensordaten_y_plattform_talin_in" )
      )
    {
      Talin_state.axis_x          = Get_Talin_Axis ( io_modul_sensordaten_x_plattform_talin_in );
      Talin_state.axis_y          = Get_Talin_Axis ( io_modul_sensordaten_y_plattform_talin_in );
      ev_antenna_alignment_changed;
    };
  };

// ------------------------------------------------------------------------
  handler_io_modul_fahrzeugwinkel
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_fahrzeugwinkel\n" );

    Talin_state.isValid   = io_modul_fahrzeugwinkel_talin_data_valid_in;

    if ( changed ( "io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_in" ) )
    {
      Vehicle.angle_x = Get_Vehicle_Angle ( io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_in );
      ev_vehicle_inclination_x_changed ( Vehicle.angle_x );
    };

    if ( changed ( "io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_in" ) )
    {
      Vehicle.angle_y = Get_Vehicle_Angle ( io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_in );
      ev_vehicle_inclination_y_changed ( Vehicle.angle_y );
    };
  };

// ------------------------------------------------------------------------
  handler_io_modul_zustand_heckverteiler_1
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_zustand_heckverteiler_1\n" );
//                  ANTRIEBE ENDSCHALTER 
// ------------------------------------------------------------------------

//      print ( "ANTRIEBE ENDSCHALTER \n" );

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in" ) )
    {
      SENSOR_IP_X = io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_IP_X: ", SENSOR_IP_X, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in" ) )
    {
      SENSOR_AB_Y = io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_AB_Y: ", SENSOR_AB_Y, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in" ) )
    {
      SENSOR_IP_Y = io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_IP_Y: ", SENSOR_IP_Y, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in" ) )
    {
      SENSOR_EO_Z = io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_EO_Z: ", SENSOR_EO_Z, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in" ) )
    {
      SENSOR_EU_Z = io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_EU_Z: ", SENSOR_EU_Z, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_in" ) )
    {
      SENSOR_IP_Z = io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_in;
      print ( "---------- RX-BAG  ---------- SENSOR_IP_Z: ", SENSOR_IP_Z, ", IstPos: ", z_drive.IstPos, "\n" );
      ev_z_drive_SENSOR_IP_Z_changed;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in" ) )
    {
      SENSOR_UB_Z = io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in;
      print ( "---------- RX-BAG  ----------  SENSOR_UB_Z: ", SENSOR_UB_Z, "\n" );
      ev_z_drive_SENSOR_UB_Z_changed;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in" ) )
    {
      SENSOR_IN_PARKPOS = io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in;
      print ( "---------- RX-BAG  ----------  SENSOR_IN_PARKPOS: ", SENSOR_IN_PARKPOS, "\n" );
      ev_antenna_parkpos_state_change;
    };

//                HAUBE 
// ------------------------------------------------------------------------
    if ( changed ( "io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in" )
      )
    {
      SENSOR_HZO = io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in;
      SENSOR_HZG = io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_HZO / SENSOR_HZG : ", SENSOR_HZO, " / ", SENSOR_HZG, "\n" );

      ev_flap_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in" )
      )
    {
      SENSOR_HR1V = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in;
      SENSOR_HR1O = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in;
      SENSOR_HR2V = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in;
      SENSOR_HR2O = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_HR1V / SENSOR_HR1O : ", SENSOR_HR1V, " / ", SENSOR_HR1O, "\n" );
      print ( "---------- RX-BAG  ---------- SENSOR_HR2V / SENSOR_HR2O : ", SENSOR_HR2V, " / ", SENSOR_HR2O, "\n" );

      ev_flap_lock_state_change;
    };
  };

// ------------------------------------------------------------------------
  handler_io_modul_zustand_heckverteiler_2
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_zustand_heckverteiler_2\n" );
//                  STUETZEN 
// ------------------------------------------------------------------------
    if ( changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in" )
      )
    {
      SENSOR_SEKOL = io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in;
      SENSOR_SEKGL = io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SEKOL / SENSOR_SEKGL : ", SENSOR_SEKOL, " / ", SENSOR_SEKGL, "\n" );

      ev_stilt_left_lock_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in" )
      )
    {
      SENSOR_SEKOR = io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in;
      SENSOR_SEKGR = io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SEKOR / SENSOR_SEKGR : ", SENSOR_SEKOR, " / ", SENSOR_SEKGR, "\n" );

      ev_stilt_right_lock_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in" )
      )
    {
      SENSOR_SMUL = io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in;
      SENSOR_SMOL = io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SMUL / SENSOR_SMOL : ", SENSOR_SMUL, " / ", SENSOR_SMOL, "\n" );

      ev_stilt_left_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in" )
      )
    {
      SENSOR_SMUR = io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in;
      SENSOR_SMOR = io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SMUR / SENSOR_SMOR : ", SENSOR_SMUR, " / ", SENSOR_SMOR, "\n" );

      ev_stilt_right_state_change;
    };

//                  ANTENNE VERZURRUNG 
// ------------------------------------------------------------------------
    if ( changed ( "io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in" )
      )
    {
      SENSOR_VZ1O = io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in;
      SENSOR_VZ1V = io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_VZ1O / SENSOR_VZ1V : ", SENSOR_VZ1O, " / ", SENSOR_VZ1V, "\n" );

      ev_antenna_lashing_state_change;
    };
 };

// ------------------------------------------------------------------------  
//                  IO MODULE SW Version
// ------------------------------------------------------------------------
  handler_io_modul_software_version
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_software_version\n" );

  };

// ------------------------------------------------------------------------  
//                  IO MODULE Fehler
// ------------------------------------------------------------------------
  handler_io_modul_fehler
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_fehler\n" );

  };

// ------------------------------------------------------------------------  
//                  IO MODULE Rueckmeldung
// ------------------------------------------------------------------------
  handler_io_modul_rueckmeldung_ios
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_rueckmeldung_ios\n" );

  };

// ------------------------------------------------------------------------  
//                  FUNKTIONSUEBERWACHUNG
// ------------------------------------------------------------------------
  handler_heartbeat_x_drive
  {
    s_x_drive_heartbeat_payload = s_heartbeat_payload_xdrv_in;
    ev_x_drive_has_heartbeat;
  };

  handler_heartbeat_y_drive
  {
    s_y_drive_heartbeat_payload = s_heartbeat_payload_ydrv_in;
    ev_y_drive_has_heartbeat;
  };

  handler_heartbeat_z_drive
  {
    s_z_drive_heartbeat_payload = s_heartbeat_payload_zdrv_in;
    ev_z_drive_has_heartbeat;
  };

  handler_heartbeat_io_module
  {
    s_io_module_heartbeat_payload = s_heartbeat_payload_iomodule_in;
    ev_io_module_has_heartbeat;
  };

  handler_heartbeat_si_module
  {
    s_si_module_heartbeat_payload = s_heartbeat_payload_simodule_in;
    //print ( "---------- RX-BAG ---------- s_si_module_heartbeat_payload: ", s_si_module_heartbeat_payload, "\n" );
    ev_si_module_has_heartbeat;
  };

  handler_heartbeat_usv_1
  {
    s_usv1_heartbeat_payload = s_heartbeat_payload_usv_1_in;
//    print ( "---------- RX-BAG ---------- s_usv1_heartbeat_payload: ", s_usv1_heartbeat_payload, "\n" );
    ev_usv1_has_heartbeat;
  };

  handler_heartbeat_usv_2
  {
    s_usv2_heartbeat_payload = s_heartbeat_payload_usv_2_in;
//    print ( "---------- RX-BAG ---------- s_usv2_heartbeat_payload: ", s_usv2_heartbeat_payload, "\n" );
    ev_usv2_has_heartbeat;
  };

  handler_heartbeat_extbg
  {
    s_extbg_heartbeat_payload = s_heartbeat_payload_extbg_in;
//    print ( "---------- RX-BAG ---------- s_extbg_heartbeat_payload: ", s_extbg_heartbeat_payload, "\n" );
    ev_extbg_has_heartbeat;
  };
};
