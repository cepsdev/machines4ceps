// ------------------------------------------------------------------------
//      SEND LOGIC FOR TRGS/DINGO
// ------------------------------------------------------------------------

global_functions
{
  print_drive_state_
  {
    params{ _drive; _DriveName; };
    print ( "========== TX-DINGO  - STATUS  ====================== ", _DriveName, "\n"
          , "---------- ANTRIEB_READY:         ", _drive.Status.ANTRIEB_READY, "\n"
          , "---------- ANTRIEB_ENABLE_OUT:    ", _drive.Status.ANTRIEB_ENABLE_OUT, "\n"
          , "---------- ANTRIEB_INPOS:         ", _drive.Status.ANTRIEB_INPOS, "\n"
          , "---------- LIMIT_SWITCH_CW:       ", _drive.Status.ANTRIEB_LIMIT_SWITCH_CW, "\n"
          , "---------- LIMIT_SWITCH_CCW:      ", _drive.Status.ANTRIEB_LIMIT_SWITCH_CCW, "\n"
          , "---------- BREAK_RELEASED:        ", _drive.Status.ANTRIEB_BREAK_RELEASED, "\n"
          , "---------- REMOTE_OUTPUT_STATUS:  ", _drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS, "\n"
          , "---------- ANTRIEB_FAULT:         ", _drive.Status.ANTRIEB_FAULT, "\n"
          , "---------- IstPos    CAN / MKS :  ", _drive.CanIstPos,     " / ", _drive.IstPos,     "\n"
          , "---------- IstGeschw CAN / MKS :  ", _drive.CanIstGeschw,  " / ", _drive.IstGeschw,  "\n"
          , "---------- IstStrom  CAN / MKS :  ", _drive.CanIstStrom,   " / ", _drive.IstStrom,   " ( not used )\n"
          , "=====================================================\n"
          );
  };
  assemble_frame_xdrive_response_and_send
  {
    params{ _drive; };

    s_frame_drive_actual_pos_xdrv_out               = _drive.CanIstPos;
    s_frame_drive_actual_speed_xdrv_out             = _drive.CanIstGeschw;
    s_frame_drive_actual_current_xdrv_out           = _drive.CanIstStrom;

    s_frame_drive_status_ready_xdrv_out             = _drive.Status.ANTRIEB_READY;
    s_frame_drive_status_enable_xdrv_out            = _drive.Status.ANTRIEB_ENABLE_OUT;
    s_frame_drive_status_inpos_xdrv_out             = _drive.Status.ANTRIEB_INPOS;
    s_frame_drive_status_limit_switch_cw_xdrv_out   = _drive.Status.ANTRIEB_LIMIT_SWITCH_CW;
    s_frame_drive_status_limit_switch_ccw_xdrv_out  = _drive.Status.ANTRIEB_LIMIT_SWITCH_CCW;
    s_frame_drive_status_break_released_xdrv_out    = _drive.Status.ANTRIEB_BREAK_RELEASED;
    s_frame_drive_status_fault_xdrv_out             = _drive.Status.ANTRIEB_FAULT;

    print_drive_state_ ( _drive, "X_drive" );

    send ( frame_x_drive_response, channel_can_1_out );
  };

  assemble_frame_ydrive_response_and_send
  {
    params{ _drive; };

    s_frame_drive_actual_pos_ydrv_out               = _drive.CanIstPos;
    s_frame_drive_actual_speed_ydrv_out             = _drive.CanIstGeschw;
    s_frame_drive_actual_current_ydrv_out           = _drive.CanIstStrom;

    s_frame_drive_status_ready_ydrv_out             = _drive.Status.ANTRIEB_READY;
    s_frame_drive_status_enable_ydrv_out            = _drive.Status.ANTRIEB_ENABLE_OUT;
    s_frame_drive_status_inpos_ydrv_out             = _drive.Status.ANTRIEB_INPOS;
    s_frame_drive_status_limit_switch_cw_ydrv_out   = _drive.Status.ANTRIEB_LIMIT_SWITCH_CW;
    s_frame_drive_status_limit_switch_ccw_ydrv_out  = _drive.Status.ANTRIEB_LIMIT_SWITCH_CCW;
    s_frame_drive_status_break_released_ydrv_out    = _drive.Status.ANTRIEB_BREAK_RELEASED;
    s_frame_drive_status_fault_ydrv_out             = _drive.Status.ANTRIEB_FAULT;

    print_drive_state_ ( _drive, "Y_drive" );

    send ( frame_y_drive_response, channel_can_1_out );
  };

  assemble_frame_zdrive_response_and_send
  {
    params{ _drive; };

    s_frame_drive_actual_pos_zdrv_out               = _drive.CanIstPos;
    s_frame_drive_actual_speed_zdrv_out             = _drive.CanIstGeschw;
    s_frame_drive_actual_current_zdrv_out           = _drive.CanIstStrom;

    s_frame_drive_status_ready_zdrv_out             = _drive.Status.ANTRIEB_READY;
    s_frame_drive_status_enable_zdrv_out            = _drive.Status.ANTRIEB_ENABLE_OUT;
    s_frame_drive_status_inpos_zdrv_out             = _drive.Status.ANTRIEB_INPOS;
    s_frame_drive_status_limit_switch_cw_zdrv_out   = _drive.Status.ANTRIEB_LIMIT_SWITCH_CW;
    s_frame_drive_status_limit_switch_ccw_zdrv_out  = _drive.Status.ANTRIEB_LIMIT_SWITCH_CCW;
    s_frame_drive_status_break_released_zdrv_out    = _drive.Status.ANTRIEB_BREAK_RELEASED;
    s_frame_drive_status_fault_zdrv_out             = _drive.Status.ANTRIEB_FAULT;

    print_drive_state_ ( _drive, "Z_drive" );

    send ( frame_z_drive_response, channel_can_1_out );
  };
  event_logging
  {
    params{ inEvent; };
    print ( "---------- TX-DINGO  ---------- Event = ", inEvent, "\n" );
  };
};

post_event_processing
{
//   if((argv ( 0 ) == "ev_antenna_to_raise_starts" ) && (irgendwas_anderes) )
//     send();
  
//   if(DEBUG) //print ( "post_event_processing\n", "Event = ", argv ( 0 ), "\n" );
//   if (changed ( "luminance_request_target_value" ) ){
//      //print ( "Value of 'luminance_request_target_value' changed", "\n" );
//      send(luminance_request, out_channel);
//    }
  
//     //print ( "---------- NETWORK ---------- ev_io_module_has_heartbeat\n" );
//     //print ( "---------- NETWORK ---------- s_heartbeat_can_id  ", s_heartbeat_can_id, "\n" );
//     //print ( "---------- NETWORK ---------- s_heartbeat_payload_out ", s_heartbeat_payload_out, "\n" );

  
// ------------------------------------------------------------------------  
//                  PNEUMATICS
// ------------------------------------------------------------------------
  if ( changed ( "Stilt_left_pressure" )
    || changed ( "Stilt_right_pressure" )
    || changed ( "System_pressure" )
    )
  {
    io_modul_luftdruck_pneumatiktank_druck_stuetze_links_out  = Set_Pressure ( 2 * Stilt_left_pressure );
    io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_out = Set_Pressure ( 2 * Stilt_right_pressure );
    io_modul_luftdruck_pneumatiktank_systemdruck_out          = Set_Pressure ( 2 * System_pressure );

    print ( "---------- TX-DINGO ---------- pressure System / Left / Right : ", System_pressure, " / ", Stilt_left_pressure, " / ", Stilt_right_pressure, "\n" );

    send ( io_modul_luftdruck_pneumatiktank, channel_can_1_out );
  };

// ------------------------------------------------------------------------
//                  IO MODUL
// ------------------------------------------------------------------------

// -----------------------------------------------
//                  ANTRIEBE ENDSCHALTER 
// -----------------------------------------------
  if ( changed ( "SENSOR_IP_X" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_IP_X: ", SENSOR_IP_X, "\n" );
    io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_out = SENSOR_IP_X;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_AB_Y" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_AB_Y :", SENSOR_AB_Y, "\n" );
    io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_out = SENSOR_AB_Y;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_IP_Y" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_IP_Y: ", SENSOR_IP_Y, "\n" );
    io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_out = SENSOR_IP_Y;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_EO_Z" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_EO_Z: ", SENSOR_EO_Z, "\n" );
    io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_out = SENSOR_EO_Z;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_EU_Z" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_EU_Z: ", SENSOR_EU_Z, "\n" );
    io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_out = SENSOR_EU_Z;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_IP_Z" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_IP_Z: ", SENSOR_IP_Z, " ( IstPos: ", z_drive.IstPos, " )\n" );
    io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_out = SENSOR_IP_Z;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_UB_Z" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_UB_Z: ", SENSOR_UB_Z, "\n" );
    io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_out = SENSOR_UB_Z;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_IN_PARKPOS" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_IN_PARKPOS: ", SENSOR_IN_PARKPOS, "\n" );
    io_modul_zustand_heckverteiler_1_cs1_in_parkposition_out = SENSOR_IN_PARKPOS;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

// -----------------------------------------------
//                  STUETZEN 
// -----------------------------------------------
  if ( changed ( "SENSOR_SEKOL" ) || changed ( "SENSOR_SEKGL" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_SEKOL / SENSOR_SEKGL : ", SENSOR_SEKOL, " / ", SENSOR_SEKGL, "\n" );
    io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_out       = SENSOR_SEKOL;
    io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_out = SENSOR_SEKGL;
    send ( io_modul_zustand_heckverteiler_2, channel_can_1_out );
  };

  if ( changed ( "SENSOR_SEKOR" ) || changed ( "SENSOR_SEKGR" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_SEKOR / SENSOR_SEKGR : ", SENSOR_SEKOR, " / ", SENSOR_SEKGR, "\n" );
    io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_out       = SENSOR_SEKOR;
    io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_out = SENSOR_SEKGR;
    send ( io_modul_zustand_heckverteiler_2, channel_can_1_out );
  };

  if ( changed ( "SENSOR_SMUL" ) || changed ( "SENSOR_SMOL" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_SMUL / SENSOR_SMOL : ", SENSOR_SMUL, " / ", SENSOR_SMOL, "\n" );
    io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_out = SENSOR_SMUL;
    io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_out  = SENSOR_SMOL;
    send ( io_modul_zustand_heckverteiler_2, channel_can_1_out );
  };

  if ( changed ( "SENSOR_SMUR" ) || changed ( "SENSOR_SMOR" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_SMUR / SENSOR_SMOR : ", SENSOR_SMUR, " / ", SENSOR_SMOR, "\n" );
    io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_out = SENSOR_SMUR;
    io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_out  = SENSOR_SMOR;
    send ( io_modul_zustand_heckverteiler_2, channel_can_1_out );
  };

// -----------------------------------------------
//                  ANTENNE VERZURRUNG 
// -----------------------------------------------
  if ( changed ( "SENSOR_VZ1O" ) || changed ( "SENSOR_VZ1V" ) )
  {
    print ( "------------------- TX-DINGO ---------- SENSOR_VZ1O / SENSOR_VZ1V : ", SENSOR_VZ1O, " / ", SENSOR_VZ1V, "\n" );
    io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_out      = SENSOR_VZ1O;
    io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_out = SENSOR_VZ1V;
    send ( io_modul_zustand_heckverteiler_2, channel_can_1_out );
  };


// -----------------------------------------------
//                  HAUBE
// -----------------------------------------------
  if ( changed ( "SENSOR_HZO" ) || changed ( "SENSOR_HZG" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_HZO / SENSOR_HZG : ", SENSOR_HZO, " / ", SENSOR_HZG, "\n" );
    io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_out       = SENSOR_HZO;
    io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_out = SENSOR_HZG;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };

  if ( changed ( "SENSOR_HR1V" ) || changed ( "SENSOR_HR1O" ) || changed ( "SENSOR_HR2V" ) || changed ( "SENSOR_HR2O" ) )
  {
    print ( "---------- TX-DINGO ---------- SENSOR_HR1V / SENSOR_HR1O : ", SENSOR_HR1V, " / ", SENSOR_HR1O, "\n" );
    print ( "---------- TX-DINGO ---------- SENSOR_HR2V / SENSOR_HR2O : ", SENSOR_HR2V, " / ", SENSOR_HR2O, "\n" );
    io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_out = SENSOR_HR1V;
    io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_out      = SENSOR_HR1O;
    io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_out = SENSOR_HR2V;
    io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_out      = SENSOR_HR2O;
    send ( io_modul_zustand_heckverteiler_1, channel_can_1_out );
  };


// ------------------------------------------------------------------------
//                  DRIVES
// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_x_drive_is_enabled" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Status.ANTRIEB_READY          = 1;
    x_drive.Status.ANTRIEB_ENABLE_OUT     = 1;
    x_drive.Status.ANTRIEB_FAULT          = 0;
    x_drive.Status.ANTRIEB_INPOS          = 0;
//    x_drive.Status.ANTRIEB_BREAK_RELEASED = 0;

    x_drive.CanIstPos                     = X_SollPosition_Berechnen ( _drive.IstPos );
    x_drive.CanIstGeschw                  = X_Set_Speed ( truncate ( _drive.IstGeschw ) );

    assemble_frame_xdrive_response_and_send ( x_drive );
  } else

  if ( argv ( 0 ) == "ev_x_drive_stop" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Status.ANTRIEB_INPOS          = 1;

    x_drive.CanIstPos                     = X_SollPosition_Berechnen ( _drive.IstPos );
    x_drive.CanIstGeschw                  = X_Set_Speed ( truncate ( _drive.IstGeschw ) );

    assemble_frame_xdrive_response_and_send ( x_drive );
  } else

  if ( argv ( 0 ) == "ev_x_drive_is_disabled" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Status.ANTRIEB_READY          = 1;
    x_drive.Status.ANTRIEB_ENABLE_OUT     = 0;
    x_drive.Status.ANTRIEB_FAULT          = 0;
//    x_drive.Status.ANTRIEB_BREAK_RELEASED = 0;

    x_drive.CanIstPos                     = X_SollPosition_Berechnen ( _drive.IstPos );
    x_drive.CanIstGeschw                  = X_Set_Speed ( truncate ( _drive.IstGeschw ) );

    assemble_frame_xdrive_response_and_send ( x_drive );
  } else

  if ( argv ( 0 ) == "ev_x_drive_position_changed" )
  {
    x_drive.CanIstPos                     = X_SollPosition_Berechnen ( _drive.IstPos );
    x_drive.CanIstGeschw                  = X_Set_Speed ( truncate ( _drive.IstGeschw ) );

    assemble_frame_xdrive_response_and_send ( x_drive );
  } else

  if ( argv ( 0 ) == "ev_y_drive_is_enabled" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Status.ANTRIEB_READY          = 1;
    y_drive.Status.ANTRIEB_ENABLE_OUT     = 1;
    y_drive.Status.ANTRIEB_FAULT          = 0;
    y_drive.Status.ANTRIEB_INPOS          = 0;
//    y_drive.Status.ANTRIEB_BREAK_RELEASED = 0;

    y_drive.CanIstPos                     = Y_SollPosition_Berechnen ( y_drive.IstPos );
    y_drive.CanIstGeschw                  = Y_Set_Speed ( truncate ( y_drive.IstGeschw ) );

    assemble_frame_ydrive_response_and_send ( y_drive );
  } else

  if ( argv ( 0 ) == "ev_y_drive_stop" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Status.ANTRIEB_INPOS          = 1;

    y_drive.CanIstPos                     = Y_SollPosition_Berechnen ( y_drive.IstPos );
    y_drive.CanIstGeschw                  = Y_Set_Speed ( truncate ( y_drive.IstGeschw ) );

    assemble_frame_ydrive_response_and_send ( y_drive );
  } else

  if ( argv ( 0 ) == "ev_y_drive_is_disabled" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Status.ANTRIEB_READY          = 1;
    y_drive.Status.ANTRIEB_ENABLE_OUT     = 0;
    y_drive.Status.ANTRIEB_FAULT          = 0;
//    y_drive.Status.ANTRIEB_BREAK_RELEASED = 0;

    y_drive.CanIstPos                     = Y_SollPosition_Berechnen ( y_drive.IstPos );
    y_drive.CanIstGeschw                  = Y_Set_Speed ( truncate ( y_drive.IstGeschw ) );

    assemble_frame_ydrive_response_and_send ( y_drive );
  } else

  if ( argv ( 0 ) == "ev_y_drive_position_changed" )
  {
    event_logging ( argv ( 0 ) );

    y_drive.CanIstPos                     = Y_SollPosition_Berechnen ( y_drive.IstPos );
    y_drive.CanIstGeschw                  = Y_Set_Speed ( truncate ( y_drive.IstGeschw ) );

    assemble_frame_ydrive_response_and_send ( y_drive );
  } else

  if ( argv ( 0 ) == "ev_z_drive_is_enabled" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Status.ANTRIEB_READY          = 1;
    z_drive.Status.ANTRIEB_ENABLE_OUT     = 1;
    z_drive.Status.ANTRIEB_FAULT          = 0;
    z_drive.Status.ANTRIEB_INPOS          = 0;
//    z_drive.Status.ANTRIEB_BREAK_RELEASED = 0;

    z_drive.CanIstPos                     = Z_SollPosition_Berechnen ( z_drive.IstPos );
    z_drive.CanIstGeschw                  = Z_Set_Speed ( truncate ( z_drive.IstGeschw ) );

    assemble_frame_zdrive_response_and_send ( z_drive );
  } else

  if ( argv ( 0 ) == "ev_z_drive_stop" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Status.ANTRIEB_INPOS          = 1;

    z_drive.CanIstPos                     = Z_SollPosition_Berechnen ( z_drive.IstPos );
    z_drive.CanIstGeschw                  = Z_Set_Speed ( truncate ( z_drive.IstGeschw ) );

    assemble_frame_zdrive_response_and_send ( z_drive );
  } else

  if ( argv ( 0 ) == "ev_z_drive_is_disabled" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Status.ANTRIEB_READY          = 1;
    z_drive.Status.ANTRIEB_ENABLE_OUT     = 0;
    z_drive.Status.ANTRIEB_FAULT          = 0;
//    z_drive.Status.ANTRIEB_BREAK_RELEASED = 0;

    z_drive.CanIstPos                     = Z_SollPosition_Berechnen ( z_drive.IstPos );
    z_drive.CanIstGeschw                  = Z_Set_Speed ( truncate ( z_drive.IstGeschw ) );

    assemble_frame_zdrive_response_and_send ( z_drive );
  } else

  if ( argv ( 0 ) == "ev_z_drive_position_changed" )
  {
    z_drive.CanIstPos                     = Z_SollPosition_Berechnen ( z_drive.IstPos );
    z_drive.CanIstGeschw                  = Z_Set_Speed ( truncate ( z_drive.IstGeschw ) );

    assemble_frame_zdrive_response_and_send ( z_drive );
  } else

// ------------------------------------------------------------------------
//                  FUNKTIONSUEBERWACHUNG
// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_x_drive_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_xdrv_out = s_x_drive_heartbeat_payload;
    send ( frame_heartbeat_x_drive, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_y_drive_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_ydrv_out = s_y_drive_heartbeat_payload;
    send ( frame_heartbeat_y_drive, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_z_drive_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_zdrv_out = s_z_drive_heartbeat_payload;
    send ( frame_heartbeat_z_drive, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_io_module_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_iomodule_out = s_io_module_heartbeat_payload;
    send ( frame_heartbeat_io_module, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_si_module_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_simodule_out = s_si_module_heartbeat_payload;
    send ( frame_heartbeat_si_module, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_usv1_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_usv_1_out = s_usv1_heartbeat_payload;
    send ( frame_heartbeat_usv_1, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_usv2_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_usv_2_out = s_usv2_heartbeat_payload;
    send ( frame_heartbeat_usv_2, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_extbg_has_heartbeat" )
  {
//    event_logging ( argv ( 0 ) );
    s_heartbeat_payload_extbg_out = s_extbg_heartbeat_payload;
    send ( frame_heartbeat_extbg, channel_can_1_out );
  };
};
