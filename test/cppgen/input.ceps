kind Systemparameter;
kind Systemstate;
kind Guard;
kind Event;

Guard g_kampfschalter_is_active, g_kampfschalter_was_active;
Guard g_is_NotAus_or_Abbruch, g_is_NotAus_active, g_is_Abbruch_active;
Guard g_is_Taste_A_Abbruch_active, g_is_Taste_E_Abbruch_active;
Guard g_air_pressure_is_sufficient;
Guard g_antenna_lashing_is_locked,    g_antenna_lashing_lock_preconditions,   g_antenna_lashing_is_neither_nor;
Guard g_antenna_lashing_is_unlocked,  g_antenna_lashing_unlock_preconditions, g_antenna_lashing_is_wrong;
Guard g_antenna_is_hinged_down,   g_antenna_to_hinge_down_preconditions;
Guard g_antenna_is_levelled_out,  g_antenna_to_rise_preconditions;
Guard g_antenna_x_correction_is_possible, g_antenna_y_correction_is_possible, g_antenna_correction_is_possible;
Guard g_antenna_is_in_parking_position;
Guard g_dust_discharge_preconditions,   g_dust_discharge_is_ready;
Guard g_flap_is_locked,   g_flap_is_open,   g_flap_is_neither_nor,  g_flap_open_preconditions,  g_flap_to_open_preconditions;
Guard g_flap_is_unlocked, g_flap_is_closed, g_flap_is_wrong,        g_flap_close_preconditions, g_flap_to_close_preconditions;
Guard g_flap_lock_one_is_unlocked, g_flap_lock_two_is_unlocked, g_flap_unlock_preconditions, g_flap_lock_one_is_locked, g_flap_lock_two_is_locked;
Guard g_ivenet_sees_antenna_in_parkpos, g_io_module_sees_antenna_in_parkpos;
Guard g_mast_is_not_blocking_flap;
Guard g_mast_move_up_preconditions, g_mast_move_down_preconditions;
Guard g_mast_height_is_le_min_position, g_mast_height_is_gt_min_position;
Guard g_mast_height_is_lt_min_position, g_mast_height_is_lt_max_position, g_mast_height_is_lt_indexposition;
Guard g_mast_height_is_ge_min_position, g_mast_height_is_ge_max_position, g_mast_height_is_ge_indexposition;
Guard g_mast_height_ge_lower_working_position;
Guard g_mast_operations_are_reasonable, g_mast_operations_are_possible;
Guard g_platform_retract_preconditions;
Guard g_stilt_left_is_locked,   g_stilt_left_is_unlocked,   g_stilt_left_is_extended,   g_stilt_left_is_retracted,  g_stilt_left_has_ground_contact,  g_stilt_left_is_neither_nor;
Guard g_stilt_right_is_locked,  g_stilt_right_is_unlocked,  g_stilt_right_is_extended,  g_stilt_right_is_retracted, g_stilt_right_has_ground_contact, g_stilt_right_is_neither_nor;
Guard g_stilt_any_is_locked,    g_stilt_any_is_unlocked,    g_stilt_any_is_extended,    g_stilts_all_are_retracted, g_stilts_all_have_ground_contact;
Guard g_stilts_all_are_locked,  g_stilts_all_are_unlocked;
Guard g_stilts_unlock_preconditions, g_stilts_to_retract_preconditions, g_platform_extend_preconditions;
Guard g_system_extend_with_stilts;
Guard g_talin_data_is_valid;
Guard g_vehicle_brake_is_active,  g_vehicle_does_not_drive,       g_vehicle_inclination_x_is_tolerable;
Guard g_vehicle_gear_is_neutral,  g_vehicle_slide_preconditions,  g_vehicle_inclination_y_is_tolerable;
Guard g_system_pressure_is_sufficient;
Guard g_psm_is_operational;
Guard g_extBG_is_online,      g_extbg_payload_is_preop,     g_extbg_payload_is_op;
Guard g_io_module_is_online,  g_io_module_payload_is_preop, g_io_module_payload_is_op;
Guard g_si_module_is_online,  g_si_module_payload_is_preop, g_si_module_payload_is_op;
Guard g_usv1_is_online,       g_usv1_payload_is_preop,      g_usv1_payload_is_op; 
Guard g_usv2_is_online,       g_usv2_payload_is_preop,      g_usv2_payload_is_op; 
Guard g_x_drive_is_online,    g_x_drive_payload_is_preop,   g_x_drive_payload_is_op;
Guard g_y_drive_is_online,    g_y_drive_payload_is_preop,   g_y_drive_payload_is_op;
Guard g_z_drive_is_online,    g_z_drive_payload_is_preop,   g_z_drive_payload_is_op;
Guard g_x_drive_is_moving_up, g_x_drive_is_moving_down,     g_x_drive_is_not_moving;
Guard g_y_drive_is_moving_up, g_y_drive_is_moving_down,     g_y_drive_is_not_moving;
Guard g_z_drive_is_moving_up, g_z_drive_is_moving_down,     g_z_drive_is_not_moving;
Guard g_x_drive_is_in_indexposition,  g_x_drive_is_in_target_position,  g_x_drive_has_antrieb_fault;
Guard g_y_drive_is_in_indexposition,  g_y_drive_is_in_target_position,  g_y_drive_has_antrieb_fault;
Guard g_z_drive_is_in_indexposition,  g_z_drive_is_in_target_position,  g_z_drive_has_antrieb_fault;
Guard g_x_drive_is_in_range;
Guard g_y_drive_is_in_arbeitsbereich,   g_y_drive_is_in_arbeitsposition,  g_y_drive_preconditions_to_move_to_arbeitsposition;
Guard g_z_drive_is_in_lashing_position, g_z_drive_to_target_position_preconditions;
Guard g_x_drive_is_levelled_out, g_x_drive_levelling_out_was_successful;
Guard g_y_drive_is_levelled_out, g_y_drive_levelling_out_was_successful;
Guard g_z_drive_may_be_enabled;
Guard g_z_drive_is_enabled;

// --------------------------------------------
// ----------- SYSTEM CONSTANTS ---------------
// --------------------------------------------
val MAJOR_SOFTWARE_VERSION        = 0;
val MINOR_SOFTWARE_VERSION        = 2;

//val DEF_SYS_INIT_INT_0            = -1;  //  only for testing
 val DEF_SYS_INIT_INT_0            = 0;
// val DEF_SYS_INIT_INT_0            = 1;   //  only for testing

// val DEF_SYS_INIT_INT_1            = -1;  //  only for testing
// val DEF_SYS_INIT_INT_1            = 0;   //  only for testing
val DEF_SYS_INIT_INT_1            = 1;

// --------------------------------------------
// ----------- VEHICLE CONSTANTS --------------
val GEAR_IS_DC_NEUTRAL            = 0;
val BRAKE_IS_ACTIVE               = 0;

// --------------------------------------------
// ---------- FUNKTIONSUEBERWACHUNG -----------
Systemparameter NODE_HEARTBEAT_PERIOD  ;
Systemparameter DRIVES_HEARTBEAT_PERIOD;
Systemparameter PSM_TRAFFIC_PERIOD     ;
Systemparameter IVENET_TRAFFIC_PERIOD  ;
Systemparameter TIMER_ACTIVATION       ;

Globals
{
  NODE_HEARTBEAT_PERIOD         = 1.0; // s
  DRIVES_HEARTBEAT_PERIOD       = 0.5; // s
  PSM_TRAFFIC_PERIOD            = 1.0; // s
  IVENET_TRAFFIC_PERIOD         = 1.0; // s
  TIMER_ACTIVATION              = 1.0;    //  with -1.0 all timers disabled  
};

val PRE_OPERATIONAL_PAYLOAD       = 0x7F;
val     OPERATIONAL_PAYLOAD       = 0x05;

// ExtBG -------------------------
val MODUS_AUTOMATIKBETRIEB        = 0x0;
val MODUS_EINZELBETRIEB           = 0x1;
val MODUS_MANUELLBETRIEB          = 0x2;

// System pressure  --------------
val DEFAULT_SYSTEM_PRESSURE       = 6.0;
val MINIMUM_SYSTEM_PRESSURE       = 5.0;  //  DRUCK_WARNUNG
val START_SYSTEM_PRESSURE         = 0.0;
val DEFAULT_STILT_PRESSURE        = 0.0;
val STILT_PRESSURE_GROUND_CONTACT = 1.0;


// TIMEOUTS
// These are taken from a former Dingo generation (Dingo-BÃœR)
val DEF_TIME_500MS                = 0.5*TIMER_ACTIVATION;

// --------------------------------------------
// --------------- ANTRIEBE ------------------
val NODE_ID_X_DRIVE  = 0x10;
val NODE_ID_Y_DRIVE  = 0x20;
val NODE_ID_Z_DRIVE  = 0x30;
val NODE_ID_BAG      = 0x40;
val NODE_ID_IO_MODULE= 0x48;
val NODE_ID_SI_MODULE= 0x50;
val NODE_ID_USV_1    = 0x70;
val NODE_ID_USV_2    = 0x78;
val NODE_ID_EXTBG    = 0x60;

// --------------------------------------------
// ---------------- ANTENNE -------------------
val ANTENNA_DONT_CARE      = 0;
val ANTENNA_IS_ALIGNED     = 1;
val ANTENNA_IS_NOT_ALIGNED = 2;

// --------------------------------------------
// ---------------- COB-IDs -------------------
val COB_ID_X_DRIVE_SEND       = 0x200 + NODE_ID_X_DRIVE;
val COB_ID_X_DRIVE_RECEIVE    = 0x180 + NODE_ID_X_DRIVE;
val COB_ID_X_DRIVE_EMERGENCY  = 0x080 + NODE_ID_X_DRIVE;
val COB_ID_Y_DRIVE_SEND       = 0x200 + NODE_ID_Y_DRIVE;
val COB_ID_Y_DRIVE_RECEIVE    = 0x180 + NODE_ID_Y_DRIVE;
val COB_ID_Y_DRIVE_EMERGENCY  = 0x080 + NODE_ID_Y_DRIVE;
val COB_ID_Z_DRIVE_SEND       = 0x200 + NODE_ID_Z_DRIVE;
val COB_ID_Z_DRIVE_RECEIVE    = 0x180 + NODE_ID_Z_DRIVE;
val COB_ID_Z_DRIVE_EMERGENCY  = 0x080 + NODE_ID_Z_DRIVE;
// ------------------------------------------------------------------------

val CAN_ID_BROADCAST = 0x0;
val CAN_ID_BAG       = 0x700 + NODE_ID_BAG;
val CAN_ID_X_DRIVE   = 0x700 + NODE_ID_X_DRIVE;
val CAN_ID_Y_DRIVE   = 0x700 + NODE_ID_Y_DRIVE;
val CAN_ID_Z_DRIVE   = 0x700 + NODE_ID_Z_DRIVE;
val CAN_ID_IO_MODULE = 0x700 + NODE_ID_IO_MODULE;
val CAN_ID_SI_MODULE = 0x700 + NODE_ID_SI_MODULE;
val CAN_ID_USV_1     = 0x700 + NODE_ID_USV_1;
val CAN_ID_USV_2     = 0x700 + NODE_ID_USV_2;
val CAN_ID_EXTBG     = 0x700 + NODE_ID_EXTBG;
// ------------------------------------------------------------------------

val OPERATIONAL_GENERIC_PAYLOAD = 0x01;
// ------------------------------------------------------------------------

val DEF_ANTRIEBE_PERIODE              = 0.5;
val DEF_TIME_RUCKMLD_ANTRIEBE         =  2 * TIMER_ACTIVATION;
val DEF_TIME_X_IN_IP                  = 10 * TIMER_ACTIVATION;
val DEF_TIME_X_FAHREN                 = 10 * TIMER_ACTIVATION;
val DEF_TIME_Y_FAHREN                 = 10 * TIMER_ACTIVATION;

val DEF_TIME_STUETZEN_DRUCKAUFBAU     =  5 * TIMER_ACTIVATION;
val DEF_TIME_STUETZEN_FAHREN          = 80 * TIMER_ACTIVATION;
val DEF_TIME_STUETZEN_KLEMMUNG        =  4 * TIMER_ACTIVATION;
val DEF_TIME_STUETZEN_KLEMMUNG_CHECK  =  1 * TIMER_ACTIVATION;
// Dust discharge
val DEF_TIME_VV1                      =  3 * TIMER_ACTIVATION;
val DEF_TIME_STAUBAUSTRAG             = 20 * TIMER_ACTIVATION;
// Haube / Flap
val DEF_TIME_HAUBE_DRUCKAUFBAU        =  3 * TIMER_ACTIVATION;
val DEF_TIME_HAUBE_ENTRIEGELN         = 10 * TIMER_ACTIVATION;
val DEF_TIME_HAUBE_VERRIEGELN         = 10 * TIMER_ACTIVATION;
val DEF_TIME_HAUBE_OEFFNEN            = 40 * TIMER_ACTIVATION;
val DEF_TIME_HAUBE_SCHLIESSEN         = 40 * TIMER_ACTIVATION;
// Antenne
val DEF_TIME_VERZURRUNG               = 20 * TIMER_ACTIVATION;
val DEF_TIME_1S                       =  1 * TIMER_ACTIVATION;
val DEF_TIME_ANT_AUFRICHTEN           = 10 * TIMER_ACTIVATION;
val DEF_TIME_ANT_ABKLAPPEN            = 10 * TIMER_ACTIVATION;
val DEF_TIME_IN_PARKPOS               = 20 * TIMER_ACTIVATION;
val DEF_TIME_KORREKTURWINKEL          = 10 * TIMER_ACTIVATION;
// Mast
val DEF_TIME_MAST_FAHREN              = 180 * TIMER_ACTIVATION;
val MODE_TO_TARGET                    = 0;
val MODE_GIVEN_SPEED                  = 1;
val WITH_ENABLE_TIMEOUT               = 0;
val WITHOUT_ENABLE_TIMEOUT            = 1;
val WITH_MOVING_TIMEOUT               = 1;
val WITHOUT_MOVING_TIMEOUT            = 0;

// drives
val DRIVE_OPERATIONAL_MODE_STOP             = 0;
val DRIVE_OPERATIONAL_MODE_SPEED            = 1;
val DRIVE_OPERATIONAL_MODE_POSITION         = 2;
val DRIVE_OPERATIONAL_MODE_POSITION_WFF     = 3;
val DRIVE_OPERATIONAL_MODE_CURRENT          = 4;
val DRIVE_OPERATIONAL_MODE_SPEED_WFF        = 5;
val DRIVE_OPERATIONAL_MODE_SINGLE_TURN_POS  = 6;
val DRIVE_OPERATIONAL_MODE_INTERPOLATION    = 7;

// IO-MODULE
val IO_MODULE_BETRIEBSART_NORMAL            = 0;
val IO_MODULE_BETRIEBSART_SELBSTTEST        = 1;
val IO_MODULE_BETRIEBSART_RESET             = 2;
val IO_MODULE_BETRIEBSART_NZD               = 3;
val IO_MODULE_BETRIEBSART_STANDBY           = 4;

// SI-MODULE
val SI_MODULE_BETRIEBSART_NORMAL            = 0;
val SI_MODULE_BETRIEBSART_SELBSTTEST        = 1;
val SI_MODULE_BETRIEBSART_RESET             = 2;
val SI_MODULE_BETRIEBSART_NZD               = 3;
val SI_MODULE_BETRIEBSART_STANDBY           = 4;

// --------------------------------------------
// ------------------ IVENET ------------------
val IVENET_MAST_IS_LOCKED_NAVIGATION_MODE    = 1;
val IVENET_MAST_IS_MOVING_ANTENNA_DEPLOYMENT = 2;
val IVENET_MAST_IS_UNLOCKED_OBSERVATION_MODE = 3;

val IVENET_PLATFORM_IS_NOT_ALIGNED                         = 0;
val IVENET_PLATFORM_ALIGNMENT_IS_IN_PROGRESS               = 1;
val IVENET_PLATFORM_IS_ALIGNED                             = 2;
val IVENET_PLATFORM_IS_NOT_ALIGNED_DUE_TO_VEHICLE_MOVEMENT = 3;
val IVENET_PLATFORM_IS_NOT_ALIGNED_DUE_TO_MAST_MOVEMENT    = 4;
val IVENET_PLATFORM_GENERAL_MALFUNCTION                    = 5;

// --------------------------------------------
// ----------------- TYPEDEFS -----------------
typedef
{
  t_Pneumatics
  {
    system_pressure         { START_SYSTEM_PRESSURE;  };
    stilt_left_pressure     { START_SYSTEM_PRESSURE; };
    stilt_right_pressure    { START_SYSTEM_PRESSURE; };
  };
};

typedef
{
  t_Control
  {
    ANTRIEB_MODE            { DRIVE_OPERATIONAL_MODE_STOP; };
    ANTRIEB_ENABLE_IN       { 0;  };
    ANTRIEB_BREAK_RELEASE   { 0;  };
    ANTRIEB_RESET_FAULT     { 0;  }; 
    ANTRIEB_CALIBRATE_POS   { 0;  };
    ANTRIEB_REMOTE_OUTPUT   { 0;  };
    ANTRIEB_MODE_DEFAULT    { DRIVE_OPERATIONAL_MODE_STOP;  };
  };
};

typedef
{
  t_Status
  {
    ANTRIEB_READY               { 0;  };
    ANTRIEB_ENABLE_OUT          { 0;  };
    ANTRIEB_INPOS               { 0;  };
    ANTRIEB_LIMIT_SWITCH_CW     { 0;  };
    ANTRIEB_LIMIT_SWITCH_CCW    { 0;  };
    ANTRIEB_BREAK_RELEASED      { 0;  };
    ANTRIEB_REMOTE_OUTPUT_STATUS{ 0;  };
    ANTRIEB_FAULT               { 0;  };
  };
};

// --------------------------------------------
// ------------------ Z ANTRIEB ---------------
typedef
{
  t_Z_drive
  {
    //  Limits
    MIN_POS                 { 0; };
    MAX_POS                 { 3280; };
    MAST_INDEXPOSITION      { 1050; };
    MAST_ZURRPOSITION       { 0; };
    MAST_MINHOEHE           { 800; };
    POSITION_TOLERANCE      { 0.3; };
    SPEED_MAX               { 255; };
    SPEED_DEFAULT           { 100; };

    //  (Mess-)Werte vom Antrieb (CAN)
    CanIstPos               { 0; };
    CanIstGeschw            { 0; };
    CanIstStrom             { 0; };
    Status                  { 0; };

    //  berechnete (Mess-)Werte vom Antrieb
    IstPos                  { 0.0; }; //  IstMasthoehe
    IstGeschw               { 0.0; };
    IstStrom                { 0.0; };

    //  Vorgaben  zum Antrieb (CAN)
    CanSollPos              { 0; };
    CanSollGeschw           { 0; };
    CanSollStrom            { 0; };
    Control                 { 0; };

    //  berechnete Vorgaben  zum Antrieb
    SollPos                 { 0; };
    SollGeschw              { 0; };
    SollStrom               { 0; };
    SollGeschwAbsolut       { 40; };
  };
};

// --------------------------------------------
// ------------------ Y ANTRIEB ---------------
typedef
{
  t_Y_drive
  {
    //  Limits
    MIN_POS                 { 0.0; };
    MAX_POS                 { 98.5; };
    INDEXPOSITION           { 0.0; };
    ARBEITSPOSITION         { 90.0; };
    ARBEITSBEREICH_MIN      {-8.0; };
    ARBEITSBEREICH_MAX      { 8.0; };
    SPEED_MAX               { 255; };
    SPEED_DEFAULT           { 40; };
    ANGLE_TOLERANCE         { 0.3; };
    TOLERANZ_HORIZONTIERUNG { 0.2; };

    //  (Mess-)Werte vom Antrieb (CAN)
    CanIstPos               { 0; };
    CanIstGeschw            { 0; };
    CanIstStrom             { 0; };
    Status                  { 0; };

    //  berechnete (Mess-)Werte vom Antrieb
    IstPos                  { 0.0; }; //  IstWinkel
    IstGeschw               { 0.0; };
    IstStrom                { 0.0; };

    //  Vorgaben  zum Antrieb (CAN)
    CanSollPos              { 0; };
    CanSollGeschw           { 0; };
    CanSollStrom            { 0; };
    Control                 { 0; };

    //  berechnete Vorgaben  zum Antrieb
    SollPos                 { 0.0; };
    SollGeschw              { 0.0; };
    SollStrom               { 0.0; };
  };
};


// --------------------------------------------
// ------------------ X ANTRIEB ---------------
typedef
{
  t_X_drive
  {
    //  Limits
    MIN_POS                 {-8.5; };
    MAX_POS                 { 8.5; };
    INDEXPOSITION           { 0.0; };
    ARBEITSBEREICH_MIN      {-8.0; };
    ARBEITSBEREICH_MAX      { 8.0; };
    SPEED_MAX               { 255; };
    SPEED_DEFAULT           { 40; };
    ANGLE_TOLERANCE         { 0.1; };
    TOLERANZ_HORIZONTIERUNG { 0.2; };

    //  (Mess-)Werte vom Antrieb (CAN)
    CanIstPos               { 0; };
    CanIstGeschw            { 0; };
    CanIstStrom             { 0; };
    Status                  { 0; };

    //  berechnete (Mess-)Werte vom Antrieb
    IstPos                  { 0.0; }; //  IstWinkel
    IstGeschw               { 0.0; };
    IstStrom                { 0.0; };

    //  Vorgaben  zum Antrieb (CAN)
    CanSollPos              { 0; };
    CanSollGeschw           { 0; };
    CanSollStrom            { 0; };
    Control                 { 0; };

    //  berechnete Vorgaben  zum Antrieb
    SollPos                 { 0.0; };
    SollGeschw              { 0.0; };
    SollStrom               { 0.0; };
  };
};


// --------------------------------------------
// ----------- HECKVERTEILER DATA -------------
typedef
{
  t_heckverteiler_data
  {
      current_radar         {0;};   // [A]
      current_drives        {0;};   // [A]
      current_pneumatic     {0;};   // [A]
      current_others        {0;};   // [A]
      wind_gueltig          {0;};   // 1 / 0
      wind_speed            {0;};   // [Bft]
  };
};

// --------------------------------------------
// -------------- VEHICLE DATA ----------------
typedef
{
  t_vehicle_data
  {
    Speed               {0.0;};
    angle_x             {0.0;};
    angle_y             {0.0;};
    Gear                {-1;};
    Brake               {-1;};
    Engine_rpm          {0;};
    Ambient_Temperature {0.0;};
    tension_bordnet     {0.0;};  // [0.1 V]
  };
};

// levelling out (Horizontieren)
typedef
{
  t_Talin_data
  {
    isValid         {1;};
    axis_x          {0.0;};
    axis_x_previous {0.0;};
    axis_y          {0.0;};
    axis_y_previous {0.0;};
  };
};

// --------------------------------------------
// ------------------ IVENET ------------------
typedef
{
  t_ivenet_own_vehicle_position
  {
    isValid_in {0;};
    isValid_out{0;};
    coordinate ;
  };
};

typedef
{
  t_ivenet_coordinate
  {
    latitude          {0.0;}; // {-90.0;  +90.0 }
    longitude         {0.0;}; // {-180.0; +180.0}
    altitude          {-999;};// {-999;   +99999}, -999 being 'invalid'
  };
};

typedef
{
  t_ivenet_own_vehicle_alignment
  {
    isValid_in        {0;};
    hasChanged        {0;};
    azimuth_current   {0;};     // {0;       35999}
    azimuth_previous  {0;};     // {0;       35999}
  };
};

typedef
{
  t_ivenet_mast_state
  {
    isValid_in  { 1;  };
    isValid_out { 1;  };
    value_in    { IVENET_MAST_IS_LOCKED_NAVIGATION_MODE;  };
    value_out   { IVENET_MAST_IS_LOCKED_NAVIGATION_MODE;  };
  };
};

typedef
{
  t_ivenet_platform_alignment_state
  {
    isValid_out { 1;  };
    value       { IVENET_PLATFORM_IS_NOT_ALIGNED; };
  };
};

typedef
{
  t_ivenet_radar_enabled_state
  {
    isValid_out           {1;}; // [Boolean]
    isRadarWorkingEnabled {0;}; // [Boolean]
  };
};

typedef
{
  t_ivenet_radar_parkposition_request_state
  {
    isValid_out           {1;}; // [Boolean]
    isRequestActive       {0;}; // [Boolean]
  };
};

typedef
{
  t_ivenet_radar_position_state
  {
    isValid_in            {0;};
    isRadarInParkposition {0;}; // [Boolean]
  };
};

// --------------------------------------------
// ----------------- STATES -------------------
// --------------------------------------------
Systemstate x_drive, y_drive, z_drive;

// --------------------------------------------
// ---------------- ANTENNA -------------------
Systemstate SENSOR_VZ1V;  //  VerzurrungAntenneVerriegelt
Systemstate SENSOR_VZ1O;  //  VerzurrungAntenneOffen
Systemstate SENSOR_IN_PARKPOS;
Systemstate EVAL_ANTENNA_IS_IN_PARKPOS;

Systemstate EVAL_ANTENNA_IS_LEVELLED_OUT;
Systemstate ANTENNA_ALIGNMENT_STATUS;

// --------------------------------------------
// ------------------ FLAP --------------------
Systemstate SENSOR_HZG;   //  HaubeRiegelGeschlossen
Systemstate SENSOR_HZO;   //  HaubeRiegelOffen
Systemstate SENSOR_HR1O;  //  HaubeRiegel1_Offen
Systemstate SENSOR_HR1V;  //  HaubeRiegel1_Verriegelt
Systemstate SENSOR_HR2O;  //  HaubeRiegel2_Offen
Systemstate SENSOR_HR2V;  //  HaubeRiegel2_Verriegelt

// --------------------------------------------
// -------------- X ANTRIEB -------------------
Systemstate SENSOR_IP_X;

// --------------------------------------------
// -------------- Y ANTRIEB -------------------
Systemstate SENSOR_IP_Y;
Systemstate SENSOR_AB_Y;  //  Arbeitsbereich_Y_drive
Systemstate EVAL_AB_Y;

// --------------------------------------------
// -------------- Z ANTRIEB -------------------
Systemstate SENSOR_EO_Z;
Systemstate SENSOR_EU_Z;
Systemstate SENSOR_ENABLE_Z;
Systemstate SENSOR_UB_Z;
Systemstate SENSOR_IP_Z;
Systemstate SOLL_POS;
Systemstate MAST_STATUS;

// --------------------------------------------
// ------ VEHICLE, HECKVERTEILER, TALIN -------
Systemstate Vehicle;
Systemstate Heckverteiler_state;
Systemstate Talin_state;

// --------------------------------------------
// ----------------- SYSTEM -------------------
Systemstate Pneumatics;
Systemstate Betriebsmodus;
Systemstate PSM_IS_OPERATIONAL;
Systemstate SENSOR_KAMPFSCHALTER_A;
Systemstate TASTE_A_ABBRUCH;
Systemstate TASTE_E_ABBRUCH;
Systemstate TASTE_NOT_AUS;
Systemstate STILTS_ARE_CHECKED;
Systemstate is_system_time_to_be_set;

// --------------------------------------------
// ---------- FUNKTIONSUEBERWACHUNG -----------
Systemstate s_bag_heartbeat_payload;
Systemstate s_io_module_heartbeat_payload;
Systemstate s_si_module_heartbeat_payload;
Systemstate s_x_drive_heartbeat_payload;
Systemstate s_y_drive_heartbeat_payload;
Systemstate s_z_drive_heartbeat_payload;
Systemstate s_usv1_heartbeat_payload;
Systemstate s_usv2_heartbeat_payload;
Systemstate s_extbg_heartbeat_payload;

// --------------------------------------------
// --------------- STUETZEN -------------------
// SEK{O;G}{L;R} = StÃ¼tzen Endschalter Offen/Geschlossen, Links/Rechts
Systemstate SENSOR_SEKOL; //  StÃ¼tzeEndlageKlemmungOffenLinks
Systemstate SENSOR_SEKGL; //  StÃ¼tzeEndlageKlemmungGeschlossenLinks
Systemstate SENSOR_SEKOR; //  StÃ¼tzeEndlageKlemmungOffenRechts
Systemstate SENSOR_SEKGR; //  StÃ¼tzeEndlageKlemmungGeschlossenRechts

// SM{U;O}{L;R} = StÃ¼tzen Magnet Unten/Oben, Links/Rechts
Systemstate SENSOR_SMUL;  //  StÃ¼tzenMagnetUntenLinks
Systemstate SENSOR_SMOL;  //  StÃ¼tzenMagnetObenLinks
Systemstate SENSOR_SMUR;  //  StÃ¼tzenMagnetUntenRechts
Systemstate SENSOR_SMOR;  //  StÃ¼tzenMagnetObenRechts


// --------------------------------------------
// ------------------ EXTBG -------------------
Systemstate extbg_is_online;
Systemstate extbg_error_0;
Systemstate extbg_error_1;
Systemstate extbg_error_2;
Systemstate extbg_error_3;
Systemstate extbg_error_4;
Systemstate extbg_error_counter;

Systemstate NO_ERROR;
Systemstate ERROR_ID;

Systemstate X_DRIVE_COMMUNICATION_INCIDENT;
Systemstate Y_DRIVE_COMMUNICATION_INCIDENT;
Systemstate Z_DRIVE_COMMUNICATION_INCIDENT;
Systemstate IVENET_COMMUNICATION_INCIDENT;
Systemstate HV_COMMUNICATION_INCIDENT;

// --------------------------------------------
// ----------------- IVENET -------------------
Systemstate ivenet_own_vehicle_position;
Systemstate ivenet_own_vehicle_alignment;
Systemstate ivenet_mast_state;
Systemstate ivenet_platform_alignment_state;
Systemstate ivenet_radar_enabled_state;
Systemstate ivenet_radar_parkposition_request_state;
Systemstate ivenet_radar_position_state;
Systemstate ivenet_time_source_out;
Systemstate ivenet_time_source_in;


// --------------------------------------------
// ----------------- GLOBALS ------------------
Globals
{
// --------------------------------------------
// ---------------- ANTRIEBE ------------------
  SENSOR_IP_X = DEF_SYS_INIT_INT_0;

  SENSOR_IP_Y = DEF_SYS_INIT_INT_0;
  SENSOR_AB_Y = DEF_SYS_INIT_INT_0; //  Arbeitsbereich_Y_drive
  EVAL_AB_Y   = DEF_SYS_INIT_INT_0;

  SENSOR_IP_Z = DEF_SYS_INIT_INT_0;
  SENSOR_EO_Z = DEF_SYS_INIT_INT_0;
  SENSOR_EU_Z = DEF_SYS_INIT_INT_0;
  SENSOR_UB_Z = DEF_SYS_INIT_INT_0;

  SOLL_POS    = DEF_SYS_INIT_INT_0;
  MAST_STATUS = DEF_SYS_INIT_INT_0;

  x_drive = t_X_drive;
  y_drive = t_Y_drive;
  z_drive = t_Z_drive;

  x_drive.Control = t_Control;
  y_drive.Control = t_Control;
  z_drive.Control = t_Control;

  x_drive.Status  = t_Status;
  y_drive.Status  = t_Status;
  z_drive.Status  = t_Status;

// --------------------------------------------
// ---------- FUNKTIONSUEBERWACHUNG -----------
  s_bag_heartbeat_payload       = -1;
  s_io_module_heartbeat_payload = -1;
  s_si_module_heartbeat_payload = -1;
  s_x_drive_heartbeat_payload   = -1;
  s_y_drive_heartbeat_payload   = -1;
  s_z_drive_heartbeat_payload   = -1;
  s_usv1_heartbeat_payload      = -1;
  s_usv2_heartbeat_payload      = -1;
  s_extbg_heartbeat_payload     = -1;

// --------------------------------------------
// ------------------ EXTBG -------------------
  extbg_is_online       = DEF_SYS_INIT_INT_0;
  NO_ERROR              = 0xFF;
  ERROR_ID              = NO_ERROR;
  extbg_error_0         = NO_ERROR;
  extbg_error_1         = NO_ERROR;
  extbg_error_2         = NO_ERROR;
  extbg_error_3         = NO_ERROR;
  extbg_error_4         = NO_ERROR;
  extbg_error_counter   = DEF_SYS_INIT_INT_0;

  X_DRIVE_COMMUNICATION_INCIDENT = 0;
  Y_DRIVE_COMMUNICATION_INCIDENT = 0;
  Z_DRIVE_COMMUNICATION_INCIDENT = 0;
   IVENET_COMMUNICATION_INCIDENT = 0;
       HV_COMMUNICATION_INCIDENT = 0;

// --------------------------------------------
// ------------------- FLAP -------------------
  SENSOR_HR1O = DEF_SYS_INIT_INT_0;
  SENSOR_HR1V = DEF_SYS_INIT_INT_0;
  SENSOR_HR2O = DEF_SYS_INIT_INT_0;
  SENSOR_HR2V = DEF_SYS_INIT_INT_0;

  SENSOR_HZO  = DEF_SYS_INIT_INT_0;
  SENSOR_HZG  = DEF_SYS_INIT_INT_0;

// --------------------------------------------
// ------ VEHICLE, HECKVERTEILER, TALIN -------
  Vehicle                = t_vehicle_data;
  Talin_state            = t_Talin_data;
  Heckverteiler_state    = t_heckverteiler_data;

// --------------------------------------------
// ----------------- SYSTEM -------------------
  Pneumatics               = t_Pneumatics;  
  Betriebsmodus            = MODUS_AUTOMATIKBETRIEB;
  PSM_IS_OPERATIONAL       = DEF_SYS_INIT_INT_0;
  SENSOR_KAMPFSCHALTER_A   = DEF_SYS_INIT_INT_0;
  TASTE_A_ABBRUCH          = DEF_SYS_INIT_INT_0;
  TASTE_E_ABBRUCH          = DEF_SYS_INIT_INT_0;
  TASTE_NOT_AUS            = DEF_SYS_INIT_INT_0;
  STILTS_ARE_CHECKED       = DEF_SYS_INIT_INT_1;
  is_system_time_to_be_set = DEF_SYS_INIT_INT_1;

// --------------------------------------------
// --------------- STUETZEN -------------------
  SENSOR_SEKOL = DEF_SYS_INIT_INT_0; //  StÃ¼tzeEndlageKlemmungOffenLinks
  SENSOR_SEKOR = DEF_SYS_INIT_INT_0; //  StÃ¼tzeEndlageKlemmungOffenRechts
  SENSOR_SEKGL = DEF_SYS_INIT_INT_1; //  StÃ¼tzeEndlageKlemmungGeschlossenLinks
  SENSOR_SEKGR = DEF_SYS_INIT_INT_1; //  StÃ¼tzeEndlageKlemmungGeschlossenRechts

  SENSOR_SMUL  = DEF_SYS_INIT_INT_0; //  StÃ¼tzenMagnetUntenLinks
  SENSOR_SMOL  = DEF_SYS_INIT_INT_0; //  StÃ¼tzenMagnetObenLinks
  SENSOR_SMUR  = DEF_SYS_INIT_INT_0; //  StÃ¼tzenMagnetUntenRechts
  SENSOR_SMOR  = DEF_SYS_INIT_INT_0; //  StÃ¼tzenMagnetObenRechts

// --------------------------------------------
// ---------------- ANTENNA -------------------
  SENSOR_VZ1V                  = DEF_SYS_INIT_INT_0;  //  VerzurrungAntenneVerriegelt
  SENSOR_VZ1O                  = DEF_SYS_INIT_INT_0;  //  VerzurrungAntenneOffen
  SENSOR_IN_PARKPOS            = DEF_SYS_INIT_INT_1;
  EVAL_ANTENNA_IS_IN_PARKPOS   = DEF_SYS_INIT_INT_1;
  EVAL_ANTENNA_IS_LEVELLED_OUT = DEF_SYS_INIT_INT_0;
  ANTENNA_ALIGNMENT_STATUS     = DEF_SYS_INIT_INT_0;

// --------------------------------------------
// ----------------- IVENET -------------------
  ivenet_own_vehicle_position             = t_ivenet_own_vehicle_position;
  ivenet_own_vehicle_position.coordinate  = t_ivenet_coordinate;
  ivenet_own_vehicle_alignment            = t_ivenet_own_vehicle_alignment;
  ivenet_mast_state                       = t_ivenet_mast_state;
  ivenet_platform_alignment_state         = t_ivenet_platform_alignment_state;
  ivenet_radar_enabled_state              = t_ivenet_radar_enabled_state;
  ivenet_radar_parkposition_request_state = t_ivenet_radar_parkposition_request_state;
  ivenet_radar_position_state             = t_ivenet_radar_position_state;


// --------------------------------------------
// -------------- SYSTEM GUARDS ---------------
  g_psm_is_operational             = PSM_IS_OPERATIONAL;
  g_extBG_is_online                = extbg_is_online;
  g_extbg_payload_is_preop         = (s_extbg_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD);
  g_extbg_payload_is_op            = (s_extbg_heartbeat_payload ==     OPERATIONAL_PAYLOAD);
  g_is_NotAus_active               = TASTE_NOT_AUS;
  g_is_Taste_A_Abbruch_active      = TASTE_A_ABBRUCH;
  g_is_Taste_E_Abbruch_active      = TASTE_E_ABBRUCH;
  g_kampfschalter_is_active        = SENSOR_KAMPFSCHALTER_A;
  g_kampfschalter_was_active       = DEF_SYS_INIT_INT_0;

  g_system_pressure_is_sufficient  = Pneumatics.system_pressure >= MINIMUM_SYSTEM_PRESSURE; 
  g_platform_extend_preconditions  = z_drive.IstPos <  z_drive.MAST_INDEXPOSITION;   //g_kampfschalter_is_active || (!g_is_NotAus_active && g_vehicle_does_not_drive && g_vehicle_gear_is_neutral && g_vehicle_brake_is_active && g_system_pressure_is_sufficient);
  g_platform_retract_preconditions = z_drive.IstPos >= (z_drive.MAST_ZURRPOSITION + 5);//g_kampfschalter_is_active || (!g_is_NotAus_active && g_vehicle_does_not_drive && g_vehicle_gear_is_neutral && g_vehicle_brake_is_active && g_system_pressure_is_sufficient);

  g_system_extend_with_stilts      = STILTS_ARE_CHECKED;

// --------------------------------------------
// ------------- VEHICLE GUARDS ---------------
  g_vehicle_does_not_drive              = (Vehicle.Speed == 0.0);
  g_vehicle_gear_is_neutral             = Vehicle.Gear  == GEAR_IS_DC_NEUTRAL;
  g_vehicle_brake_is_active             = Vehicle.Brake == BRAKE_IS_ACTIVE;
  g_vehicle_inclination_x_is_tolerable  = Vehicle.angle_x <= 8.0;
  g_vehicle_inclination_y_is_tolerable  = Vehicle.angle_y <= 8.0;
  g_mast_operations_are_reasonable      =   g_vehicle_inclination_x_is_tolerable 
                                        &&  g_vehicle_inclination_y_is_tolerable 
                                        &&  g_vehicle_gear_is_neutral 
                                        &&  g_vehicle_brake_is_active 
                                        &&  g_psm_is_operational;

  g_mast_operations_are_possible        =   g_x_drive_is_online 
                                        &&  g_y_drive_is_online 
                                        &&  g_z_drive_is_online;

  g_vehicle_slide_preconditions         = ( ( abs ( ivenet_own_vehicle_alignment.azimuth_previous   - ivenet_own_vehicle_alignment.azimuth_current  ) > 28  )
                                        ||  ( abs ( Talin_state.axis_x_previous                     - Talin_state.axis_x  )                           > 0.3 )
                                        ||  ( abs ( Talin_state.axis_y_previous                     - Talin_state.axis_y  )                           > 0.3 )
                                          );

// --------------------------------------------
// ---------------- FLAP GUARDS ---------------
  g_flap_is_open                        =   SENSOR_HZO &&  !SENSOR_HZG;
  g_flap_is_closed                      =  !SENSOR_HZO &&   SENSOR_HZG;
  g_flap_is_neither_nor                 =  !SENSOR_HZO &&  !SENSOR_HZG;
  g_flap_is_wrong                       =   SENSOR_HZO &&   SENSOR_HZG;

  g_flap_lock_one_is_unlocked           =  SENSOR_HR1O && !SENSOR_HR1V;
  g_flap_lock_one_is_locked             = !SENSOR_HR1O &&  SENSOR_HR1V;
  g_flap_lock_two_is_unlocked           =  SENSOR_HR2O && !SENSOR_HR2V;
  g_flap_lock_two_is_locked             = !SENSOR_HR2O &&  SENSOR_HR2V;
  g_flap_is_locked                      =  g_flap_lock_one_is_locked   && g_flap_lock_two_is_locked;
  g_flap_is_unlocked                    =  g_flap_lock_one_is_unlocked && g_flap_lock_two_is_unlocked;

  g_flap_open_preconditions             = g_kampfschalter_is_active ||  ( g_flap_is_unlocked && g_system_pressure_is_sufficient && g_mast_is_not_blocking_flap );
  g_flap_to_close_preconditions         = g_kampfschalter_is_active ||  ( g_system_pressure_is_sufficient && g_mast_is_not_blocking_flap );

  g_flap_unlock_preconditions           = g_kampfschalter_is_active ||  g_system_pressure_is_sufficient;

  g_flap_close_preconditions            = g_kampfschalter_is_active ||  ( g_flap_is_unlocked && g_system_pressure_is_sufficient && g_mast_is_not_blocking_flap );

  g_flap_to_open_preconditions          = g_kampfschalter_is_active ||  ( g_system_pressure_is_sufficient &&  g_mast_is_not_blocking_flap );

// --------------------------------------------
// --------------- DRIVE GUARDS ---------------
  g_x_drive_is_online                   = 0;
  g_x_drive_payload_is_preop            = ( s_x_drive_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_x_drive_payload_is_op               = ( s_x_drive_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_x_drive_has_antrieb_fault           = x_drive.Status.ANTRIEB_FAULT;
  g_x_drive_is_in_indexposition         = SENSOR_IP_X ||  ( ( x_drive.IstPos >=  x_drive.INDEXPOSITION - x_drive.ANGLE_TOLERANCE )
                                                        &&  ( x_drive.IstPos <=  x_drive.INDEXPOSITION + x_drive.ANGLE_TOLERANCE )
                                                          );
  g_x_drive_is_in_target_position       =   ( x_drive.IstPos <=  ( x_drive.SollPos + x_drive.ANGLE_TOLERANCE  ) ) 
                                        &&  ( x_drive.IstPos >=  ( x_drive.SollPos - x_drive.ANGLE_TOLERANCE  ) );
  g_x_drive_is_moving_up                =     x_drive.IstPos < ( x_drive.SollPos - x_drive.ANGLE_TOLERANCE );
  g_x_drive_is_moving_down              =     x_drive.IstPos > ( x_drive.SollPos + x_drive.ANGLE_TOLERANCE );
  g_x_drive_is_not_moving               = !g_x_drive_is_moving_up && !g_x_drive_is_moving_down;

  g_y_drive_is_online                   = 0;
  g_y_drive_payload_is_preop            = ( s_y_drive_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_y_drive_payload_is_op               = ( s_y_drive_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_y_drive_has_antrieb_fault           = y_drive.Status.ANTRIEB_FAULT;
  g_y_drive_is_in_target_position       =   ( y_drive.IstPos <= y_drive.SollPos + y_drive.ANGLE_TOLERANCE  )
                                        &&  ( y_drive.IstPos >= y_drive.SollPos - y_drive.ANGLE_TOLERANCE  );
  g_y_drive_is_in_arbeitsbereich        = SENSOR_AB_Y;
  g_y_drive_is_in_arbeitsposition       = ( ( y_drive.IstPos >=  y_drive.ARBEITSPOSITION - y_drive.ANGLE_TOLERANCE )
                                        &&  ( y_drive.IstPos <=  y_drive.ARBEITSPOSITION + y_drive.ANGLE_TOLERANCE )
                                          );
  g_y_drive_is_in_indexposition         = SENSOR_IP_Y ||  ( ( y_drive.IstPos >=  y_drive.INDEXPOSITION - y_drive.ANGLE_TOLERANCE )
                                                        &&  ( y_drive.IstPos <=  y_drive.INDEXPOSITION + y_drive.ANGLE_TOLERANCE )
                                                          );
  g_y_drive_is_moving_up                = y_drive.IstPos < ( y_drive.SollPos - y_drive.ANGLE_TOLERANCE );
  g_y_drive_is_moving_down              = y_drive.IstPos > ( y_drive.SollPos + y_drive.ANGLE_TOLERANCE );
  g_y_drive_is_not_moving               = !g_y_drive_is_moving_up && !g_y_drive_is_moving_down;
  g_y_drive_preconditions_to_move_to_arbeitsposition = !g_y_drive_is_in_arbeitsbereich && g_z_drive_is_in_indexposition;

  g_z_drive_is_online                   = 0;
  g_z_drive_payload_is_preop            = ( s_z_drive_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_z_drive_payload_is_op               = ( s_z_drive_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_z_drive_has_antrieb_fault           = z_drive.Status.ANTRIEB_FAULT;
  g_z_drive_is_in_indexposition         = SENSOR_IP_Z;
  g_z_drive_is_in_target_position       =   ( z_drive.IstPos <= z_drive.SollPos + z_drive.POSITION_TOLERANCE )
                                        &&  ( z_drive.IstPos >= z_drive.SollPos - z_drive.POSITION_TOLERANCE );
  g_mast_move_up_preconditions          =   ( z_drive.IstPos >= z_drive.MAST_MINHOEHE ) || g_flap_is_open;
  g_mast_move_down_preconditions        = g_mast_move_up_preconditions;
  g_z_drive_to_target_position_preconditions  = (   g_flap_is_closed 
                                                &&  ( z_drive.SollPos <= z_drive.MAX_POS  )
                                                &&  ( z_drive.SollPos >= z_drive.MAST_MINHOEHE  )
                                                &&  ( y_drive.IstPos >= 77.0 )
                                                &&  ( z_drive.IstPos <= 3310  )
                                                &&  ( z_drive.IstPos >= z_drive.MAST_MINHOEHE )
                                                );
  g_z_drive_is_moving_up                = z_drive.IstPos  < ( z_drive.IstPos - z_drive.POSITION_TOLERANCE );
  g_z_drive_is_moving_down              = z_drive.IstPos  > ( z_drive.IstPos + z_drive.POSITION_TOLERANCE );
  g_z_drive_is_not_moving               = !g_z_drive_is_moving_up && !g_z_drive_is_moving_down;

  g_mast_height_is_lt_max_position      = (!SENSOR_EO_Z) || ( z_drive.IstPos <  z_drive.MAX_POS );
  g_mast_height_is_ge_max_position      =   SENSOR_EO_Z  || ( z_drive.IstPos >= z_drive.MAX_POS );

  g_mast_height_is_gt_min_position      = (!SENSOR_EU_Z) || ( z_drive.IstPos >  0.0 );
  g_mast_height_is_le_min_position      =   SENSOR_EU_Z  || ( z_drive.IstPos <= 0.0 );

  g_mast_height_is_ge_indexposition     = ( z_drive.IstPos  >=  ( z_drive.MAST_INDEXPOSITION - 1 ) );
  g_mast_height_is_lt_indexposition     = ( z_drive.IstPos  <   ( z_drive.MAST_INDEXPOSITION - 1 ) );

  g_mast_height_ge_lower_working_position = SENSOR_UB_Z;

  g_mast_is_not_blocking_flap           = ( ( z_drive.IstPos  <= z_drive.MAST_ZURRPOSITION + 5 ) || ( g_y_drive_is_in_arbeitsbereich && g_z_drive_is_in_indexposition ) );
  g_z_drive_is_in_lashing_position      =     z_drive.IstPos  <= z_drive.MAST_ZURRPOSITION;

  g_z_drive_is_enabled                  = z_drive.Status.ANTRIEB_ENABLE_OUT;
// --------------------------------------------
// ------------- ANTENNA GUARDS ---------------
  g_ivenet_sees_antenna_in_parkpos        =  ( ivenet_radar_position_state.isValid_in > 0 ) && ( ivenet_radar_position_state.isRadarInParkposition > 0 );
  g_io_module_sees_antenna_in_parkpos     =  SENSOR_IN_PARKPOS;
  g_antenna_is_in_parking_position        =  EVAL_ANTENNA_IS_IN_PARKPOS;
  g_antenna_lashing_is_locked             = !SENSOR_VZ1O &&  SENSOR_VZ1V; // !VerzurrungAntenneOffen  &&  VerzurrungAntenneVerriegelt
  g_antenna_lashing_is_unlocked           =  SENSOR_VZ1O && !SENSOR_VZ1V; //  VerzurrungAntenneOffen  && !VerzurrungAntenneVerriegelt
  g_antenna_lashing_is_neither_nor        = !SENSOR_VZ1O && !SENSOR_VZ1V; // !VerzurrungAntenneOffen  && !VerzurrungAntenneVerriegelt
  g_antenna_lashing_is_wrong              =  SENSOR_VZ1O &&  SENSOR_VZ1V; //  VerzurrungAntenneOffen  &&  VerzurrungAntenneVerriegelt

  g_antenna_is_hinged_down                = g_y_drive_is_in_indexposition;
  g_antenna_to_hinge_down_preconditions   = g_kampfschalter_is_active || ( g_z_drive_is_in_indexposition && g_flap_is_open );

  g_antenna_to_rise_preconditions         = g_kampfschalter_is_active || g_z_drive_is_in_indexposition;

  g_antenna_lashing_unlock_preconditions  = g_kampfschalter_is_active ||  g_system_pressure_is_sufficient;
  g_antenna_lashing_lock_preconditions    = g_kampfschalter_is_active || ( g_system_pressure_is_sufficient && !g_is_NotAus_active );

  g_x_drive_is_in_range                   = abs ( x_drive.IstPos ) <= x_drive.ARBEITSBEREICH_MAX;
  g_x_drive_is_levelled_out               = abs ( Talin_state.axis_x ) <= x_drive.TOLERANZ_HORIZONTIERUNG;
  g_x_drive_levelling_out_was_successful  = abs ( x_drive.IstPos - x_drive.SollPos ) <= 0.5;
  g_y_drive_is_levelled_out               = abs ( Talin_state.axis_y ) <= y_drive.TOLERANZ_HORIZONTIERUNG;
  g_y_drive_levelling_out_was_successful  = abs ( y_drive.IstPos - y_drive.SollPos ) <= 0.5;
  g_antenna_is_levelled_out               = g_x_drive_is_levelled_out && g_y_drive_is_levelled_out;

  g_antenna_x_correction_is_possible      = abs ( x_drive.IstPos + Talin_state.axis_x ) <= x_drive.ARBEITSBEREICH_MAX;
  g_antenna_y_correction_is_possible      =   ( ( y_drive.IstPos + Talin_state.axis_y ) <= ( y_drive.ARBEITSPOSITION + y_drive.ARBEITSBEREICH_MAX ) )
                                          &&  ( ( y_drive.IstPos + Talin_state.axis_y ) >= ( y_drive.ARBEITSPOSITION + y_drive.ARBEITSBEREICH_MIN ) );
  g_antenna_correction_is_possible        = g_antenna_x_correction_is_possible && g_antenna_y_correction_is_possible;

// --------------------------------------------
// -------------- STILTS GUARDS ---------------
  g_stilt_left_is_locked                = !SENSOR_SEKOL &&  SENSOR_SEKGL; //  !StÃ¼tzeEndlageKlemmungOffenLinks  &&  StÃ¼tzeEndlageKlemmungGeschlossenLinks
  g_stilt_right_is_locked               = !SENSOR_SEKOR &&  SENSOR_SEKGR; //  !StÃ¼tzeEndlageKlemmungOffenRechts &&  StÃ¼tzeEndlageKlemmungGeschlossenRechts
  g_stilt_any_is_locked                 = g_stilt_left_is_locked   || g_stilt_right_is_locked;
  g_stilts_all_are_locked               = g_stilt_left_is_locked   && g_stilt_right_is_locked;

  g_stilt_left_is_unlocked              = SENSOR_SEKOL  && !SENSOR_SEKGL; //  StÃ¼tzeEndlageKlemmungOffenLinks   && !StÃ¼tzeEndlageKlemmungGeschlossenLinks
  g_stilt_right_is_unlocked             = SENSOR_SEKOR  && !SENSOR_SEKGR; //  StÃ¼tzeEndlageKlemmungOffenRechts  && !StÃ¼tzeEndlageKlemmungGeschlossenRechts
  g_stilt_any_is_unlocked               = g_stilt_left_is_unlocked || g_stilt_right_is_unlocked;
  g_stilts_all_are_unlocked             = g_stilt_left_is_unlocked && g_stilt_right_is_unlocked;

  g_stilt_left_is_extended              =  SENSOR_SMUL; //  StÃ¼tzenMagnetUntenLinks
  g_stilt_right_is_extended             =  SENSOR_SMUR; //  StÃ¼tzenMagnetUntenRechts
  g_stilt_any_is_extended               = g_stilt_left_is_extended  ||  g_stilt_right_is_extended;

  g_stilt_left_is_retracted             =  SENSOR_SMOL; //  StÃ¼tzenMagnetObenLinks
  g_stilt_right_is_retracted            =  SENSOR_SMOR; //  StÃ¼tzenMagnetObenRechts
  g_stilts_all_are_retracted            = g_stilt_left_is_retracted &&  g_stilt_right_is_retracted;

  g_stilt_left_is_neither_nor           = !SENSOR_SMOL  && !SENSOR_SMUL;  // !StÃ¼tzenMagnetObenLinks  && !StÃ¼tzenMagnetUntenLinks
  g_stilt_right_is_neither_nor          = !SENSOR_SMOR  && !SENSOR_SMUR;  // !StÃ¼tzenMagnetObenRechts && !StÃ¼tzenMagnetUntenRechts

  g_stilt_left_has_ground_contact       = !SENSOR_SMOL && ( Pneumatics.stilt_left_pressure  <= STILT_PRESSURE_GROUND_CONTACT );
  g_stilt_right_has_ground_contact      = !SENSOR_SMOR && ( Pneumatics.stilt_right_pressure <= STILT_PRESSURE_GROUND_CONTACT );
  g_stilts_all_have_ground_contact      = g_stilt_left_has_ground_contact && g_stilt_right_has_ground_contact;


  g_is_NotAus_or_Abbruch                = g_is_NotAus_active || g_is_Abbruch_active;

  g_stilts_unlock_preconditions         = g_kampfschalter_is_active || g_system_pressure_is_sufficient;
  g_stilts_to_retract_preconditions     = g_kampfschalter_is_active || g_system_pressure_is_sufficient;

// --------------------------------------------
// -------- DUST DISCHARGE GUARDS -------------
  g_dust_discharge_is_ready             = 1; // arki: todo ??? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< !!!!!!!!!!!!!!!!!!!!
  g_dust_discharge_preconditions        = g_kampfschalter_is_active || ( g_system_pressure_is_sufficient && g_dust_discharge_is_ready );

// --------------------------------------------
// --------------- USV GUARDS -----------------
  g_usv1_payload_is_preop               = ( s_usv1_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_usv1_payload_is_op                  = ( s_usv1_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_usv1_is_online                      = 0;

  g_usv2_payload_is_preop               = ( s_usv2_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_usv2_payload_is_op                  = ( s_usv2_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_usv2_is_online                      = 0;

// --------------------------------------------
// ------- FUNKTIONSUEBERWACHUNG GUARDS -------
  g_io_module_payload_is_preop          = ( s_io_module_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_io_module_payload_is_op             = ( s_io_module_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_io_module_is_online                 = 0;

  g_si_module_payload_is_preop          = ( s_si_module_heartbeat_payload == PRE_OPERATIONAL_PAYLOAD );
  g_si_module_payload_is_op             = ( s_si_module_heartbeat_payload ==     OPERATIONAL_PAYLOAD );
  g_si_module_is_online                 = 0;

// --------------------------------------------
// --------------- TALIN GUARDS ---------------
  g_talin_data_is_valid                 = ( Talin_state.isValid > 0 );

  /*  template
    a_print_g_debug
    {
      print(" .-=X=-. g = ");
      if(g_system_pressure_is_sufficient != 0)
      {
        print("true");
      } else
      {
        print("false");
      };
      print(" .-=X=-.\n");
    };
  */
};


// --------------------------------------------
// ----------------- MELDUNGEN ----------------

// --- Fortschrittsanzeigen an ExtBG --- //
val FA_Keine_Meldung                            =  0;
val FA_Plattform_Aus_Gestartet                  =  1;
val FA_Plattform_Aus_Abgeschlossen              =  2;
val FA_Plattform_Ein_Gestartet                  =  3;
val FA_Plattform_Ein_Abgeschlossen              =  4;
/* Haube entriegeln */
val FA_Haube_Entriegeln_Gestartet               =  5;
val FA_Haube_Entriegeln                         =  6;
val FA_Haube_Entriegeln_Abgebrochen             =  7;
val FA_Haube_Entriegeln_Abgeschlossen           =  8;
/* Haube verriegeln */
val FA_Haube_Verriegeln_Gestartet               =  9;
val FA_Haube_Verriegeln                         = 10;
val FA_Haube_Verriegeln_Abgebrochen             = 11;
val FA_Haube_Verriegeln_Abgeschlossen           = 12;
/* Haube Zylinderdruck */
val FA_Haube_Zylinderdruck                      = 13;
val FA_Haube_Zylinderdruck_Abgebrochen          = 14;
val FA_Haube_Zylinderdruck_Abgeschlossen        = 15;
/* Haube Ã¶ffnen */
val FA_Haube_Oeffnen_Gestartet                  = 16;
val FA_Haube_Oeffnen                            = 17;
val FA_Haube_Oeffnen_Abgebrochen                = 18;
val FA_Haube_Oeffnen_Abgeschlossen              = 19;
/* Haube schliessen */
val FA_Haube_Schliessen_Gestartet               = 20;
val FA_Haube_Schliessen                         = 21;
val FA_Haube_Schliessen_Abgebrochen             = 22;
val FA_Haube_Schliessen_Abgeschlossen           = 23;
/* Zurrung Antenne Druckaufbau */
val FA_Zurrung_Warten                           = 24;
val FA_Zurrung_Warten_Abgebrochen               = 25;
/* Zurrung Antenne Oeffnen */
val FA_Zurrung_Ant_Oeffnen_Gestartet            = 26;
val FA_Zurrung_Ant_Oeffnen                      = 27;
val FA_Zurrung_Ant_Oeffnen_Abgebrochen          = 28;
val FA_Zurrung_Ant_Oeffnen_Abgeschlossen        = 29;
/* Zurrung Antenne schliessen */
val FA_Zurrung_Ant_Schliessen_Gestartet         = 30;
val FA_Zurrung_Ant_Schliessen                   = 31;
val FA_Zurrung_Ant_Schliessen_Abgebrochen       = 32;
val FA_Zurrung_Ant_Schliessen_Abgeschlossen     = 33;
/* Zurrung Zentrierstange Ã¶ffnen */
val FA_Zurrung_Stange_Oeffnen_Gestartet         = 34;
val FA_Zurrung_Stange_Oeffnen                   = 35;
val FA_Zurrung_Stange_Oeffnen_Abgebrochen       = 36;
val FA_Zurrung_Stange_Oeffnen_Abgeschlossen     = 37;
/* Zurrung Zentrierstange schliessen */
val FA_Zurrung_Stange_Schliessen_Gestartet      = 38;
val FA_Zurrung_Stange_Schliessen                = 39;
val FA_Zurrung_Stange_Schliessen_Abgebrochen    = 40;
val FA_Zurrung_Stange_Schliessen_Abgeschlossen  = 41;
/* Mast auf Indexposition */
val FA_MastAufIndexpos_Gestartet                = 42;
val FA_MastAufIndexpos_Fahren                   = 43;
val FA_MastAufIndexpos_Erreicht                 = 44;
val FA_MastAufIndexpos_Abgebrochen              = 45;
val FA_MastAufIndexpos_Abgeschlossen            = 46;
/* Mast auf Zurrposition */
val FA_MastAufZurrpos_Gestartet                 = 47;
val FA_MastAufZurrpos_Fahren                    = 48;
val FA_MastAufZurrpos_Erreicht                  = 49;
val FA_MastAufZurrpos_Abgebrochen               = 50;
val FA_MastAufZurrpos_Abgeschlossen             = 51;
/* Mast auf Sollposition */
val FA_MastAufSollpos_Gestartet                 = 52;
val FA_MastAufSollpos_Fahren                    = 53;
val FA_MastAufSollpos_Erreicht                  = 54;
val FA_MastAufSollpos_Abgebrochen               = 55;
val FA_MastAufSollpos_Abgeschlossen             = 56;
/* X in Null/Indexposition (0 Grad) */
val FA_X_In_Nullpos_Gestartet                   = 57;
val FA_X_In_Nullpos_Fahren                      = 58;
val FA_X_In_Nullpos_Erreicht                    = 59;
val FA_X_In_Nullpos_Abgebrochen                 = 60;
val FA_X_In_Nullpos_Abgeschlossen               = 61;
/* Antenne aufrichten */
val FA_Antenne_Aufrichten_Gestartet             = 62;
val FA_Antenne_Aufrichten                       = 63;
val FA_Antenne_Hat_SollPosition_Erreicht        = 64;
val FA_Antenne_Aufrichten_Abgebrochen           = 65;
val FA_Antenne_Aufrichten_Abgeschlossen         = 66;
/* Antenne abklappen */
val FA_Antenne_Abklappen_Gestartet              = 67;
val FA_Antenne_Abklappen                        = 68;
val FA_Antenne_Abklappen_Erreicht               = 69;
val FA_Antenne_Abklappen_Abgebrochen            = 70;
val FA_Antenne_Abklappen_Abgeschlossen          = 71;
/* Antenne in Parkposition */
val FA_Parkposition_Anfordern                   = 72;
val FA_Parkposition_Anfordern_Abgebrochen       = 73;
val FA_Parkposition_Erreicht                    = 74;
/* StÃ¼tzen Druckaufbau */
val FA_Klemmung_Zylinderdruck                   = 75;
val FA_Klemmung_Zylinderdruck_Abgebrochen       = 76;
val FA_Klemmung_Zylinderdruck_Abgeschlossen     = 77;
/* StÃ¼tzen Klemmung Ã¶ffnen */
val FA_Klemmung_Oeffnen_Gestartet               = 78;
val FA_Klemmung_Oeffnen                         = 79;
val FA_Klemmung_Oeffnen_Abgebrochen             = 80;
val FA_Klemmung_Oeffnen_Abgeschlossen           = 81;
/* StÃ¼tzen Klemmung schliessen */
val FA_Klemmung_Schliessen_Gestartet            = 82;
val FA_Klemmung_Schliessen                      = 83;
val FA_Klemmung_Schliessen_Abgebrochen          = 84;
val FA_Klemmung_Schliessen_Abgeschlossen        = 85;
/* StÃ¼tzen ausfahren */
val FA_Stuetzen_Ausfahren_Gestartet             = 86;
val FA_Stuetzen_Ausfahren                       = 87;
val FA_Stuetzen_Ausfahren_Abgebrochen           = 88;
val FA_Stuetzen_Ausfahren_Abgeschlossen         = 89;
/* StÃ¼tzen einfahren */
val FA_Stuetzen_Einfahren_Gestartet             = 90;
val FA_Stuetzen_Einfahren                       = 91;
val FA_Stuetzen_Einfahren_Abgebrochen           = 92;
val FA_Stuetzen_Einfahren_Abgeschlossen         = 93;
/* Horizontierung */
val FA_Horizontierung_Gestartet                 = 94;
val FA_Horizontierung_Nicht_Notwendig           = 95;
val FA_Horizontierung_Im_Arbeitsbereich         = 96;
val FA_Horizontierung_X_Fahren_Gestartet        = 97;
val FA_Horizontierung_X_Fahren                  = 98;
val FA_Horizontierung_X_Erreicht                = 99;
val FA_Horizontierung_Y_Fahren_Gestartet        =100;
val FA_Horizontierung_Y_Fahren                  =101;
val FA_Horizontierung_Y_Erreicht                =102;
val FA_Horizontierung_Abgeschlossen             =103;
/* Staubaustragseinrichtung */
val FA_Staubaustrag_Gestartet                   =104;
val FA_VV1_Aktivieren                           =105;
val FA_VV1_Aktiviert                            =106;
val FA_VV1_Deaktivieren                         =107;
val FA_VV1_Deaktiviert                          =108;
val FA_VV2_Aktivieren                           =109;
val FA_VV2_Aktiviert                            =110;
val FA_VV2_Deaktivieren                         =111;
val FA_VV2_Deaktiviert                          =112;
val FA_VV3_Aktivieren                           =113;
val FA_VV3_Aktiviert                            =114;
val FA_VV3_Deaktivieren                         =115;
val FA_VV3_Deaktiviert                          =116;
val FA_Staubaustrag_Abgeschlossen               =117;
/* Antrieb X */
val FA_X_Aktivieren                             =118;
val FA_X_Aktiviert                              =119;
val FA_X_Deaktivieren                           =120;
val FA_X_Deaktiviert                            =121;
/* Antrieb Y */
val FA_Y_Aktivieren                             =122;
val FA_Y_Aktiviert                              =123;
val FA_Y_Deaktivieren                           =124;
val FA_Y_Deaktiviert                            =125;
/* Antrieb Z */
val FA_Z_Aktivieren                             =126;
val FA_Z_Aktiviert                              =127;
val FA_Z_Deaktivieren                           =128;
val FA_Z_Deaktiviert                            =129;
/* DrehzahlerhÃ¶hung */
val FA_Drehzahl_Gestartet                       =130;
val FA_Drehzahl_Erhoehen                        =131;
val FA_Drehzahl_Leerlauf                        =132;
val FA_Drehzahl_Abgeschlossen                   =133;


Event ev_x_drive_disable, ev_x_drive_disable_timeout, ev_x_drive_is_disabled, ev_x_drive_disable_was_interrupted;
Event ev_x_drive_is_enabled, ev_x_drive_enable, ev_x_drive_enable_timeout, ev_x_drive_fault_antrieb_reset;
Guard g_x_drive_has_antrieb_fault;
Event ev_x_drive_stop, ev_x_drive_is_enabled, ev_x_drive_is_disabled;
Event ev_x_drive_movement_stopped, ev_x_drive_reset, ev_x_drive_move_up;
Event ev_talin_is_ready_to_be_moved, ev_x_drive_prepares_to_move;
Event ev_x_drive_enable_timeout, ev_x_drive_moving_timeout, ev_x_drive_move, ev_x_drive_enable_starting, ev_x_drive_disable_starting;

Systemstate x_drive;
Systemstate IS_ENABLE_TIMER_ON, IS_MOVE_TIMER_ON;
Systemstate given_speed;

global_functions
{
  x_drive_set_target_position
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- x_drive_set_target_position --------\n" );
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > x_drive.MAX_POS )
    {
      x_drive.SollPos = x_drive.MAX_POS;
    } else
    {
      if ( inSollPos < x_drive.MIN_POS )
      {
        x_drive.SollPos = x_drive.MIN_POS;
      } else
      {
        x_drive.SollPos = inSollPos;
      };
    };
    x_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- X_drive_move.SollPos:    ", x_drive.SollPos, ", SollGeschw: ", x_drive.SollGeschw, "\n" );
  };

  x_drive_set_target_speed
  {
    params{ inSollGeschw; };
    print ( "-------- x_drive_set_target_speed --------\n" );
    x_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    if ( inSollGeschw >= 0 )
    {
      x_drive.SollPos = x_drive.MAX_POS;
    };
    if ( inSollGeschw < 0 )
    {
      x_drive.SollPos = x_drive.MIN_POS;
    };
    if ( inSollGeschw == 0 )
    {
      x_drive.SollGeschw = x_drive.SPEED_MAX;
    } else
    {
      x_drive.SollGeschw = abs ( inSollGeschw );
    };
  };
};

Event ev_x_drive_set_antrieb_reset_fault, ev_x_drive_reset_antrieb_reset_fault, ev_x_drive_fault_timer_one;
Event ev_x_drive_fault_timer_two, ev_x_drive_fault_antrieb_is_reset, ev_x_drive_reset_error;
Guard g_x_drive_has_antrieb_fault;

// // Pseudocode
// // E := Error
// // C := Control Bit
// while(Error)
// {
//   C=1; sleep(500ms);
//   C=0; sleep(500ms);
//   C=1; sleep(5   s);
//   if(!E)
//   {
//     C=0;
//     break;
//   }
// }
// Fahre_Antrieb();


Event ev_x_drive_to_indexposition_timeout, ev_x_drive_move_go, ev_x_drive_is_in_indexposition, ev_x_drive_enable_timeout, ev_x_drive_moving_timeout;
Event ev_x_drive_movement_stopped, ev_x_drive_to_indexposition_starts;

Event ev_x_drive_to_target_position_timeout, ev_x_drive_move_go, ev_x_drive_is_in_target_position;
Event ev_x_drive_enable_timeout, ev_x_drive_moving_timeout, ev_x_drive_movement_stopped;
Systemstate SOLL_POS;

Event ev_y_drive_disable, ev_y_drive_disable_timeout, ev_y_drive_is_disabled, ev_y_drive_disable_was_interrupted;

Event ev_y_drive_is_enabled, ev_y_drive_enable, ev_enable_y_drive_timeout;
Event ev_y_drive_fault_antrieb_reset;
Guard g_y_drive_has_antrieb_fault;

Event ev_y_drive_stop, ev_y_drive_is_enabled, ev_y_drive_is_disabled;
Event ev_y_drive_movement_stopped, ev_y_drive_reset, ev_y_drive_move_up;
Event ev_talin_is_ready_to_be_moved, ev_y_drive_prepares_to_move;
Event ev_y_drive_enable_timeout, ev_y_drive_moving_timeout, ev_y_drive_move, ev_y_drive_enable_starting, ev_y_drive_disable_starting;

Systemstate y_drive;
Systemstate IS_ENABLE_TIMER_ON, IS_MOVE_TIMER_ON;
Systemstate given_speed;

global_functions
{
  y_drive_set_target_position 
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- y_drive_set_target_position --------\n" );
    y_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > y_drive.MAX_POS )
    {
      y_drive.SollPos = y_drive.MAX_POS;
    } else
    {
      if ( inSollPos < y_drive.MIN_POS )
      {
        y_drive.SollPos = y_drive.MIN_POS;
      } else
      {
        y_drive.SollPos = inSollPos;
      };
    };
    y_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- Y_drive_move.SollPos:    ", y_drive.SollPos, ", SollGeschw: ", y_drive.SollGeschw, "\n" );
  };

  y_drive_set_target_speed 
  {
    params{ inSollGeschw; };
    print ( "-------- y_drive_set_target_speed --------\n" );
    y_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    if ( inSollGeschw >= 0 )
    {
      y_drive.SollPos = y_drive.MAX_POS;
    };
    if ( inSollGeschw < 0 )
    {
      y_drive.SollPos = y_drive.MIN_POS;
    };
    if ( inSollGeschw == 0 )
    {
      y_drive.SollGeschw = y_drive.SPEED_MAX;
    } else
    {
      y_drive.SollGeschw = abs ( inSollGeschw );
    };
  };
};


Event ev_y_drive_set_antrieb_reset_fault, ev_y_drive_reset_antrieb_reset_fault, ev_y_drive_fault_timer_one;
Event ev_y_drive_fault_timer_two, ev_y_drive_fault_antrieb_is_reset, ev_y_drive_reset_error;
Guard g_y_drive_has_antrieb_fault;

// // Pseudocode
// // E := Error
// // C := Control Bit
// while(Error)
// {
//   C=1; sleep(500ms);
//   C=0; sleep(500ms);
//   C=1; sleep(5   s);
//   if(!E)
//   {
//     C=0;
//     break;
//   }
// }
// Fahre_Antrieb();


Event ev_y_drive_to_arbeitsposition_timeout, ev_y_drive_move_go, ev_y_drive_is_in_arbeitsposition, ev_y_drive_enable_timeout;
Event ev_y_drive_moving_timeout, ev_y_drive_movement_stopped;


Event ev_y_drive_to_indexposition_timeout, ev_y_drive_move_go, ev_y_drive_is_in_indexposition, ev_y_drive_enable_timeout, ev_y_drive_moving_timeout, ev_y_drive_movement_stopped, ev_y_drive_move_starts, ev_y_drive_move_to_indexposition_starts;


Event ev_y_drive_to_target_position_timeout, ev_y_drive_move_go, ev_y_drive_is_in_target_position;
Event ev_y_drive_enable_timeout, ev_y_drive_moving_timeout, ev_y_drive_movement_stopped;
Systemstate SOLL_POS;

Event ev_z_drive_disable, ev_z_drive_disable_timeout, ev_z_drive_is_disabled;

Event ev_z_drive_is_enabled, ev_z_drive_enable, ev_z_drive_enable_timeout, ev_z_drive_fault_antrieb_is_reset;
Guard g_z_drive_has_antrieb_fault;


Event ev_z_drive_stop, ev_z_drive_is_enabled, ev_z_drive_is_disabled;
Event ev_z_drive_movement_stopped, ev_z_drive_reset, ev_z_drive_move_up;
Event ev_talin_is_ready_to_be_moved, ev_z_drive_prepares_to_move;
Event ev_z_drive_enable_timeout, ev_z_drive_moving_timeout, ev_z_drive_move, ev_z_drive_enable_starting, ev_z_drive_disable_starting;

Systemstate z_drive;
Systemstate IS_ENABLE_TIMER_ON, IS_MOVE_TIMER_ON;
Systemstate vorzeichen_speed;

// Globals {
// IS_ENABLE_TIMER_ON = 0;
// IS_MOVE_TIMER_ON   = 0;
// };

global_functions
{
  z_drive_set_target_position 
  {
    params{ inSollPos; inSollGeschw; };
    print ( "-------- z_drive_set_target_position --------\n" );
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_POSITION;

    if ( inSollPos > z_drive.MAX_POS )
    {
      z_drive.SollPos = z_drive.MAX_POS;
    } else
    if ( inSollPos < z_drive.MAST_ZURRPOSITION )
    {
      z_drive.SollPos = z_drive.MAST_ZURRPOSITION;
    } else
    {
      z_drive.SollPos = inSollPos;
    };
    z_drive.SollGeschw = inSollGeschw;
    print ( "-------------------------------- Z_drive_move.SollPos:    ", z_drive.SollPos, ", SollGeschw: ", z_drive.SollGeschw, "\n" );
  };

  z_drive_set_target_speed 
  {
    params{ inSollGeschw; };
    print ( "-------- z_drive_set_target_speed --------\n" );
    z_drive.Control.ANTRIEB_MODE_DEFAULT  = DRIVE_OPERATIONAL_MODE_SPEED;

    vorzeichen_speed = inSollGeschw;
    print ( "-------------------------------- Z_drive_move.VORZEICHEN SPEED: ", vorzeichen_speed, "\n" );

    //if ( given_speed >= 0 )
    //  z_drive.SollPos = z_drive.MAX_POS;
    //if ( given_speed < 0 )
    //  z_drive.SollPos = z_drive.MAST_ZURRPOSITION;

    if ( vorzeichen_speed == 0 )
    {
      z_drive.SollGeschw = z_drive.SPEED_MAX;
    } else
    {
      z_drive.SollGeschw = vorzeichen_speed * z_drive.SollGeschwAbsolut;
    };

    print ( "-------------------------------- Z_drive_move.SollGeschw: ", z_drive.SollGeschw, ", vorzeichen_speed: ", vorzeichen_speed, "\n" );
  };
};


Event ev_z_drive_set_antrieb_reset_fault, ev_z_drive_reset_antrieb_reset_fault, ev_z_drive_fault_timer_one;
Event ev_z_drive_fault_timer_two, ev_z_drive_fault_antrieb_is_reset, ev_z_drive_reset_error,ev_z_drive_has_antrieb_fault;
Guard g_z_drive_has_antrieb_fault;

// // Pseudocode
// // E := Error
// // C := Control Bit
// while(Error)
// {
//   C=1; sleep(500ms);
//   C=0; sleep(500ms);
//   C=1; sleep(5   s);
//   if(!E)
//   {
//     C=0;
//     break;
//   }
// }
// Fahre_Antrieb();


Event ev_z_drive_to_indexposition_timeout, ev_mast_move, ev_z_drive_is_in_indexposition;
Event ev_z_drive_enable_timeout, ev_z_drive_moving_timeout, ev_z_drive_movement_stopped, ev_z_drive_move_to_indexposition_starts;


Event ev_z_drive_to_lashing_position_timeout, ev_z_drive_move_in, ev_z_drive_is_in_lashing_position, ev_z_drive_move_to_lashing_position_starts;

Event ev_z_drive_to_target_position_timeout, ev_mast_move, ev_z_drive_stop, ev_z_drive_is_in_target_position, ev_z_drive_to_target_position_preconditions_are_not_met, ev_z_drive_move_to_target_position_starts;

Event ev_z_drive_movement_stopped, ev_mast_move, ev_mast_move_down_preconditions_are_not_met;


Event ev_z_drive_movement_stopped, ev_mast_move, ev_mast_move_up_preconditions_are_not_met;

Event ev_antenna_to_parking_position_timeout, ev_antenna_correction_is_not_possible, ev_antenna_to_rise_timeout;
Event ev_antenna_lashing_lock_timeout, ev_antenna_lashing_unlock_timeout;
Event ev_antenna_to_hinge_down_timeout, ev_antenna_to_level_out_x_drive_is_out_of_range;
Event ev_antenna_to_rise_preconditions_are_not_met, ev_antenna_to_hinge_down_preconditions_are_not_met;
Event ev_flap_lock_timeout, ev_flap_unlock_timeout, ev_flap_open_timeout, ev_flap_close_timeout;
Event ev_flap_to_open_preconditions_are_not_met, ev_flap_open_preconditions_not_are_not_met, ev_flap_to_close_preconditions_are_not_met, ev_flap_unlock_preconditions_are_not_met;
Event ev_platform_extend_preconditions_are_not_met, ev_platform_retract_preconditions_are_not_met;
Event ev_preemptive_program_exit;
Event ev_stilts_lock_timeout,   ev_stilts_extend_timeout,   ev_stilts_to_extend_timeout,  ev_stilts_extended_stilt_detected;
Event ev_stilts_unlock_timeout, ev_stilts_retract_timeout,  ev_stilts_to_retract_timeout;
Event ev_x_drive_enable_timeout, ev_x_drive_disable_timeout, ev_x_drive_to_indexposition_timeout, ev_x_drive_correction_is_not_possible;
Event ev_y_drive_enable_timeout, ev_y_drive_disable_timeout, ev_y_drive_to_indexposition_timeout, ev_y_drive_correction_is_not_possible, ev_y_drive_to_arbeitsposition_timeout;
Event ev_z_drive_enable_timeout, ev_z_drive_disable_timeout, ev_z_drive_to_indexposition_timeout, ev_z_drive_to_target_position_preconditions_are_not_met;
Event ev_z_drive_to_lashing_position_timeout, ev_z_drive_to_target_position_timeout;
Event ev_x_drive_to_target_position_timeout, ev_y_drive_to_target_position_timeout;
Event ev_extBG_is_online, ev_extBG_is_offline;
Event ev_extend_with_stilts, ev_extend_without_stilts;
Event ev_kampfschalter_is_active, ev_taste_not_aus_is_active;
Event ev_taste_a_abbruch_is_active, ev_taste_a_abbruch_is_not_active, ev_taste_e_abbruch_is_active, ev_taste_e_abbruch_is_not_active;

// System
Event ev_system_extend, ev_platform_extend_is_finished, ev_system_retract, ev_platform_retract_is_finished;
// Mast
Event ev_mast_move_up, ev_mast_move_down, ev_z_drive_stop, ev_mast_anfahren, ev_z_drive_movement_stopped; 
// X-Drive
Event ev_x_drive_to_indexposition, ev_x_drive_is_in_indexposition, ev_y_drive_is_disabled;
// Y-Drive
Event ev_y_drive_to_indexposition, ev_y_drive_is_in_indexposition, ev_y_drive_to_arbeitsposition, ev_y_drive_is_in_arbeitsposition, ev_y_drive_is_disabled;
// Z-Drive
Event ev_mast_ausfahren, ev_mast_einfahren, ev_z_drive_is_in_indexposition, ev_z_drive_is_in_lashing_position, ev_z_drive_is_disabled;
// Stilts
Event ev_stilts_to_extend, ev_stilts_to_retract, ev_stilts_to_extend_finished, ev_stilts_to_retract_finished, ev_stilts_are_locked, ev_stilts_lock, ev_stilts_are_unlocked, ev_stilts_unlock, ev_stilts_retract, ev_stilts_extend, ev_stilts_are_retracted, ev_stilts_have_ground_contact;
// Flap
Event ev_flap_lock_finished, ev_flap_to_open, ev_flap_to_open_finished, ev_flap_to_close, ev_flap_to_close_finished, ev_flap_unlock_finished, ev_flap_unlock, ev_flap_lock, ev_flap_lock_finished, ev_flap_close, ev_flap_open, ev_flap_open_finished, ev_flap_close_finished;
// Antenna
Event ev_antenna_to_level_out, ev_antenna_is_levelled_out, ev_antenna_lashing_unlock, ev_antenna_lashing_lock, ev_antenna_is_unlocked, ev_antenna_is_locked, ev_antenna_to_raise, ev_antenna_is_risen, ev_antenna_to_hinge_down, ev_antenna_is_hinged_down;
// Dust Discharge
Event ev_dust_discharge_done, ev_dust_discharge_to_do;
Event ev_antenna_lashing_is_locked, ev_antenna_lashing_lock_timeout, ev_antenna_lashing_lock_preconditions_are_not_met, ev_antenna_lock;
Event ev_antenna_lock_is_preconditioned, ev_antenna_lashing_lock_starts, ev_antenna_is_locked, ev_antenna_lashing_lock_was_interrupted;

Event ev_antenna_lashing_is_unlocked, ev_antenna_lashing_unlock_timeout, ev_antenna_lashing_unlock_starts, ev_antenna_lashing_unlock_was_interrupted;
Event ev_antenna_lock_is_preconditioned, ev_antenna_unlock, ev_antenna_is_unlocked, ev_antenna_lashing_unlock_preconditions_are_not_met;

Event ev_antenna_prepare_usage, ev_antenna_lock_preconditioning_finished, ev_antenna_lock_is_preconditioned, ev_antenna_lock_precondition_was_interrupted;

// to hinge antenna down means: move Y-drive to indexposition (0Â°)
Event ev_x_drive_is_in_indexposition, ev_x_drive_to_indexposition_timeout;
Event ev_y_drive_is_in_indexposition, ev_y_drive_to_indexposition_timeout;
Event ev_antenna_is_in_parking_position,  ev_antenna_to_hinge_down_was_interrupted, ev_antenna_to_hinge_down_starts,  ev_antenna_to_hinge_down_preconditions_are_not_met;
Event ev_antenna_is_hinged_down,          ev_antenna_to_hinge_down_flap_is_open,    ev_antenna_to_hinge_down_timeout;

Event ev_antenna_is_levelled_out, ev_antenna_to_level_out_started, ev_antenna_to_level_out_is_not_necessary, ev_antenna_to_level_out_reset;
Event ev_antenna_to_level_out_x_drive_is_out_of_range, ev_antenna_alignment_changed, ev_antenna_correction_is_not_possible;
Event ev_level_out_x, ev_level_out_x_started, ev_level_out_x_finished, ev_x_drive_is_in_target_position, ev_x_drive_correction_is_not_possible;
Event ev_level_out_y, ev_level_out_y_started, ev_level_out_y_finished, ev_y_drive_is_in_target_position, ev_y_drive_correction_is_not_possible;
Event ev_talin_data_is_not_valid;
Event ev_antenna_is_moving_to_parking_position, ev_antenna_to_parking_position_timeout, ev_antenna_is_in_parking_position, ev_antenna_to_parking_position_was_interrupted;
// // raising antenna means: move Y-drive to 90Â°
Event ev_y_drive_is_in_arbeitsposition, ev_y_drive_to_arbeitsposition_timeout;
Event ev_antenna_to_rise_was_interrupted, ev_antenna_to_raise_starts, ev_antenna_is_risen, ev_antenna_to_rise_preconditions_are_not_met, ev_antenna_to_rise_timeout;

Event ev_dust_discharge_start, ev_dust_discharge_stop, ev_dust_discharge_timeout;
Event ev_dust_discharge_done, ev_dust_discharge_preconditions_are_not_met, ev_dust_discharge_started;


Event ev_flap_HVZO_close, ev_flap_is_closed, ev_flap_close_finished, ev_flap_close_timeout, ev_flap_stop_moving, ev_flap_close_started;
Event ev_flap_lock_one_is_locked, ev_flap_lock_started,   ev_flap_lock_timeout,  ev_flap_lock_preconditions_are_not_met;
Event ev_flap_lock_two_is_locked, ev_flap_lock_finished,  ev_flap_lock_was_interrupted, ev_flap_VHR_close;


Event ev_flap_is_open, ev_flap_stop_moving, ev_flap_HVZS_close, ev_flap_open_finished, ev_flap_open_timeout, ev_flap_open_started, ev_flap_open_preconditions_not_are_not_met;


Event ev_flap_preconditioning_finished, ev_flap_prepare_moving, ev_flap_precondition_was_interrupted;

Event ev_flap_to_close_starts,    ev_flap_close_starting, ev_flap_to_close_was_interrupted;
Event ev_flap_to_close_finished,  ev_flap_close_finished, ev_flap_to_close_preconditions_are_not_met, ev_flap_preconditioning_finished;
Event ev_flap_lock_starting,      ev_flap_lock_finished;
Event ev_flap_unlock_starting,    ev_flap_unlock_finished;


Event ev_flap_open_starting,    ev_flap_open_finished;
Event ev_flap_lock_starting,    ev_flap_lock_finished;
Event ev_flap_unlock_starting,  ev_flap_unlock_finished;
Event ev_flap_preconditioning_finished, ev_flap_to_open_was_interrupted;
Event ev_flap_to_open_starts, ev_flap_to_open_finished, ev_flap_to_open_preconditions_are_not_met;


Event ev_flap_lock_one_is_unlocked, ev_flap_unlock_started,   ev_flap_unlock_timeout,         ev_flap_VHR_open,  ev_flap_unlock_preconditions_are_not_met;
Event ev_flap_lock_two_is_unlocked, ev_flap_unlock_finished,  ev_flap_unlock_was_interrupted, ev_flap_VHR_close;


Event ev_platform_extend_is_finished, ev_platform_extend_is_starting, ev_platform_extend_preconditions_are_not_met;

Event ev_antenna_lashing_unlock_starting;


Event ev_platform_retract_is_finished, ev_platform_retract_is_starting;
Event ev_antenna_to_hinge_down, ev_platform_retract_preconditions_are_not_met;


Event ev_platform_extend_starts_flap_to_close, ev_antenna_lashing_lock_starting;


Event ev_stilt_left_is_extended,  ev_stilt_left_is_not_extended;
Event ev_stilt_right_is_extended, ev_stilt_right_is_not_extended;
Event ev_stilts_locked_stilt_detected,  ev_stilts_extended_stilt_detected,  ev_stilts_extend_timeout;
Event ev_stilts_stop_moving,            ev_stilts_extend_is_starting,       ev_stilts_have_ground_contact;
Event ev_system_pressure_is_low;

Guard g_kampfschalter_is_active,  g_system_pressure_is_sufficient;
Guard g_stilt_right_is_extended,  g_stilt_any_is_extended;
Guard g_stilt_left_is_extended,   g_stilts_all_have_ground_contact;


Event ev_stilts_lock, ev_stilts_are_locked, ev_stilts_lock_timeout, ev_stilts_lock_left_is_locked, ev_stilts_lock_right_is_locked, ev_stilts_lock_was_interrupted;
Guard g_stilts_all_are_locked;

Event ev_stilts_prepare_moving, ev_stilts_preconditioning_timeout, ev_stilts_are_preconditioned, ev_stilts_preconditioning_was_interrupted;
Event ev_system_pressure_is_low;


Event ev_stilts_are_retracted, ev_stilt_left_is_retracted, ev_stilt_right_is_retracted, ev_stilts_retract_timeout;
Event ev_stilts_stop_moving, ev_stilts_retract, ev_stilts_retract_is_starting, ev_stilts_locked_stilt_detected;
Guard g_stilts_all_are_retracted, g_stilts_all_are_locked, g_kampfschalter_is_active, g_system_pressure_is_sufficient;


Event ev_stilts_are_preconditioned,   ev_stilts_are_locked,   ev_stilts_are_unlocked;
Event ev_stilts_have_ground_contact,  ev_stilts_extended_stilt_detected;
Event ev_stilts_to_extend_started,    ev_stilts_to_extend_started_stilts_extend,  ev_stilts_to_extend_preconditions_are_not_met;
Event ev_stilts_to_extend_finished,   ev_stilts_to_extend_started_stilts_unlock,  ev_stilts_to_extend_was_interrupted;
Event ev_stilts_to_extend_timeout,    ev_stilts_to_extend_started_stilts_lock,    ev_stilts_to_extend_failed_no_ground;

Guard g_stilt_any_is_extended, g_stilts_all_have_ground_contact;


Event ev_stilts_are_locked,   ev_stilts_are_preconditioned, ev_stilts_are_retracted;
Event ev_stilts_are_unlocked, ev_stilts_close_all_valves,   ev_stilts_lock;
Event ev_stilts_to_retract_started,   ev_stilts_to_retract_started_stilts_retract,  ev_stilts_to_retract_preconditions_are_not_met;
Event ev_stilts_to_retract_finished,  ev_stilts_to_retract_started_stilts_unlock,   ev_stilts_to_retract_was_interrupted;
Event ev_stilts_to_retract_timeout,   ev_stilts_to_retract_started_stilts_lock;

Guard g_stilts_all_are_retracted, g_stilts_to_retract_preconditions;


Event ev_stilts_unlock, ev_stilts_unlock_timeout, ev_stilts_lock_left_is_unlocked, ev_stilts_lock_right_is_unlocked;
Event ev_stilts_are_unlocked,   ev_stilts_unlock_preconditions_are_not_met, ev_stilts_unlock_was_interrupted;

Guard g_stilts_all_are_unlocked, g_stilts_unlock_preconditions;

//  local event
Event ev_stilts_check_unlocked;


Guard g_system_extend_with_stilts;
Guard g_system_extend_with_stilts;

Event ev_antenna_alignment_changed, ev_z_drive_SENSOR_UB_Z_changed, ev_antenna_alignment_status_changed, ev_slide_detector_slide_alarm;

Event ev_antenna_lashing_is_locked, ev_antenna_lashing_is_unlocked, ev_antenna_lashing_state_change;
Guard g_antenna_lashing_is_locked,  g_antenna_lashing_is_unlocked,  g_antenna_lashing_is_wrong, g_antenna_lashing_is_neither_nor;

Event ev_x_drive_position_changed, ev_x_drive_stop, ev_x_drive_has_antrieb_fault;
Event ev_y_drive_position_changed, ev_y_drive_stop, ev_y_drive_has_antrieb_fault;
Event ev_z_drive_position_changed, ev_z_drive_stop, ev_z_drive_has_antrieb_fault;

Event ev_dust_discharge_delay_timeout;



Event ev_antenna_to_rise_preconditions_are_not_met, ev_antenna_to_hinge_down_preconditions_are_not_met, ev_antenna_to_rise_timeout, ev_antenna_to_hinge_down_timeout; 
Event ev_antenna_lashing_lock_timeout, ev_antenna_lashing_unlock_timeout, ev_antenna_to_parking_position_timeout, ev_antenna_correction_is_not_possible;
Event ev_flap_lock_timeout, ev_flap_unlock_timeout, ev_flap_open_timeout, ev_flap_close_timeout, ev_flap_to_open_preconditions_are_not_met, ev_flap_to_close_preconditions_are_not_met;
Event ev_heckverteiler_is_offline, ev_system_pressure_is_low;
Event ev_kampfschalter_is_active, ev_not_aus_is_active, ev_taste_e_abbruch_is_active, ev_taste_a_abbruch_is_active;
Event ev_extBG_is_online, ev_talin_data_is_invalid, ev_ivenet_lacks_traffic, ev_psm_lacks_traffic;
Event ev_platform_extend_preconditions_are_not_met, ev_platform_retract_preconditions_are_not_met;
Event ev_stilts_lock_timeout, ev_stilts_unlock_timeout, ev_stilts_to_extend_timeout, ev_stilts_to_retract_timeout, ev_stilt_left_is_extended, ev_stilt_right_is_extended;
Event ev_usv_is_offline;
Event ev_x_drive_is_offline, ev_x_drive_has_antrieb_fault, ev_x_drive_to_indexposition_timeout;
Event ev_y_drive_is_offline, ev_y_drive_has_antrieb_fault, ev_y_drive_to_indexposition_timeout, ev_y_drive_to_arbeitsposition_timeout;
Event ev_z_drive_is_offline, ev_z_drive_has_antrieb_fault, ev_z_drive_to_indexposition_timeout, ev_z_drive_to_lashing_position_timeout, ev_z_drive_to_target_position_timeout, ev_z_drive_to_target_position_preconditions_are_not_met;

global_functions
{
  set_extbg_error
  {
    params{ p_ERROR_ID; };
    print ( "BAG --> EXTBG >>> ERROR_ID: ", p_ERROR_ID, ", extbg_error_counter: ", extbg_error_counter, "\n" );
    if ( extbg_error_counter == 0 )
    {
      extbg_error_0 = p_ERROR_ID;
    } else
    if ( extbg_error_counter == 1 )
    {
      extbg_error_1 = p_ERROR_ID;
    } else
    if ( extbg_error_counter == 2 )
    {
      extbg_error_2 = p_ERROR_ID;
    } else
    if ( extbg_error_counter == 3 )
    {
      extbg_error_3 = p_ERROR_ID;
    } else
    if ( extbg_error_counter == 4 )
    {
      extbg_error_4 = p_ERROR_ID;
    };
    extbg_error_counter = extbg_error_counter + 1;
  };

  reset_extbg_error
  {
    extbg_error_0       = NO_ERROR;
    extbg_error_1       = NO_ERROR;
    extbg_error_2       = NO_ERROR;
    extbg_error_3       = NO_ERROR;
    extbg_error_4       = NO_ERROR;
    extbg_error_counter = 0;
  };
};



// see ZustandCS6
// HZO - Haubenzylinder Offen,       Bit 4
// HZG - Haubenzylinder Geschlossen, Bit 5

Event ev_flap_is_open,  ev_flap_is_closed,  ev_flap_is_wrong,  ev_flap_is_not_open,   ev_flap_is_not_closed,  ev_flap_state_change;
Guard g_flap_is_open,   g_flap_is_closed,   g_flap_is_wrong,   g_flap_is_neither_nor;

Event ev_flap_lock_one_is_locked, ev_flap_lock_one_is_unlocked, ev_flap_lock_state_change;

Event ev_flap_lock_two_is_locked, ev_flap_lock_two_is_unlocked, ev_flap_lock_state_change;



// State - Funktionsueberwachung

//X Antrieb          0x10
//Y Antrieb          0x20
//Z Antrieb          0x30
//IO Karte           0x48
//SI Karte           0x50
//USV 1              0x70
//USV 2              0x78
//ExtBG              0x60

Event ev_bag_has_heartbeat;
Event ev_io_module_has_heartbeat, ev_io_module_set_operational, ev_io_module_lacks_heartbeat, ev_io_module_is_online, ev_io_module_is_offline;
Event ev_si_module_has_heartbeat, ev_si_module_set_operational, ev_si_module_lacks_heartbeat, ev_si_module_is_online, ev_si_module_is_offline;
Event ev_usv1_has_heartbeat, ev_usv1_set_operational, ev_usv1_lacks_heartbeat, ev_usv1_is_online, ev_usv1_is_offline, ev_usv1_start_supervision;
Event ev_usv2_has_heartbeat, ev_usv2_set_operational, ev_usv2_lacks_heartbeat, ev_usv2_is_online, ev_usv2_is_offline, ev_usv2_start_supervision;
Event ev_usv_is_online, ev_usv_is_offline;
Event ev_extbg_has_heartbeat, ev_extbg_set_operational, ev_extbg_lacks_heartbeat, ev_extBG_is_online, ev_extBG_is_offline;
Event ev_x_drive_has_heartbeat, ev_x_drive_set_operational, ev_x_drive_lacks_heartbeat, ev_x_drive_is_online, ev_x_drive_is_offline, ev_x_drive_start_supervision;
Event ev_y_drive_has_heartbeat, ev_y_drive_set_operational, ev_y_drive_lacks_heartbeat, ev_y_drive_is_online, ev_y_drive_is_offline, ev_y_drive_start_supervision;
Event ev_z_drive_has_heartbeat, ev_z_drive_set_operational, ev_z_drive_lacks_heartbeat, ev_z_drive_is_online, ev_z_drive_is_offline, ev_z_drive_start_supervision;
Event ev_message_from_psm, ev_psm_lacks_traffic, ev_psm_start_supervision;
Event ev_message_from_ivenet, ev_ivenet_lacks_traffic, ev_ivenet_start_supervision;
Event ev_heckverteiler_is_online, ev_heckverteiler_is_offline;
Event ev_extbg_send_data;
// ------------------------------------------------------------------------


Event ev_slide_detector_slide_alarm, ev_ivenet_alignment_changed, ev_send_message_to_ivenet, ev_antenna_parkpos_state_change, ev_y_drive_actual_values;


Event ev_system_pressure_is_sufficient, ev_system_pressure_is_low, ev_system_pressure_changed;


Event ev_stilt_left_is_extended, ev_stilt_left_is_retracted, ev_stilt_left_is_not_retracted, ev_stilt_left_is_not_extended;
Event ev_stilt_left_state_change;

Event ev_stilt_right_is_extended, ev_stilt_right_is_retracted, ev_stilt_right_is_not_retracted, ev_stilt_right_is_not_extended;
Event ev_stilt_right_state_change;

// SVK: StÃ¼tze Ventil Klemmung

Event ev_stilt_left_lock_state_change,  ev_stilts_lock_left_is_locked,  ev_stilts_lock_left_is_unlocked;
Guard g_stilt_left_is_locked,   g_stilt_left_is_unlocked;

// SVK: StÃ¼tze Ventil Klemmung

Event ev_stilt_right_lock_state_change, ev_stilts_lock_right_is_locked, ev_stilts_lock_right_is_unlocked;
Guard g_stilt_right_is_locked,  g_stilt_right_is_unlocked;

Event ev_kampfschalter_state_change, ev_kampfschalter_is_active, ev_kampfschalter_is_not_active;
Event ev_not_aus_is_active, ev_not_aus_is_not_active, ev_not_aus_state_change;
Event ev_taste_a_abbruch_is_active, ev_taste_a_abbruch_is_not_active, ev_taste_a_abbruch_state_change;
Event ev_taste_e_abbruch_is_active, ev_taste_e_abbruch_is_not_activem, ev_taste_e_abbruch_state_change;
Event ev_extend_with_stilts, ev_extend_without_stilts;

// ------------------------------------------------------------------------

Event ev_mast_operations_status_changed, ev_vehicle_brake_position_changed, ev_vehicle_inclination_x_changed, ev_vehicle_inclination_y_changed, ev_vehicle_gear_changed;



Event ev_z_drive_prepares_to_move, ev_z_drive_movement_stopped, ev_talin_is_ready_to_be_moved, ev_z_drive_is_disabled, ev_antenna_is_levelled_out;





// --------------------------------------------
// --------------- VARIABLES ------------------
// --------------------------------------------
Systemstate s_set_operational_node_id;
Systemstate s_set_operational_payload;



Systemstate s_heartbeat_payload_xdrv_in;
Systemstate s_heartbeat_payload_xdrv_out;
Systemstate s_heartbeat_payload_ydrv_in;
Systemstate s_heartbeat_payload_ydrv_out;
Systemstate s_heartbeat_payload_zdrv_in;
Systemstate s_heartbeat_payload_zdrv_out;
Systemstate s_heartbeat_payload_iomodule_in;
Systemstate s_heartbeat_payload_iomodule_out;
Systemstate s_heartbeat_payload_simodule_in;
Systemstate s_heartbeat_payload_simodule_out;
Systemstate s_heartbeat_payload_usv_1_in;
Systemstate s_heartbeat_payload_usv_1_out;
Systemstate s_heartbeat_payload_usv_2_in;
Systemstate s_heartbeat_payload_usv_2_out;
Systemstate s_heartbeat_payload_extbg_in;
Systemstate s_heartbeat_payload_extbg_out;
Systemstate s_heartbeat_payload_bag_in;
Systemstate s_heartbeat_payload_bag_out;



// --------------------------------------------
// ----------------- GLOBALS ------------------
Globals
{
  s_set_operational_node_id    = 0;
  s_set_operational_payload    = OPERATIONAL_GENERIC_PAYLOAD;
  s_heartbeat_payload_xdrv_in = 0;
  s_heartbeat_payload_xdrv_out = 0;
  s_heartbeat_payload_ydrv_in = 0;
  s_heartbeat_payload_ydrv_out = 0;
  s_heartbeat_payload_zdrv_in = 0;
  s_heartbeat_payload_zdrv_out = 0;
  s_heartbeat_payload_iomodule_in = 0;
  s_heartbeat_payload_iomodule_out = 0;
  s_heartbeat_payload_simodule_in = 0;
  s_heartbeat_payload_simodule_out = 0;
  s_heartbeat_payload_usv_1_in = 0;
  s_heartbeat_payload_usv_1_out = 0;
  s_heartbeat_payload_usv_2_in = 0;
  s_heartbeat_payload_usv_2_out = 0;
  s_heartbeat_payload_extbg_in = 0;
  s_heartbeat_payload_extbg_out = 0;
  s_heartbeat_payload_bag_in = 0;
  s_heartbeat_payload_bag_out = 0;
};


// --------------------------------------------
// --------------- PARAMETERS -----------------
Systemstate s_rtr_drive_request;
Systemstate s_rtr_drive_response;

Systemstate s_frame_drive_target_pos_xdrv_out;
Systemstate s_frame_drive_target_pos_xdrv_in;
Systemstate s_frame_drive_target_speed_xdrv_out;
Systemstate s_frame_drive_target_speed_xdrv_in;
Systemstate s_frame_drive_target_current_xdrv_out;
Systemstate s_frame_drive_target_current_xdrv_in;

Systemstate s_frame_drive_target_pos_ydrv_out;
Systemstate s_frame_drive_target_pos_ydrv_in;
Systemstate s_frame_drive_target_speed_ydrv_out;
Systemstate s_frame_drive_target_speed_ydrv_in;
Systemstate s_frame_drive_target_current_ydrv_out;
Systemstate s_frame_drive_target_current_ydrv_in;

Systemstate s_frame_drive_target_pos_zdrv_out;
Systemstate s_frame_drive_target_pos_zdrv_in;
Systemstate s_frame_drive_target_speed_zdrv_out;
Systemstate s_frame_drive_target_speed_zdrv_in;
Systemstate s_frame_drive_target_current_zdrv_out;
Systemstate s_frame_drive_target_current_zdrv_in;



Systemstate s_frame_drive_control_mode_xdrv_out;
Systemstate s_frame_drive_control_mode_xdrv_in;
Systemstate s_frame_drive_control_enable_xdrv_out;
Systemstate s_frame_drive_control_enable_xdrv_in;
Systemstate s_frame_drive_control_break_release_xdrv_out;
Systemstate s_frame_drive_control_break_release_xdrv_in;
Systemstate s_frame_drive_control_reset_fault_xdrv_out;
Systemstate s_frame_drive_control_reset_fault_xdrv_in;
Systemstate s_frame_drive_control_calibrate_pos_xdrv_out;
Systemstate s_frame_drive_control_calibrate_pos_xdrv_in;
Systemstate s_frame_drive_control_remote_digital_output_xdrv_out;
Systemstate s_frame_drive_control_remote_digital_output_xdrv_in;

Systemstate s_frame_drive_control_mode_ydrv_out;
Systemstate s_frame_drive_control_mode_ydrv_in;
Systemstate s_frame_drive_control_enable_ydrv_out;
Systemstate s_frame_drive_control_enable_ydrv_in;
Systemstate s_frame_drive_control_break_release_ydrv_out;
Systemstate s_frame_drive_control_break_release_ydrv_in;
Systemstate s_frame_drive_control_reset_fault_ydrv_out;
Systemstate s_frame_drive_control_reset_fault_ydrv_in;
Systemstate s_frame_drive_control_calibrate_pos_ydrv_out;
Systemstate s_frame_drive_control_calibrate_pos_ydrv_in;
Systemstate s_frame_drive_control_remote_digital_output_ydrv_out;
Systemstate s_frame_drive_control_remote_digital_output_ydrv_in;

Systemstate s_frame_drive_control_mode_zdrv_out;
Systemstate s_frame_drive_control_mode_zdrv_in;
Systemstate s_frame_drive_control_enable_zdrv_out;
Systemstate s_frame_drive_control_enable_zdrv_in;
Systemstate s_frame_drive_control_break_release_zdrv_out;
Systemstate s_frame_drive_control_break_release_zdrv_in;
Systemstate s_frame_drive_control_reset_fault_zdrv_out;
Systemstate s_frame_drive_control_reset_fault_zdrv_in;
Systemstate s_frame_drive_control_calibrate_pos_zdrv_out;
Systemstate s_frame_drive_control_calibrate_pos_zdrv_in;
Systemstate s_frame_drive_control_remote_digital_output_zdrv_out;
Systemstate s_frame_drive_control_remote_digital_output_zdrv_in;





Systemstate s_frame_drive_actual_pos_xdrv_out;
Systemstate s_frame_drive_actual_pos_xdrv_in;
Systemstate s_frame_drive_actual_speed_xdrv_out;
Systemstate s_frame_drive_actual_speed_xdrv_in;
Systemstate s_frame_drive_actual_current_xdrv_out;
Systemstate s_frame_drive_actual_current_xdrv_in;
Systemstate s_frame_drive_status_ready_xdrv_out;
Systemstate s_frame_drive_status_ready_xdrv_in;
Systemstate s_frame_drive_status_enable_xdrv_out;
Systemstate s_frame_drive_status_enable_xdrv_in;
Systemstate s_frame_drive_status_inpos_xdrv_out;
Systemstate s_frame_drive_status_inpos_xdrv_in;
Systemstate s_frame_drive_status_limit_switch_cw_xdrv_out;
Systemstate s_frame_drive_status_limit_switch_cw_xdrv_in;
Systemstate s_frame_drive_status_limit_switch_ccw_xdrv_out;
Systemstate s_frame_drive_status_limit_switch_ccw_xdrv_in;
Systemstate s_frame_drive_status_break_released_xdrv_out;
Systemstate s_frame_drive_status_break_released_xdrv_in;
Systemstate s_frame_drive_status_remote_output_status_xdrv_out;
Systemstate s_frame_drive_status_remote_output_status_xdrv_in;
Systemstate s_frame_drive_status_fault_xdrv_out;
Systemstate s_frame_drive_status_fault_xdrv_in;

Systemstate s_frame_drive_actual_pos_ydrv_out;
Systemstate s_frame_drive_actual_pos_ydrv_in;
Systemstate s_frame_drive_actual_speed_ydrv_out;
Systemstate s_frame_drive_actual_speed_ydrv_in;
Systemstate s_frame_drive_actual_current_ydrv_out;
Systemstate s_frame_drive_actual_current_ydrv_in;
Systemstate s_frame_drive_status_ready_ydrv_out;
Systemstate s_frame_drive_status_ready_ydrv_in;
Systemstate s_frame_drive_status_enable_ydrv_out;
Systemstate s_frame_drive_status_enable_ydrv_in;
Systemstate s_frame_drive_status_inpos_ydrv_out;
Systemstate s_frame_drive_status_inpos_ydrv_in;
Systemstate s_frame_drive_status_limit_switch_cw_ydrv_out;
Systemstate s_frame_drive_status_limit_switch_cw_ydrv_in;
Systemstate s_frame_drive_status_limit_switch_ccw_ydrv_out;
Systemstate s_frame_drive_status_limit_switch_ccw_ydrv_in;
Systemstate s_frame_drive_status_break_released_ydrv_out;
Systemstate s_frame_drive_status_break_released_ydrv_in;
Systemstate s_frame_drive_status_remote_output_status_ydrv_out;
Systemstate s_frame_drive_status_remote_output_status_ydrv_in;
Systemstate s_frame_drive_status_fault_ydrv_out;
Systemstate s_frame_drive_status_fault_ydrv_in;

Systemstate s_frame_drive_actual_pos_zdrv_out;
Systemstate s_frame_drive_actual_pos_zdrv_in;
Systemstate s_frame_drive_actual_speed_zdrv_out;
Systemstate s_frame_drive_actual_speed_zdrv_in;
Systemstate s_frame_drive_actual_current_zdrv_out;
Systemstate s_frame_drive_actual_current_zdrv_in;
Systemstate s_frame_drive_status_ready_zdrv_out;
Systemstate s_frame_drive_status_ready_zdrv_in;
Systemstate s_frame_drive_status_enable_zdrv_out;
Systemstate s_frame_drive_status_enable_zdrv_in;
Systemstate s_frame_drive_status_inpos_zdrv_out;
Systemstate s_frame_drive_status_inpos_zdrv_in;
Systemstate s_frame_drive_status_limit_switch_cw_zdrv_out;
Systemstate s_frame_drive_status_limit_switch_cw_zdrv_in;
Systemstate s_frame_drive_status_limit_switch_ccw_zdrv_out;
Systemstate s_frame_drive_status_limit_switch_ccw_zdrv_in;
Systemstate s_frame_drive_status_break_released_zdrv_out;
Systemstate s_frame_drive_status_break_released_zdrv_in;
Systemstate s_frame_drive_status_remote_output_status_zdrv_out;
Systemstate s_frame_drive_status_remote_output_status_zdrv_in;
Systemstate s_frame_drive_status_fault_zdrv_out;
Systemstate s_frame_drive_status_fault_zdrv_in;





Systemstate s_frame_x_drive_emcy_emergency_error_code_out;
Systemstate s_frame_x_drive_emcy_emergency_error_code_in;
Systemstate s_frame_x_drive_emcy_error_register_out;
Systemstate s_frame_x_drive_emcy_error_register_in;
Systemstate s_frame_x_drive_emcy_resolver_encoder_error_out;
Systemstate s_frame_x_drive_emcy_resolver_encoder_error_in;
Systemstate s_frame_x_drive_emcy_over_under_voltage_power_stage_out;
Systemstate s_frame_x_drive_emcy_over_under_voltage_power_stage_in;
Systemstate s_frame_x_drive_emcy_over_temerature_motor_out;
Systemstate s_frame_x_drive_emcy_over_temerature_motor_in;
Systemstate s_frame_x_drive_emcy_over_temerature_power_stage_out;
Systemstate s_frame_x_drive_emcy_over_temerature_power_stage_in;
Systemstate s_frame_x_drive_emcy_over_current_out;
Systemstate s_frame_x_drive_emcy_over_current_in;
Systemstate s_frame_x_drive_emcy_driver_fault_out;
Systemstate s_frame_x_drive_emcy_driver_fault_in;
Systemstate s_frame_x_drive_emcy_external_hardware_enable_missing_out;
Systemstate s_frame_x_drive_emcy_external_hardware_enable_missing_in;
Systemstate s_frame_x_drive_emcy_absolute_position_limit_reached_out;
Systemstate s_frame_x_drive_emcy_absolute_position_limit_reached_in;
Systemstate s_frame_x_drive_emcy_reserved_for_bus_error_out;
Systemstate s_frame_x_drive_emcy_reserved_for_bus_error_in;
Systemstate s_frame_x_drive_emcy_reserved_for_earth_fault_out;
Systemstate s_frame_x_drive_emcy_reserved_for_earth_fault_in;
Systemstate s_frame_x_drive_emcy_short_circuit_phase_u_out;
Systemstate s_frame_x_drive_emcy_short_circuit_phase_u_in;
Systemstate s_frame_x_drive_emcy_short_circuit_phase_v_out;
Systemstate s_frame_x_drive_emcy_short_circuit_phase_v_in;
Systemstate s_frame_x_drive_emcy_short_circuit_phase_w_out;
Systemstate s_frame_x_drive_emcy_short_circuit_phase_w_in;
Systemstate s_frame_x_drive_emcy_reserved_for_io_module_error_out;
Systemstate s_frame_x_drive_emcy_reserved_for_io_module_error_in;
Systemstate s_frame_x_drive_emcy_stop_because_external_hw_brake_release_was_cleared_out;
Systemstate s_frame_x_drive_emcy_stop_because_external_hw_brake_release_was_cleared_in;
Systemstate s_frame_x_drive_emcy_security_loop_out;
Systemstate s_frame_x_drive_emcy_security_loop_in;

Systemstate s_frame_y_drive_emcy_emergency_error_code_out;
Systemstate s_frame_y_drive_emcy_emergency_error_code_in;
Systemstate s_frame_y_drive_emcy_error_register_out;
Systemstate s_frame_y_drive_emcy_error_register_in;
Systemstate s_frame_y_drive_emcy_resolver_encoder_error_out;
Systemstate s_frame_y_drive_emcy_resolver_encoder_error_in;
Systemstate s_frame_y_drive_emcy_over_under_voltage_power_stage_out;
Systemstate s_frame_y_drive_emcy_over_under_voltage_power_stage_in;
Systemstate s_frame_y_drive_emcy_over_temerature_motor_out;
Systemstate s_frame_y_drive_emcy_over_temerature_motor_in;
Systemstate s_frame_y_drive_emcy_over_temerature_power_stage_out;
Systemstate s_frame_y_drive_emcy_over_temerature_power_stage_in;
Systemstate s_frame_y_drive_emcy_over_current_out;
Systemstate s_frame_y_drive_emcy_over_current_in;
Systemstate s_frame_y_drive_emcy_driver_fault_out;
Systemstate s_frame_y_drive_emcy_driver_fault_in;
Systemstate s_frame_y_drive_emcy_external_hardware_enable_missing_out;
Systemstate s_frame_y_drive_emcy_external_hardware_enable_missing_in;
Systemstate s_frame_y_drive_emcy_absolute_position_limit_reached_out;
Systemstate s_frame_y_drive_emcy_absolute_position_limit_reached_in;
Systemstate s_frame_y_drive_emcy_reserved_for_bus_error_out;
Systemstate s_frame_y_drive_emcy_reserved_for_bus_error_in;
Systemstate s_frame_y_drive_emcy_reserved_for_earth_fault_out;
Systemstate s_frame_y_drive_emcy_reserved_for_earth_fault_in;
Systemstate s_frame_y_drive_emcy_short_circuit_phase_u_out;
Systemstate s_frame_y_drive_emcy_short_circuit_phase_u_in;
Systemstate s_frame_y_drive_emcy_short_circuit_phase_v_out;
Systemstate s_frame_y_drive_emcy_short_circuit_phase_v_in;
Systemstate s_frame_y_drive_emcy_short_circuit_phase_w_out;
Systemstate s_frame_y_drive_emcy_short_circuit_phase_w_in;
Systemstate s_frame_y_drive_emcy_reserved_for_io_module_error_out;
Systemstate s_frame_y_drive_emcy_reserved_for_io_module_error_in;
Systemstate s_frame_y_drive_emcy_stop_because_external_hw_brake_release_was_cleared_out;
Systemstate s_frame_y_drive_emcy_stop_because_external_hw_brake_release_was_cleared_in;
Systemstate s_frame_y_drive_emcy_security_loop_out;
Systemstate s_frame_y_drive_emcy_security_loop_in;

Systemstate s_frame_z_drive_emcy_emergency_error_code_out;
Systemstate s_frame_z_drive_emcy_emergency_error_code_in;
Systemstate s_frame_z_drive_emcy_error_register_out;
Systemstate s_frame_z_drive_emcy_error_register_in;
Systemstate s_frame_z_drive_emcy_resolver_encoder_error_out;
Systemstate s_frame_z_drive_emcy_resolver_encoder_error_in;
Systemstate s_frame_z_drive_emcy_over_under_voltage_power_stage_out;
Systemstate s_frame_z_drive_emcy_over_under_voltage_power_stage_in;
Systemstate s_frame_z_drive_emcy_over_temerature_motor_out;
Systemstate s_frame_z_drive_emcy_over_temerature_motor_in;
Systemstate s_frame_z_drive_emcy_over_temerature_power_stage_out;
Systemstate s_frame_z_drive_emcy_over_temerature_power_stage_in;
Systemstate s_frame_z_drive_emcy_over_current_out;
Systemstate s_frame_z_drive_emcy_over_current_in;
Systemstate s_frame_z_drive_emcy_driver_fault_out;
Systemstate s_frame_z_drive_emcy_driver_fault_in;
Systemstate s_frame_z_drive_emcy_external_hardware_enable_missing_out;
Systemstate s_frame_z_drive_emcy_external_hardware_enable_missing_in;
Systemstate s_frame_z_drive_emcy_absolute_position_limit_reached_out;
Systemstate s_frame_z_drive_emcy_absolute_position_limit_reached_in;
Systemstate s_frame_z_drive_emcy_reserved_for_bus_error_out;
Systemstate s_frame_z_drive_emcy_reserved_for_bus_error_in;
Systemstate s_frame_z_drive_emcy_reserved_for_earth_fault_out;
Systemstate s_frame_z_drive_emcy_reserved_for_earth_fault_in;
Systemstate s_frame_z_drive_emcy_short_circuit_phase_u_out;
Systemstate s_frame_z_drive_emcy_short_circuit_phase_u_in;
Systemstate s_frame_z_drive_emcy_short_circuit_phase_v_out;
Systemstate s_frame_z_drive_emcy_short_circuit_phase_v_in;
Systemstate s_frame_z_drive_emcy_short_circuit_phase_w_out;
Systemstate s_frame_z_drive_emcy_short_circuit_phase_w_in;
Systemstate s_frame_z_drive_emcy_reserved_for_io_module_error_out;
Systemstate s_frame_z_drive_emcy_reserved_for_io_module_error_in;
Systemstate s_frame_z_drive_emcy_stop_because_external_hw_brake_release_was_cleared_out;
Systemstate s_frame_z_drive_emcy_stop_because_external_hw_brake_release_was_cleared_in;
Systemstate s_frame_z_drive_emcy_security_loop_out;
Systemstate s_frame_z_drive_emcy_security_loop_in;

// --------------------------------------------
// --------- PARAMETER INITIALIZATION ---------
Globals
{
  s_rtr_drive_request      = 0;
  s_rtr_drive_response     = 0;

  s_frame_drive_target_pos_xdrv_out = 0;
  s_frame_drive_target_pos_xdrv_in = 0;
  s_frame_drive_target_speed_xdrv_out = 0;
  s_frame_drive_target_speed_xdrv_in = 0;
  s_frame_drive_target_current_xdrv_out = 0;
  s_frame_drive_target_current_xdrv_in = 0;

  s_frame_drive_target_pos_ydrv_out = 0;
  s_frame_drive_target_pos_ydrv_in = 0;
  s_frame_drive_target_speed_ydrv_out = 0;
  s_frame_drive_target_speed_ydrv_in = 0;
  s_frame_drive_target_current_ydrv_out = 0;
  s_frame_drive_target_current_ydrv_in = 0;

  s_frame_drive_target_pos_zdrv_out = 0;
  s_frame_drive_target_pos_zdrv_in = 0;
  s_frame_drive_target_speed_zdrv_out = 0;
  s_frame_drive_target_speed_zdrv_in = 0;
  s_frame_drive_target_current_zdrv_out = 0;
  s_frame_drive_target_current_zdrv_in = 0;



  s_frame_drive_control_mode_xdrv_out = 0;
  s_frame_drive_control_mode_xdrv_in = 0;
  s_frame_drive_control_enable_xdrv_out = 0;
  s_frame_drive_control_enable_xdrv_in = 0;
  s_frame_drive_control_break_release_xdrv_out = 0;
  s_frame_drive_control_break_release_xdrv_in = 0;
  s_frame_drive_control_reset_fault_xdrv_out = 0;
  s_frame_drive_control_reset_fault_xdrv_in = 0;
  s_frame_drive_control_calibrate_pos_xdrv_out = 0;
  s_frame_drive_control_calibrate_pos_xdrv_in = 0;
  s_frame_drive_control_remote_digital_output_xdrv_out = 0;
  s_frame_drive_control_remote_digital_output_xdrv_in = 0;

  s_frame_drive_control_mode_ydrv_out = 0;
  s_frame_drive_control_mode_ydrv_in = 0;
  s_frame_drive_control_enable_ydrv_out = 0;
  s_frame_drive_control_enable_ydrv_in = 0;
  s_frame_drive_control_break_release_ydrv_out = 0;
  s_frame_drive_control_break_release_ydrv_in = 0;
  s_frame_drive_control_reset_fault_ydrv_out = 0;
  s_frame_drive_control_reset_fault_ydrv_in = 0;
  s_frame_drive_control_calibrate_pos_ydrv_out = 0;
  s_frame_drive_control_calibrate_pos_ydrv_in = 0;
  s_frame_drive_control_remote_digital_output_ydrv_out = 0;
  s_frame_drive_control_remote_digital_output_ydrv_in = 0;

  s_frame_drive_control_mode_zdrv_out = 0;
  s_frame_drive_control_mode_zdrv_in = 0;
  s_frame_drive_control_enable_zdrv_out = 0;
  s_frame_drive_control_enable_zdrv_in = 0;
  s_frame_drive_control_break_release_zdrv_out = 0;
  s_frame_drive_control_break_release_zdrv_in = 0;
  s_frame_drive_control_reset_fault_zdrv_out = 0;
  s_frame_drive_control_reset_fault_zdrv_in = 0;
  s_frame_drive_control_calibrate_pos_zdrv_out = 0;
  s_frame_drive_control_calibrate_pos_zdrv_in = 0;
  s_frame_drive_control_remote_digital_output_zdrv_out = 0;
  s_frame_drive_control_remote_digital_output_zdrv_in = 0;



  s_frame_drive_actual_pos_xdrv_out = 0;
  s_frame_drive_actual_pos_xdrv_in = 0;
  s_frame_drive_actual_speed_xdrv_out = 0;
  s_frame_drive_actual_speed_xdrv_in = 0;
  s_frame_drive_actual_current_xdrv_out = 0;
  s_frame_drive_actual_current_xdrv_in = 0;
  s_frame_drive_status_ready_xdrv_out = 0;
  s_frame_drive_status_ready_xdrv_in = 0;
  s_frame_drive_status_enable_xdrv_out = 0;
  s_frame_drive_status_enable_xdrv_in = 0;
  s_frame_drive_status_inpos_xdrv_out = 0;
  s_frame_drive_status_inpos_xdrv_in = 0;
  s_frame_drive_status_limit_switch_cw_xdrv_out = 0;
  s_frame_drive_status_limit_switch_cw_xdrv_in = 0;
  s_frame_drive_status_limit_switch_ccw_xdrv_out = 0;
  s_frame_drive_status_limit_switch_ccw_xdrv_in = 0;
  s_frame_drive_status_break_released_xdrv_out = 0;
  s_frame_drive_status_break_released_xdrv_in = 0;
  s_frame_drive_status_remote_output_status_xdrv_out = 0;
  s_frame_drive_status_remote_output_status_xdrv_in = 0; 
  s_frame_drive_status_fault_xdrv_out = 0;
  s_frame_drive_status_fault_xdrv_in = 0;

  s_frame_drive_actual_pos_ydrv_out = 0;
  s_frame_drive_actual_pos_ydrv_in = 0;
  s_frame_drive_actual_speed_ydrv_out = 0;
  s_frame_drive_actual_speed_ydrv_in = 0;
  s_frame_drive_actual_current_ydrv_out = 0;
  s_frame_drive_actual_current_ydrv_in = 0;
  s_frame_drive_status_ready_ydrv_out = 0;
  s_frame_drive_status_ready_ydrv_in = 0;
  s_frame_drive_status_enable_ydrv_out = 0;
  s_frame_drive_status_enable_ydrv_in = 0;
  s_frame_drive_status_inpos_ydrv_out = 0;
  s_frame_drive_status_inpos_ydrv_in = 0;
  s_frame_drive_status_limit_switch_cw_ydrv_out = 0;
  s_frame_drive_status_limit_switch_cw_ydrv_in = 0;
  s_frame_drive_status_limit_switch_ccw_ydrv_out = 0;
  s_frame_drive_status_limit_switch_ccw_ydrv_in = 0;
  s_frame_drive_status_break_released_ydrv_out = 0;
  s_frame_drive_status_break_released_ydrv_in = 0;
  s_frame_drive_status_remote_output_status_ydrv_out = 0;
  s_frame_drive_status_remote_output_status_ydrv_in = 0; 
  s_frame_drive_status_fault_ydrv_out = 0;
  s_frame_drive_status_fault_ydrv_in = 0;

  s_frame_drive_actual_pos_zdrv_out = 0;
  s_frame_drive_actual_pos_zdrv_in = 0;
  s_frame_drive_actual_speed_zdrv_out = 0;
  s_frame_drive_actual_speed_zdrv_in = 0;
  s_frame_drive_actual_current_zdrv_out = 0;
  s_frame_drive_actual_current_zdrv_in = 0;
  s_frame_drive_status_ready_zdrv_out = 0;
  s_frame_drive_status_ready_zdrv_in = 0;
  s_frame_drive_status_enable_zdrv_out = 0;
  s_frame_drive_status_enable_zdrv_in = 0;
  s_frame_drive_status_inpos_zdrv_out = 0;
  s_frame_drive_status_inpos_zdrv_in = 0;
  s_frame_drive_status_limit_switch_cw_zdrv_out = 0;
  s_frame_drive_status_limit_switch_cw_zdrv_in = 0;
  s_frame_drive_status_limit_switch_ccw_zdrv_out = 0;
  s_frame_drive_status_limit_switch_ccw_zdrv_in = 0;
  s_frame_drive_status_break_released_zdrv_out = 0;
  s_frame_drive_status_break_released_zdrv_in = 0;
  s_frame_drive_status_remote_output_status_zdrv_out = 0;
  s_frame_drive_status_remote_output_status_zdrv_in = 0; 
  s_frame_drive_status_fault_zdrv_out = 0;
  s_frame_drive_status_fault_zdrv_in = 0;



  s_frame_x_drive_emcy_emergency_error_code_out = 0;
  s_frame_x_drive_emcy_emergency_error_code_in = 0;
  s_frame_x_drive_emcy_error_register_out = 0;
  s_frame_x_drive_emcy_error_register_in = 0;
  s_frame_x_drive_emcy_resolver_encoder_error_out = 0;
  s_frame_x_drive_emcy_resolver_encoder_error_in = 0;
  s_frame_x_drive_emcy_over_under_voltage_power_stage_out = 0;
  s_frame_x_drive_emcy_over_under_voltage_power_stage_in = 0;
  s_frame_x_drive_emcy_over_temerature_motor_out = 0;
  s_frame_x_drive_emcy_over_temerature_motor_in = 0;
  s_frame_x_drive_emcy_over_temerature_power_stage_out = 0;
  s_frame_x_drive_emcy_over_temerature_power_stage_in = 0;
  s_frame_x_drive_emcy_over_current_out = 0;
  s_frame_x_drive_emcy_over_current_in = 0;
  s_frame_x_drive_emcy_driver_fault_out = 0;
  s_frame_x_drive_emcy_driver_fault_in = 0;
  s_frame_x_drive_emcy_external_hardware_enable_missing_out = 0;
  s_frame_x_drive_emcy_external_hardware_enable_missing_in = 0;
  s_frame_x_drive_emcy_absolute_position_limit_reached_out = 0;
  s_frame_x_drive_emcy_absolute_position_limit_reached_in = 0;
  s_frame_x_drive_emcy_reserved_for_bus_error_out = 0;
  s_frame_x_drive_emcy_reserved_for_bus_error_in = 0;
  s_frame_x_drive_emcy_reserved_for_earth_fault_out = 0;
  s_frame_x_drive_emcy_reserved_for_earth_fault_in = 0;
  s_frame_x_drive_emcy_short_circuit_phase_u_out = 0;
  s_frame_x_drive_emcy_short_circuit_phase_u_in = 0;
  s_frame_x_drive_emcy_short_circuit_phase_v_out = 0;
  s_frame_x_drive_emcy_short_circuit_phase_v_in = 0;
  s_frame_x_drive_emcy_short_circuit_phase_w_out = 0;
  s_frame_x_drive_emcy_short_circuit_phase_w_in = 0;
  s_frame_x_drive_emcy_reserved_for_io_module_error_out = 0;
  s_frame_x_drive_emcy_reserved_for_io_module_error_in = 0;
  s_frame_x_drive_emcy_stop_because_external_hw_brake_release_was_cleared_out = 0;
  s_frame_x_drive_emcy_stop_because_external_hw_brake_release_was_cleared_in = 0;
  s_frame_x_drive_emcy_security_loop_out = 0;
  s_frame_x_drive_emcy_security_loop_in = 0;

  s_frame_y_drive_emcy_emergency_error_code_out = 0;
  s_frame_y_drive_emcy_emergency_error_code_in = 0;
  s_frame_y_drive_emcy_error_register_out = 0;
  s_frame_y_drive_emcy_error_register_in = 0;
  s_frame_y_drive_emcy_resolver_encoder_error_out = 0;
  s_frame_y_drive_emcy_resolver_encoder_error_in = 0;
  s_frame_y_drive_emcy_over_under_voltage_power_stage_out = 0;
  s_frame_y_drive_emcy_over_under_voltage_power_stage_in = 0;
  s_frame_y_drive_emcy_over_temerature_motor_out = 0;
  s_frame_y_drive_emcy_over_temerature_motor_in = 0;
  s_frame_y_drive_emcy_over_temerature_power_stage_out = 0;
  s_frame_y_drive_emcy_over_temerature_power_stage_in = 0;
  s_frame_y_drive_emcy_over_current_out = 0;
  s_frame_y_drive_emcy_over_current_in = 0;
  s_frame_y_drive_emcy_driver_fault_out = 0;
  s_frame_y_drive_emcy_driver_fault_in = 0;
  s_frame_y_drive_emcy_external_hardware_enable_missing_out = 0;
  s_frame_y_drive_emcy_external_hardware_enable_missing_in = 0;
  s_frame_y_drive_emcy_absolute_position_limit_reached_out = 0;
  s_frame_y_drive_emcy_absolute_position_limit_reached_in = 0;
  s_frame_y_drive_emcy_reserved_for_bus_error_out = 0;
  s_frame_y_drive_emcy_reserved_for_bus_error_in = 0;
  s_frame_y_drive_emcy_reserved_for_earth_fault_out = 0;
  s_frame_y_drive_emcy_reserved_for_earth_fault_in = 0;
  s_frame_y_drive_emcy_short_circuit_phase_u_out = 0;
  s_frame_y_drive_emcy_short_circuit_phase_u_in = 0;
  s_frame_y_drive_emcy_short_circuit_phase_v_out = 0;
  s_frame_y_drive_emcy_short_circuit_phase_v_in = 0;
  s_frame_y_drive_emcy_short_circuit_phase_w_out = 0;
  s_frame_y_drive_emcy_short_circuit_phase_w_in = 0;
  s_frame_y_drive_emcy_reserved_for_io_module_error_out = 0;
  s_frame_y_drive_emcy_reserved_for_io_module_error_in = 0;
  s_frame_y_drive_emcy_stop_because_external_hw_brake_release_was_cleared_out = 0;
  s_frame_y_drive_emcy_stop_because_external_hw_brake_release_was_cleared_in = 0;
  s_frame_y_drive_emcy_security_loop_out = 0;
  s_frame_y_drive_emcy_security_loop_in = 0;

  s_frame_z_drive_emcy_emergency_error_code_out = 0;
  s_frame_z_drive_emcy_emergency_error_code_in = 0;
  s_frame_z_drive_emcy_error_register_out = 0;
  s_frame_z_drive_emcy_error_register_in = 0;
  s_frame_z_drive_emcy_resolver_encoder_error_out = 0;
  s_frame_z_drive_emcy_resolver_encoder_error_in = 0;
  s_frame_z_drive_emcy_over_under_voltage_power_stage_out = 0;
  s_frame_z_drive_emcy_over_under_voltage_power_stage_in = 0;
  s_frame_z_drive_emcy_over_temerature_motor_out = 0;
  s_frame_z_drive_emcy_over_temerature_motor_in = 0;
  s_frame_z_drive_emcy_over_temerature_power_stage_out = 0;
  s_frame_z_drive_emcy_over_temerature_power_stage_in = 0;
  s_frame_z_drive_emcy_over_current_out = 0;
  s_frame_z_drive_emcy_over_current_in = 0;
  s_frame_z_drive_emcy_driver_fault_out = 0;
  s_frame_z_drive_emcy_driver_fault_in = 0;
  s_frame_z_drive_emcy_external_hardware_enable_missing_out = 0;
  s_frame_z_drive_emcy_external_hardware_enable_missing_in = 0;
  s_frame_z_drive_emcy_absolute_position_limit_reached_out = 0;
  s_frame_z_drive_emcy_absolute_position_limit_reached_in = 0;
  s_frame_z_drive_emcy_reserved_for_bus_error_out = 0;
  s_frame_z_drive_emcy_reserved_for_bus_error_in = 0;
  s_frame_z_drive_emcy_reserved_for_earth_fault_out = 0;
  s_frame_z_drive_emcy_reserved_for_earth_fault_in = 0;
  s_frame_z_drive_emcy_short_circuit_phase_u_out = 0;
  s_frame_z_drive_emcy_short_circuit_phase_u_in = 0;
  s_frame_z_drive_emcy_short_circuit_phase_v_out = 0;
  s_frame_z_drive_emcy_short_circuit_phase_v_in = 0;
  s_frame_z_drive_emcy_short_circuit_phase_w_out = 0;
  s_frame_z_drive_emcy_short_circuit_phase_w_in = 0;
  s_frame_z_drive_emcy_reserved_for_io_module_error_out = 0;
  s_frame_z_drive_emcy_reserved_for_io_module_error_in = 0;
  s_frame_z_drive_emcy_stop_because_external_hw_brake_release_was_cleared_out = 0;
  s_frame_z_drive_emcy_stop_because_external_hw_brake_release_was_cleared_in = 0;
  s_frame_z_drive_emcy_security_loop_out = 0;
  s_frame_z_drive_emcy_security_loop_in = 0;

};

// --------------------------------------------
// ------------------ RTR ---------------------
val rtr_drive_x = 0;
val rtr_drive_y = 0;
val rtr_drive_z = 0;


/*
 * 
 * Interface CANopen HV : IO Module
 *
 * 
 */


val io_module_node_id = 0x48;

val cob_io_modul_ansteuerung_ausgaenge =  io_module_node_id + 0x280;
val cob_io_modul_betriebsart = io_module_node_id + 0x180;
val cob_io_modul_force_pdo_transmit_hv = 0;
val cob_io_modul_geraetestatus = io_module_node_id + 0x200;
val cob_io_modul_zustand_heckverteiler_1 = io_module_node_id + 0x300;
val cob_io_modul_zustand_heckverteiler_2 = io_module_node_id + 0x400;
val cob_io_modul_sensordaten = io_module_node_id + 0x500;
val cob_io_modul_fahrzeugwinkel = io_module_node_id + 1 + 0x200;
val cob_io_modul_luftdruck_pneumatiktank = io_module_node_id + 1 + 0x300;
val cob_io_modul_software_version = io_module_node_id + 1 + 0x400;
val cob_io_modul_fehler = io_module_node_id + 1 + 0x500;
val cob_io_modul_rueckmeldung_ios = io_module_node_id + 2 + 0x200;
val cob_io_modul_sensordaten_windmesser = io_module_node_id + 2 + 0x300;


val rtr_io_modul_ansteuerung_ausgaenge = 0;
val rtr_io_modul_betriebsart = 0;
val rtr_io_modul_force_pdo_transmit_hv = 0;
val rtr_io_modul_geraetestatus = 0;
val rtr_io_modul_zustand_heckverteiler_1 = 0;
val rtr_io_modul_zustand_heckverteiler_2 = 0;
val rtr_io_modul_sensordaten = 0;
val rtr_io_modul_fahrzeugwinkel = 0;
val rtr_io_modul_luftdruck_pneumatiktank = 0;
val rtr_io_modul_software_version = 0;
val rtr_io_modul_fehler = 0;
val rtr_io_modul_rueckmeldung_ios = 0;
val rtr_io_modul_sensordaten_windmesser = 0;


Systemstate io_modul_betriebsart_out;
Systemstate io_modul_betriebsart_in;


Systemstate io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_1_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_1_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_2_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_2_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_1_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_1_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_2_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_2_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_1_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_1_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_2_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_2_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_3_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_3_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_1_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_1_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_2_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_2_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_3_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_3_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_4_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_4_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_5_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_5_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_6_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_6_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_7_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_7_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_8_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_8_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_oeffnen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_oeffnen_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_schliessen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_schliessen_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_venturiventil_2_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_venturiventil_2_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_venturiventil_3_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs13_venturiventil_3_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_in;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out;
Systemstate io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_in;


Systemstate io_modul_force_pdo_transmit_hv_change_counter_out;
Systemstate io_modul_force_pdo_transmit_hv_change_counter_in;


Systemstate io_modul_geraetestatus_rueckmeldung_betriebsart_out;
Systemstate io_modul_geraetestatus_rueckmeldung_betriebsart_in;


Systemstate io_modul_zustand_heckverteiler_1_cs0_radar_power_bite_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_radar_power_bite_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_radaranlage_power_warnung_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_radaranlage_power_warnung_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_1_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_1_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_1_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_1_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_2_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_2_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_3_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_3_in;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_4_out;
Systemstate io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_4_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_in_parkposition_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_rueckwaertsgang_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_rueckwaertsgang_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_in_neutral_gangstellung_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_in_neutral_gangstellung_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_feststellbremse_betaetigt_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_feststellbremse_betaetigt_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_serviceschalter_betaetigt_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_serviceschalter_betaetigt_in;
Systemstate io_modul_zustand_heckverteiler_1_cs1_reserve_sicherheit_in_out;
Systemstate io_modul_zustand_heckverteiler_1_cs1_reserve_sicherheit_in_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_antrieb_x_enable_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_antrieb_x_enable_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_antrieb_y_enable_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_antrieb_y_enable_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_antrieb_z_enable_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_antrieb_z_enable_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_sicherheitskreis_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_sicherheitskreis_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_1_optokoppler_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_1_optokoppler_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_2_optokoppler_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_2_optokoppler_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_3_optokoppler_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_3_optokoppler_in;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_4_optokoppler_out;
Systemstate io_modul_zustand_heckverteiler_1_cs2_in_reserve_4_optokoppler_in;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_index_position_z_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_index_position_z_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_passiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_passiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in;

Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_passiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_passiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_aktiv_out;
Systemstate io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_aktiv_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_0_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_0_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_1_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_1_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_2_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_2_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_3_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_3_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_4_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_4_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_5_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_5_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_6_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_6_in;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_7_out;
Systemstate io_modul_zustand_heckverteiler_2_cs11_errorcode_7_in;


Systemstate io_modul_sensordaten_x_plattform_talin_out;
Systemstate io_modul_sensordaten_x_plattform_talin_in;
Systemstate io_modul_sensordaten_y_plattform_talin_out;
Systemstate io_modul_sensordaten_y_plattform_talin_in;


Systemstate io_modul_fahrzeugwinkel_talin_data_valid_out;
Systemstate io_modul_fahrzeugwinkel_talin_data_valid_in;
Systemstate io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_out;
Systemstate io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_in;
Systemstate io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_out;
Systemstate io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_in;


Systemstate io_modul_luftdruck_pneumatiktank_systemdruck_out;
Systemstate io_modul_luftdruck_pneumatiktank_systemdruck_in;
Systemstate io_modul_luftdruck_pneumatiktank_druck_stuetze_links_out;
Systemstate io_modul_luftdruck_pneumatiktank_druck_stuetze_links_in;
Systemstate io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_out;
Systemstate io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_in;


Systemstate io_modul_software_version_heckverteiler_out;
Systemstate io_modul_software_version_heckverteiler_in;


Systemstate io_modul_fehler_kampfschalter_out;
Systemstate io_modul_fehler_kampfschalter_in;
Systemstate io_modul_fehler_index_position_x_out;
Systemstate io_modul_fehler_index_position_x_in;
Systemstate io_modul_fehler_index_position_y_out;
Systemstate io_modul_fehler_index_position_y_in;
Systemstate io_modul_fehler_arbeitsbereich_y_out;
Systemstate io_modul_fehler_arbeitsbereich_y_in;
Systemstate io_modul_fehler_mast_indexposition_z_out;
Systemstate io_modul_fehler_mast_indexposition_z_in;
Systemstate io_modul_fehler_mast_endanschlag_unten_z_out;
Systemstate io_modul_fehler_mast_endanschlag_unten_z_in;
Systemstate io_modul_fehler_mast_endanschlag_oben_z_out;
Systemstate io_modul_fehler_mast_endanschlag_oben_z_in;
Systemstate io_modul_fehler_mast_untere_betriebsposition_z_out;
Systemstate io_modul_fehler_mast_untere_betriebsposition_z_in;
Systemstate io_modul_fehler_haube_riegel_1_verriegelt_out;
Systemstate io_modul_fehler_haube_riegel_1_verriegelt_in;
Systemstate io_modul_fehler_haube_riegel_1_offen_out;
Systemstate io_modul_fehler_haube_riegel_1_offen_in;
Systemstate io_modul_fehler_haube_riegel_2_verriegelt_out;
Systemstate io_modul_fehler_haube_riegel_2_verriegelt_in;
Systemstate io_modul_fehler_haube_riegel_2_offen_out;
Systemstate io_modul_fehler_haube_riegel_2_offen_in;
Systemstate io_modul_fehler_verzurrung_1_verriegelt_out;
Systemstate io_modul_fehler_verzurrung_1_verriegelt_in;
Systemstate io_modul_fehler_verzurrung_1_offen_out;
Systemstate io_modul_fehler_verzurrung_1_offen_in;
Systemstate io_modul_fehler_verzurrung_2_verriegelt_out;
Systemstate io_modul_fehler_verzurrung_2_verriegelt_in;
Systemstate io_modul_fehler_verzurrung_2_offen_out;
Systemstate io_modul_fehler_verzurrung_2_offen_in;
Systemstate io_modul_fehler_haubenzylinder_offen_out;
Systemstate io_modul_fehler_haubenzylinder_offen_in;
Systemstate io_modul_fehler_haubenzylinder_geschlossen_out;
Systemstate io_modul_fehler_haubenzylinder_geschlossen_in;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_offen_links_out;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_offen_links_in;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_geschlossen_links_out;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_geschlossen_links_in;
Systemstate io_modul_fehler_stuetze_magnet_oben_links_out;
Systemstate io_modul_fehler_stuetze_magnet_oben_links_in;
Systemstate io_modul_fehler_stuetze_magnet_unten_links_out;
Systemstate io_modul_fehler_stuetze_magnet_unten_links_in;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_offen_rechts_out;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_offen_rechts_in;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_geschlossen_rechts_out;
Systemstate io_modul_fehler_stuetze_endlage_klemmung_geschlossen_rechts_in;
Systemstate io_modul_fehler_stuetze_magnet_oben_rechts_out;
Systemstate io_modul_fehler_stuetze_magnet_oben_rechts_in;
Systemstate io_modul_fehler_stuetze_magnet_unten_rechts_out;
Systemstate io_modul_fehler_stuetze_magnet_unten_rechts_in;
Systemstate io_modul_fehler_schalter_teleskopspitze_out;
Systemstate io_modul_fehler_schalter_teleskopspitze_in;
Systemstate io_modul_fehler_reserveschalter_1_out;
Systemstate io_modul_fehler_reserveschalter_1_in;
Systemstate io_modul_fehler_mast_endanschlag_unten_2_z_out;
Systemstate io_modul_fehler_mast_endanschlag_unten_2_z_in;
Systemstate io_modul_fehler_mast_endanschlag_oben_2_z_out;
Systemstate io_modul_fehler_mast_endanschlag_oben_2_z_in;
Systemstate io_modul_fehler_reserveschalter_2_out;
Systemstate io_modul_fehler_reserveschalter_2_in;
Systemstate io_modul_fehler_reserveschalter_3_out;
Systemstate io_modul_fehler_reserveschalter_3_in;


Systemstate io_modul_rueckmeldung_ios_enable_ventil_0_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_0_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_1_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_1_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_2_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_2_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_3_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_3_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_4_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_4_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_5_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_5_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_6_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_6_in;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_7_out;
Systemstate io_modul_rueckmeldung_ios_enable_ventil_7_in;
Systemstate io_modul_rueckmeldung_ios_enable_svza_out;
Systemstate io_modul_rueckmeldung_ios_enable_svza_in;
Systemstate io_modul_rueckmeldung_ios_enable_svze_out;
Systemstate io_modul_rueckmeldung_ios_enable_svze_in;
Systemstate io_modul_rueckmeldung_ios_enable_svk_out;
Systemstate io_modul_rueckmeldung_ios_enable_svk_in;
Systemstate io_modul_rueckmeldung_ios_enable_hvzs_out;
Systemstate io_modul_rueckmeldung_ios_enable_hvzs_in;
Systemstate io_modul_rueckmeldung_ios_enable_hvzo_out;
Systemstate io_modul_rueckmeldung_ios_enable_hvzo_in;
Systemstate io_modul_rueckmeldung_ios_enable_hvzsn_out;
Systemstate io_modul_rueckmeldung_ios_enable_hvzsn_in;
Systemstate io_modul_rueckmeldung_ios_enable_hvzon_out;
Systemstate io_modul_rueckmeldung_ios_enable_hvzon_in;
Systemstate io_modul_rueckmeldung_ios_enable_hro_out;
Systemstate io_modul_rueckmeldung_ios_enable_hro_in;
Systemstate io_modul_rueckmeldung_ios_enable_hrs_out;
Systemstate io_modul_rueckmeldung_ios_enable_hrs_in;
Systemstate io_modul_rueckmeldung_ios_enable_vz1o_out;
Systemstate io_modul_rueckmeldung_ios_enable_vz1o_in;
Systemstate io_modul_rueckmeldung_ios_enable_vz1s_out;
Systemstate io_modul_rueckmeldung_ios_enable_vz1s_in;
Systemstate io_modul_rueckmeldung_ios_enable_vz2o_out;
Systemstate io_modul_rueckmeldung_ios_enable_vz2o_in;
Systemstate io_modul_rueckmeldung_ios_enable_vz2s_out;
Systemstate io_modul_rueckmeldung_ios_enable_vz2s_in;
Systemstate io_modul_rueckmeldung_ios_enable_vv1_out;
Systemstate io_modul_rueckmeldung_ios_enable_vv1_in;
Systemstate io_modul_rueckmeldung_ios_enable_vv2_out;
Systemstate io_modul_rueckmeldung_ios_enable_vv2_in;
Systemstate io_modul_rueckmeldung_ios_enable_vv3_out;
Systemstate io_modul_rueckmeldung_ios_enable_vv3_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_1_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_1_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_2_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_2_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_3_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_3_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_4_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_4_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_5_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_5_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_6_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_6_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_7_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_7_in;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_8_out;
Systemstate io_modul_rueckmeldung_ios_enable_reserve_8_in;


Systemstate io_modul_sensordaten_windmesser_gueltig_out;
Systemstate io_modul_sensordaten_windmesser_gueltig_in;
Systemstate io_modul_sensordaten_windmesser_windstaerke_out;
Systemstate io_modul_sensordaten_windmesser_windstaerke_in;


// --------------------------------------------
// ------------- INITIALIZATION ---------------

Globals
{
  io_modul_betriebsart_out  = IO_MODULE_BETRIEBSART_NORMAL;
  io_modul_betriebsart_in   = IO_MODULE_BETRIEBSART_NORMAL;

  io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_1_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_1_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_2_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_2_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_1_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_1_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_2_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_2_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_1_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_1_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_2_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_2_in = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_3_out = 0;
  io_modul_ansteuerung_ausgaenge_cs11_reserve_io_out_gegentakt_3_in = 0;

  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_1_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_1_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_2_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_2_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_3_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_3_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_4_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_4_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_5_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_5_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_6_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_6_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_7_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_7_in = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_8_out = 0;
  io_modul_ansteuerung_ausgaenge_cs12_ventil_reserve_8_in = 0;

  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_in = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_in = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_oeffnen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_oeffnen_in = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_schliessen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_2_schliessen_in = 0;
  io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_in = 0;
  io_modul_ansteuerung_ausgaenge_cs13_venturiventil_2_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_venturiventil_2_in = 0;
  io_modul_ansteuerung_ausgaenge_cs13_venturiventil_3_out = 0;
  io_modul_ansteuerung_ausgaenge_cs13_venturiventil_3_in = 0;

  io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_in = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out = 0;
  io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_in = 0;

  io_modul_force_pdo_transmit_hv_change_counter_out = 0;
  io_modul_force_pdo_transmit_hv_change_counter_in = 0;

  io_modul_geraetestatus_rueckmeldung_betriebsart_out = IO_MODULE_BETRIEBSART_NORMAL;
  io_modul_geraetestatus_rueckmeldung_betriebsart_in  = IO_MODULE_BETRIEBSART_NORMAL;

  io_modul_zustand_heckverteiler_1_cs0_radar_power_bite_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_radar_power_bite_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_radaranlage_power_warnung_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_radaranlage_power_warnung_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_1_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_1_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_1_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_1_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_2_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_2_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_3_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_3_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_4_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_4_in = 0;

  io_modul_zustand_heckverteiler_1_cs1_in_parkposition_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_rueckwaertsgang_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_rueckwaertsgang_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_in_neutral_gangstellung_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_in_neutral_gangstellung_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_feststellbremse_betaetigt_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_feststellbremse_betaetigt_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_serviceschalter_betaetigt_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_serviceschalter_betaetigt_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_reserve_sicherheit_in_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_reserve_sicherheit_in_in = 0;

  io_modul_zustand_heckverteiler_1_cs2_antrieb_x_enable_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_x_enable_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_y_enable_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_y_enable_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_z_enable_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_z_enable_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_sicherheitskreis_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_sicherheitskreis_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_1_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_1_optokoppler_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_2_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_2_optokoppler_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_3_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_3_optokoppler_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_4_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_4_optokoppler_in = 0;

  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs4_index_position_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_index_position_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in = 0;

  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in = 0;

  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in = 0;

  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_aktiv_in = 0;

  io_modul_zustand_heckverteiler_2_cs11_errorcode_0_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_0_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_1_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_1_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_2_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_2_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_3_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_3_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_4_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_4_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_5_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_5_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_6_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_6_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_7_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_7_in = 0;

  io_modul_sensordaten_x_plattform_talin_out = 0;
  io_modul_sensordaten_x_plattform_talin_in = 0;
  io_modul_sensordaten_y_plattform_talin_out = 0;
  io_modul_sensordaten_y_plattform_talin_in = 0;

  io_modul_fahrzeugwinkel_talin_data_valid_out = 0;
  io_modul_fahrzeugwinkel_talin_data_valid_in = 0;
  io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_out = 0;
  io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_in = 0;
  io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_out = 0;
  io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_in = 0;

  io_modul_luftdruck_pneumatiktank_systemdruck_out          = truncate(2*Pneumatics.system_pressure     );
  io_modul_luftdruck_pneumatiktank_systemdruck_in           = truncate(2*Pneumatics.system_pressure     );
  io_modul_luftdruck_pneumatiktank_druck_stuetze_links_out  = truncate(2*Pneumatics.stilt_left_pressure );
  io_modul_luftdruck_pneumatiktank_druck_stuetze_links_in   = truncate(2*Pneumatics.stilt_left_pressure );
  io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_out = truncate(2*Pneumatics.stilt_right_pressure);
  io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_in  = truncate(2*Pneumatics.stilt_right_pressure);

  io_modul_software_version_heckverteiler_out = 0;
  io_modul_software_version_heckverteiler_in = 0;

  io_modul_fehler_kampfschalter_out = 0;
  io_modul_fehler_kampfschalter_in = 0;
  io_modul_fehler_index_position_x_out = 0;
  io_modul_fehler_index_position_x_in = 0;
  io_modul_fehler_index_position_y_out = 0;
  io_modul_fehler_index_position_y_in = 0;
  io_modul_fehler_arbeitsbereich_y_out = 0;
  io_modul_fehler_arbeitsbereich_y_in = 0;
  io_modul_fehler_mast_indexposition_z_out = 0;
  io_modul_fehler_mast_indexposition_z_in = 0;
  io_modul_fehler_mast_endanschlag_unten_z_out = 0;
  io_modul_fehler_mast_endanschlag_unten_z_in = 0;
  io_modul_fehler_mast_endanschlag_oben_z_out = 0;
  io_modul_fehler_mast_endanschlag_oben_z_in = 0;
  io_modul_fehler_mast_untere_betriebsposition_z_out = 0;
  io_modul_fehler_mast_untere_betriebsposition_z_in = 0;
  io_modul_fehler_haube_riegel_1_verriegelt_out = 0;
  io_modul_fehler_haube_riegel_1_verriegelt_in = 0;
  io_modul_fehler_haube_riegel_1_offen_out = 0;
  io_modul_fehler_haube_riegel_1_offen_in = 0;
  io_modul_fehler_haube_riegel_2_verriegelt_out = 0;
  io_modul_fehler_haube_riegel_2_verriegelt_in = 0;
  io_modul_fehler_haube_riegel_2_offen_out = 0;
  io_modul_fehler_haube_riegel_2_offen_in = 0;
  io_modul_fehler_verzurrung_1_verriegelt_out = 0;
  io_modul_fehler_verzurrung_1_verriegelt_in = 0;
  io_modul_fehler_verzurrung_1_offen_out = 0;
  io_modul_fehler_verzurrung_1_offen_in = 0;
  io_modul_fehler_verzurrung_2_verriegelt_out = 0;
  io_modul_fehler_verzurrung_2_verriegelt_in = 0;
  io_modul_fehler_verzurrung_2_offen_out = 0;
  io_modul_fehler_verzurrung_2_offen_in = 0;
  io_modul_fehler_haubenzylinder_offen_out = 0;
  io_modul_fehler_haubenzylinder_offen_in = 0;
  io_modul_fehler_haubenzylinder_geschlossen_out = 0;
  io_modul_fehler_haubenzylinder_geschlossen_in = 0;
  io_modul_fehler_stuetze_endlage_klemmung_offen_links_out = 0;
  io_modul_fehler_stuetze_endlage_klemmung_offen_links_in = 0;
  io_modul_fehler_stuetze_endlage_klemmung_geschlossen_links_out = 0;
  io_modul_fehler_stuetze_endlage_klemmung_geschlossen_links_in = 0;
  io_modul_fehler_stuetze_magnet_oben_links_out = 0;
  io_modul_fehler_stuetze_magnet_oben_links_in = 0;
  io_modul_fehler_stuetze_magnet_unten_links_out = 0;
  io_modul_fehler_stuetze_magnet_unten_links_in = 0;
  io_modul_fehler_stuetze_endlage_klemmung_offen_rechts_out = 0;
  io_modul_fehler_stuetze_endlage_klemmung_offen_rechts_in = 0;
  io_modul_fehler_stuetze_endlage_klemmung_geschlossen_rechts_out = 0;
  io_modul_fehler_stuetze_endlage_klemmung_geschlossen_rechts_in = 0;
  io_modul_fehler_stuetze_magnet_oben_rechts_out = 0;
  io_modul_fehler_stuetze_magnet_oben_rechts_in = 0;
  io_modul_fehler_stuetze_magnet_unten_rechts_out = 0;
  io_modul_fehler_stuetze_magnet_unten_rechts_in = 0;
  io_modul_fehler_schalter_teleskopspitze_out = 0;
  io_modul_fehler_schalter_teleskopspitze_in = 0;
  io_modul_fehler_reserveschalter_1_out = 0;
  io_modul_fehler_reserveschalter_1_in = 0;
  io_modul_fehler_mast_endanschlag_unten_2_z_out = 0;
  io_modul_fehler_mast_endanschlag_unten_2_z_in = 0;
  io_modul_fehler_mast_endanschlag_oben_2_z_out = 0;
  io_modul_fehler_mast_endanschlag_oben_2_z_in = 0;
  io_modul_fehler_reserveschalter_2_out = 0;
  io_modul_fehler_reserveschalter_2_in = 0;
  io_modul_fehler_reserveschalter_3_out = 0;
  io_modul_fehler_reserveschalter_3_in = 0;

  io_modul_rueckmeldung_ios_enable_ventil_0_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_0_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_1_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_1_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_2_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_2_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_3_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_3_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_4_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_4_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_5_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_5_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_6_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_6_in = 0;
  io_modul_rueckmeldung_ios_enable_ventil_7_out = 0;
  io_modul_rueckmeldung_ios_enable_ventil_7_in = 0;
  io_modul_rueckmeldung_ios_enable_svza_out = 0;
  io_modul_rueckmeldung_ios_enable_svza_in = 0;
  io_modul_rueckmeldung_ios_enable_svze_out = 0;
  io_modul_rueckmeldung_ios_enable_svze_in = 0;
  io_modul_rueckmeldung_ios_enable_svk_out = 0;
  io_modul_rueckmeldung_ios_enable_svk_in = 0;
  io_modul_rueckmeldung_ios_enable_hvzs_out = 0;
  io_modul_rueckmeldung_ios_enable_hvzs_in = 0;
  io_modul_rueckmeldung_ios_enable_hvzo_out = 0;
  io_modul_rueckmeldung_ios_enable_hvzo_in = 0;
  io_modul_rueckmeldung_ios_enable_hvzsn_out = 0;
  io_modul_rueckmeldung_ios_enable_hvzsn_in = 0;
  io_modul_rueckmeldung_ios_enable_hvzon_out = 0;
  io_modul_rueckmeldung_ios_enable_hvzon_in = 0;
  io_modul_rueckmeldung_ios_enable_hro_out = 0;
  io_modul_rueckmeldung_ios_enable_hro_in = 0;
  io_modul_rueckmeldung_ios_enable_hrs_out = 0;
  io_modul_rueckmeldung_ios_enable_hrs_in = 0;
  io_modul_rueckmeldung_ios_enable_vz1o_out = 0;
  io_modul_rueckmeldung_ios_enable_vz1o_in = 0;
  io_modul_rueckmeldung_ios_enable_vz1s_out = 0;
  io_modul_rueckmeldung_ios_enable_vz1s_in = 0;
  io_modul_rueckmeldung_ios_enable_vz2o_out = 0;
  io_modul_rueckmeldung_ios_enable_vz2o_in = 0;
  io_modul_rueckmeldung_ios_enable_vz2s_out = 0;
  io_modul_rueckmeldung_ios_enable_vz2s_in = 0;
  io_modul_rueckmeldung_ios_enable_vv1_out = 0;
  io_modul_rueckmeldung_ios_enable_vv1_in = 0;
  io_modul_rueckmeldung_ios_enable_vv2_out = 0;
  io_modul_rueckmeldung_ios_enable_vv2_in = 0;
  io_modul_rueckmeldung_ios_enable_vv3_out = 0;
  io_modul_rueckmeldung_ios_enable_vv3_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_1_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_1_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_2_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_2_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_3_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_3_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_4_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_4_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_5_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_5_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_6_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_6_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_7_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_7_in = 0;
  io_modul_rueckmeldung_ios_enable_reserve_8_out = 0;
  io_modul_rueckmeldung_ios_enable_reserve_8_in = 0;

  io_modul_sensordaten_windmesser_gueltig_out = 0;
  io_modul_sensordaten_windmesser_gueltig_in = 0;
  io_modul_sensordaten_windmesser_windstaerke_out = 0;
  io_modul_sensordaten_windmesser_windstaerke_in = 0;

  io_modul_zustand_heckverteiler_1_cs0_radar_power_bite_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_radar_power_bite_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_radaranlage_power_warnung_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_radaranlage_power_warnung_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_1_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_1_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_1_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_1_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_2_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_2_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_3_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_3_in = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_4_out = 0;
  io_modul_zustand_heckverteiler_1_cs0_reserve_io_in_4_in = 0;

  io_modul_zustand_heckverteiler_1_cs1_in_parkposition_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_kampfschalter_betaetigt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_rueckwaertsgang_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_rueckwaertsgang_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_in_neutral_gangstellung_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_in_neutral_gangstellung_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_feststellbremse_betaetigt_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_feststellbremse_betaetigt_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_serviceschalter_betaetigt_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_serviceschalter_betaetigt_in = 0;
  io_modul_zustand_heckverteiler_1_cs1_reserve_sicherheit_in_out = 0;
  io_modul_zustand_heckverteiler_1_cs1_reserve_sicherheit_in_in = 0;

  io_modul_zustand_heckverteiler_1_cs2_antrieb_x_enable_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_x_enable_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_y_enable_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_y_enable_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_z_enable_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_antrieb_z_enable_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_sicherheitskreis_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_sicherheitskreis_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_1_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_1_optokoppler_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_2_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_2_optokoppler_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_3_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_3_optokoppler_in = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_4_optokoppler_out = 0;
  io_modul_zustand_heckverteiler_1_cs2_in_reserve_4_optokoppler_in = 0;

  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs4_index_position_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_index_position_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_unten_2_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_endanschlag_oben_2_z_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_2_eingang_umschalter_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs5_reserve_3_eingang_umschalter_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_zentrier_teleskop_stange_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs6_reserve_1_eingang_umschalter_aktiv_in = 0;

  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in = 0;


  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_out                  = SENSOR_SMOL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in                   = SENSOR_SMOL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_out                 = SENSOR_SMUL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in                  = SENSOR_SMUL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_out       = SENSOR_SEKOL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in        = SENSOR_SEKOL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_out = SENSOR_SEKGL;
  io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in  = SENSOR_SEKGL;

  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_out                 = SENSOR_SMOR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in                  = SENSOR_SMOR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_out                = SENSOR_SMUR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in                 = SENSOR_SMUR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_out      = SENSOR_SEKOR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in       = SENSOR_SEKOR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_out= SENSOR_SEKGR;
  io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in = SENSOR_SEKGR;

  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_passiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_passiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_verriegelt_aktiv_in = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_aktiv_out = 0;
  io_modul_zustand_heckverteiler_2_cs10_verzurrung_2_offen_aktiv_in = 0;

  io_modul_zustand_heckverteiler_2_cs11_errorcode_0_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_0_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_1_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_1_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_2_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_2_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_3_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_3_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_4_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_4_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_5_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_5_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_6_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_6_in = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_7_out = 0;
  io_modul_zustand_heckverteiler_2_cs11_errorcode_7_in = 0;
};


/*
 * 
 * Interface CANopen HV : SI Module
 * 
 */


val si_module_node_id = 0x50;

val cob_si_modul_betriebsart            = si_module_node_id + 0x180;
val cob_si_modul_ansteuerung_ausgaenge  = si_module_node_id + 0x280;
val cob_si_modul_force_pdo_transmit_hv  = si_module_node_id + 0x380;
val cob_si_modul_geraetestatus          = si_module_node_id + 0x200;
val cob_si_modul_digitale_eingaenge     = si_module_node_id + 0x300;
val cob_si_modul_analoge_eingaenge_1    = si_module_node_id + 0x400;
val cob_si_modul_analoge_eingaenge_2    = si_module_node_id + 0x500;
val cob_si_modul_analoge_eingaenge_3    = si_module_node_id + 0x201;
val cob_si_modul_analoge_eingaenge_4    = si_module_node_id + 0x301;
val cob_si_modul_analoge_eingaenge_5    = si_module_node_id + 0x401;
val cob_si_modul_analoge_eingaenge_6    = si_module_node_id + 0x501;
val cob_si_modul_analoge_eingaenge_7    = si_module_node_id + 0x202;
val cob_si_modul_analoge_eingaenge_8    = si_module_node_id + 0x302;

val rtr_si_modul_force_pdo_transmit_hv = 0;
val rtr_si_modul_betriebsart = 0;
val rtr_si_modul_geraetestatus = 0;
val rtr_si_modul_ansteuerung_ausgaenge = 0;
val rtr_si_modul_digitale_eingaenge = 0;
val rtr_si_modul_analoge_eingaenge = 0;


Systemstate si_modul_betriebsart_out;
Systemstate si_modul_betriebsart_in;


Systemstate si_modul_ansteuerung_ausgaenge_reserve_out;
Systemstate si_modul_ansteuerung_ausgaenge_reserve_in;
Systemstate si_modul_ansteuerung_ausgaenge_reserve1_out;
Systemstate si_modul_ansteuerung_ausgaenge_reserve1_in;
Systemstate si_modul_ansteuerung_ausgaenge_reserve2_out;
Systemstate si_modul_ansteuerung_ausgaenge_reserve2_in;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_in;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_in;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_windsensor_in;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_in;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out;
Systemstate si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_in;


Systemstate si_modul_force_pdo_transmit_hv_changecounter_out;
Systemstate si_modul_force_pdo_transmit_hv_changecounter_in;


Systemstate si_modul_geraetestatus_rueckmeldung_betriebsart_out;
Systemstate si_modul_geraetestatus_rueckmeldung_betriebsart_in;


Systemstate si_modul_digitale_eingaenge_cs2_extbg_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_extbg_fused_in;
Systemstate si_modul_digitale_eingaenge_cs2_kfzsteckdose_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_kfzsteckdose_fused_in;
Systemstate si_modul_digitale_eingaenge_cs2_maststeuerung_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_maststeuerung_fused_in;
Systemstate si_modul_digitale_eingaenge_cs2_pneumatik_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_pneumatik_fused_in;
Systemstate si_modul_digitale_eingaenge_cs2_sensorik_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_sensorik_fused_in;
Systemstate si_modul_digitale_eingaenge_cs2_windsensor_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_windsensor_fused_in;
Systemstate si_modul_digitale_eingaenge_cs2_windsensorhzg_fused_out;
Systemstate si_modul_digitale_eingaenge_cs2_windsensorhzg_fused_in;

Systemstate si_modul_digitale_eingaenge_cs3_pneumatik_switched_out;
Systemstate si_modul_digitale_eingaenge_cs3_pneumatik_switched_in;
Systemstate si_modul_digitale_eingaenge_cs3_radar_switched_out;
Systemstate si_modul_digitale_eingaenge_cs3_radar_switched_in;
Systemstate si_modul_digitale_eingaenge_cs3_reserve1_fused_out;
Systemstate si_modul_digitale_eingaenge_cs3_reserve1_fused_in;
Systemstate si_modul_digitale_eingaenge_cs3_reserve2_fused_out;
Systemstate si_modul_digitale_eingaenge_cs3_reserve2_fused_in;
Systemstate si_modul_digitale_eingaenge_cs3_windsensor_switched_out;
Systemstate si_modul_digitale_eingaenge_cs3_windsensor_switched_in;
Systemstate si_modul_digitale_eingaenge_cs3_windsensorhzg_switched_out;
Systemstate si_modul_digitale_eingaenge_cs3_windsensorhzg_switched_in;
Systemstate si_modul_digitale_eingaenge_cs3_xyz_switched_out;
Systemstate si_modul_digitale_eingaenge_cs3_xyz_switched_in;

Systemstate si_modul_digitale_eingaenge_cs4_ks_oeffner_out;
Systemstate si_modul_digitale_eingaenge_cs4_ks_oeffner_in;
Systemstate si_modul_digitale_eingaenge_cs4_ks_schliesser_out;
Systemstate si_modul_digitale_eingaenge_cs4_ks_schliesser_in;

Systemstate si_modul_analoger_eingang_extbg_fused_out;
Systemstate si_modul_analoger_eingang_extbg_fused_in;
Systemstate si_modul_analoger_eingang_maststeuerung_fused_out;
Systemstate si_modul_analoger_eingang_maststeuerung_fused_in;
Systemstate si_modul_analoger_eingang_pneumatik_fused_out;
Systemstate si_modul_analoger_eingang_pneumatik_fused_in;
Systemstate si_modul_analoger_eingang_pneumatik_switched_out;
Systemstate si_modul_analoger_eingang_pneumatik_switched_in;
Systemstate si_modul_analoger_eingang_radar_fused_out;
Systemstate si_modul_analoger_eingang_radar_fused_in;
Systemstate si_modul_analoger_eingang_reserve_out;
Systemstate si_modul_analoger_eingang_reserve_in;
Systemstate si_modul_analoger_eingang_reserve1_fused_out;
Systemstate si_modul_analoger_eingang_reserve1_fused_in;
Systemstate si_modul_analoger_eingang_reserve2_fused_out;
Systemstate si_modul_analoger_eingang_reserve2_fused_in;
Systemstate si_modul_analoger_eingang_sensorik_fused_out;
Systemstate si_modul_analoger_eingang_sensorik_fused_in;
Systemstate si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_antriebe_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_antriebe_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_other_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_other_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_other_nicht_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_other_nicht_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_pneumatik_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_pneumatik_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_in;
Systemstate si_modul_analoger_eingang_strom_radar_verstaerkt_out;
Systemstate si_modul_analoger_eingang_strom_radar_verstaerkt_in;
Systemstate si_modul_analoger_eingang_windsensor_switched_out;
Systemstate si_modul_analoger_eingang_windsensor_switched_in;
Systemstate si_modul_analoger_eingang_windsensorhzg_switched_out;
Systemstate si_modul_analoger_eingang_windsensorhzg_switched_in;
Systemstate si_modul_analoger_eingang_xyz_switched_out;
Systemstate si_modul_analoger_eingang_xyz_switched_in;
Systemstate si_modul_analoger_eingang_x_fused_out;
Systemstate si_modul_analoger_eingang_x_fused_in;
Systemstate si_modul_analoger_eingang_y_fused_out;
Systemstate si_modul_analoger_eingang_y_fused_in;
Systemstate si_modul_analoger_eingang_z_fused_out;
Systemstate si_modul_analoger_eingang_z_fused_in;

// --------------------------------------------
// ------------- INITIALIZATION ---------------

Globals
{
  si_modul_betriebsart_out  = SI_MODULE_BETRIEBSART_NORMAL;
  si_modul_betriebsart_in   = SI_MODULE_BETRIEBSART_NORMAL;


  si_modul_ansteuerung_ausgaenge_reserve_out = 0;
  si_modul_ansteuerung_ausgaenge_reserve_in = 0;
  si_modul_ansteuerung_ausgaenge_reserve1_out = 0;
  si_modul_ansteuerung_ausgaenge_reserve1_in = 0;
  si_modul_ansteuerung_ausgaenge_reserve2_out = 0;
  si_modul_ansteuerung_ausgaenge_reserve2_in = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_in = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_in = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_windsensor_in = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_in = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out = 0;
  si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_in = 0;


  si_modul_force_pdo_transmit_hv_changecounter_out = 0;
  si_modul_force_pdo_transmit_hv_changecounter_in = 0;


  si_modul_geraetestatus_rueckmeldung_betriebsart_out = SI_MODULE_BETRIEBSART_NORMAL;
  si_modul_geraetestatus_rueckmeldung_betriebsart_in  = SI_MODULE_BETRIEBSART_NORMAL;


  si_modul_digitale_eingaenge_cs2_extbg_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_extbg_fused_in = 0;
  si_modul_digitale_eingaenge_cs2_kfzsteckdose_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_kfzsteckdose_fused_in = 0;
  si_modul_digitale_eingaenge_cs2_maststeuerung_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_maststeuerung_fused_in = 0;
  si_modul_digitale_eingaenge_cs2_pneumatik_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_pneumatik_fused_in = 0;
  si_modul_digitale_eingaenge_cs2_sensorik_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_sensorik_fused_in = 0;
  si_modul_digitale_eingaenge_cs2_windsensor_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_windsensor_fused_in = 0;
  si_modul_digitale_eingaenge_cs2_windsensorhzg_fused_out = 0;
  si_modul_digitale_eingaenge_cs2_windsensorhzg_fused_in = 0;

  si_modul_digitale_eingaenge_cs3_reserve1_fused_out = 0;
  si_modul_digitale_eingaenge_cs3_reserve1_fused_in = 0;
  si_modul_digitale_eingaenge_cs3_reserve2_fused_out = 0;
  si_modul_digitale_eingaenge_cs3_reserve2_fused_in = 0;
  si_modul_digitale_eingaenge_cs3_radar_switched_out = 0;
  si_modul_digitale_eingaenge_cs3_radar_switched_in = 0;
  si_modul_digitale_eingaenge_cs3_pneumatik_switched_out = 0;
  si_modul_digitale_eingaenge_cs3_pneumatik_switched_in = 0;
  si_modul_digitale_eingaenge_cs3_windsensor_switched_out = 0;
  si_modul_digitale_eingaenge_cs3_windsensor_switched_in = 0;
  si_modul_digitale_eingaenge_cs3_windsensorhzg_switched_out = 0;
  si_modul_digitale_eingaenge_cs3_windsensorhzg_switched_in = 0;
  si_modul_digitale_eingaenge_cs3_xyz_switched_out = 0;
  si_modul_digitale_eingaenge_cs3_xyz_switched_in = 0;

  si_modul_digitale_eingaenge_cs4_ks_oeffner_out = 0;
  si_modul_digitale_eingaenge_cs4_ks_oeffner_in = 0;
  si_modul_digitale_eingaenge_cs4_ks_schliesser_out = 0;
  si_modul_digitale_eingaenge_cs4_ks_schliesser_in = 0;


  si_modul_analoger_eingang_extbg_fused_out = 0;
  si_modul_analoger_eingang_extbg_fused_in = 0;
  si_modul_analoger_eingang_maststeuerung_fused_out = 0;
  si_modul_analoger_eingang_maststeuerung_fused_in = 0;
  si_modul_analoger_eingang_pneumatik_fused_out = 0;
  si_modul_analoger_eingang_pneumatik_fused_in = 0;
  si_modul_analoger_eingang_radar_fused_out = 0;
  si_modul_analoger_eingang_radar_fused_in = 0;
  si_modul_analoger_eingang_reserve_out = 0;
  si_modul_analoger_eingang_reserve_in = 0;
  si_modul_analoger_eingang_reserve1_fused_out = 0;
  si_modul_analoger_eingang_reserve1_fused_in = 0;
  si_modul_analoger_eingang_reserve2_fused_out = 0;
  si_modul_analoger_eingang_reserve2_fused_in = 0;
  si_modul_analoger_eingang_sensorik_fused_out = 0;
  si_modul_analoger_eingang_sensorik_fused_in = 0;
  si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_in = 0;
  si_modul_analoger_eingang_strom_antriebe_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_antriebe_verstaerkt_in = 0;
  si_modul_analoger_eingang_strom_other_nicht_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_other_nicht_verstaerkt_in = 0;
  si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_in = 0;
  si_modul_analoger_eingang_strom_pneumatik_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_pneumatik_verstaerkt_in = 0;
  si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_in = 0;
  si_modul_analoger_eingang_strom_radar_verstaerkt_out = 0;
  si_modul_analoger_eingang_strom_radar_verstaerkt_in = 0;
  si_modul_analoger_eingang_windsensor_switched_out = 0;
  si_modul_analoger_eingang_windsensor_switched_in = 0;
  si_modul_analoger_eingang_windsensorhzg_switched_out = 0;
  si_modul_analoger_eingang_windsensorhzg_switched_in = 0;
  si_modul_analoger_eingang_xyz_switched_out = 0;
  si_modul_analoger_eingang_xyz_switched_in = 0;
  si_modul_analoger_eingang_x_fused_out = 0;
  si_modul_analoger_eingang_x_fused_in = 0;
  si_modul_analoger_eingang_y_fused_out = 0;
  si_modul_analoger_eingang_y_fused_in = 0;
  si_modul_analoger_eingang_z_fused_out = 0;
  si_modul_analoger_eingang_z_fused_in = 0;
};






// Fortschrittsanzeigen
Systemstate bag_fortschrittsanzeigen_out;
Systemstate bag_fortschrittsanzeigen_in;
// Change Counter Fortschrittsanzeigen
Systemstate bag_fortschrittsanzeigen_change_counter_out;
Systemstate bag_fortschrittsanzeigen_change_counter_in;
// Fehler
Systemstate extbg_error_0_out;
Systemstate extbg_error_0_in;
Systemstate extbg_error_1_out;
Systemstate extbg_error_1_in;
Systemstate extbg_error_2_out;
Systemstate extbg_error_2_in;
Systemstate extbg_error_3_out;
Systemstate extbg_error_3_in;
Systemstate extbg_error_4_out;
Systemstate extbg_error_4_in;
// Change Counter Fehler
Systemstate bag_fehler_change_counter_out;
Systemstate bag_fehler_change_counter_in;

// Piktogramme
Systemstate bag_piktogramm_fzg_spg_out;
Systemstate bag_piktogramm_fzg_spg_in;
Systemstate bag_piktogramm_horizontierung_out;
Systemstate bag_piktogramm_horizontierung_in;
Systemstate bag_piktogramm_fue_out;
Systemstate bag_piktogramm_fue_in;
Systemstate bag_piktogramm_warnlampe_mastbediener_out;
Systemstate bag_piktogramm_warnlampe_mastbediener_in;

// Betriebsmodus
Systemstate bag_betriebsmodus_out;
Systemstate bag_betriebsmodus_in;

// --------------------------------------------
// --------- Taster Automatikbetrieb ----------
Systemstate extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_in;
Systemstate extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_in;
Systemstate extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_in;
Systemstate extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_in;
Systemstate extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_in;
Systemstate extbg_taster_betaetigung_automatikbetrieb_horizontieren_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_horizontieren_in;
Systemstate extbg_taster_betaetigung_automatikbetrieb_abbruch_out;
Systemstate extbg_taster_betaetigung_automatikbetrieb_abbruch_in;

// --------------------------------------------
// ----------- Taster Einzelbetrieb -----------
Systemstate extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_haube_auf_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_haube_auf_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_haube_zu_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_haube_zu_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_mast_auf_zurrposition_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_mast_auf_zurrposition_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_automatisch_ausrichten_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_automatisch_ausrichten_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in;
Systemstate extbg_taster_betaetigung_einzelbetrieb_abbruch_out;
Systemstate extbg_taster_betaetigung_einzelbetrieb_abbruch_in;

// --------------------------------------------
// -------- Taster Manueller Betrieb ----------
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_riegel_schliessen_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_riegel_schliessen_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_radar_power_on_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_radar_power_on_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_in;

// --------------------------------------------
// ------- Taster Manueller Betrieb 2 ---------
Systemstate extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_in;
Systemstate extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_out;
Systemstate extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_in;

// --------------------------------------------
// --------------- Betriebsart ----------------
Systemstate extbg_betriebsart_out;
Systemstate extbg_betriebsart_in;

// --------------------------------------------
// ---------- BAG Software Version ------------
Systemstate bag_major_software_version_in;
Systemstate bag_major_software_version_out;
Systemstate bag_minor_software_version_in;
Systemstate bag_minor_software_version_out;

// --------------------------------------------
// ----------- Force Transmit PDO -------------
Systemstate force_bag_pdo_transmit_counter_in;
Systemstate force_bag_pdo_transmit_counter_out;

// --------------------------------------------
// ----------------- Motordaten----------------
Systemstate fahrzeugnetzspannung_in;
Systemstate fahrzeugnetzspannung_out;
Systemstate gangstellung_in;
Systemstate gangstellung_out;
Systemstate feststellbremse_in;
Systemstate feststellbremse_out;
Systemstate motordrehzahl_in;
Systemstate motordrehzahl_out;

// --------------------------------------------
// ------------- Zustand Ruestsatz-------------
Systemstate bag_fahrzeugwinkel_x_in;
Systemstate bag_fahrzeugwinkel_x_out;
Systemstate bag_fahrzeugwinkel_y_in;
Systemstate bag_fahrzeugwinkel_y_out;
Systemstate messwert_windmesser_gueltig_in;
Systemstate messwert_windmesser_gueltig_out;
Systemstate messwert_windmesser_in;
Systemstate messwert_windmesser_out;

// --------------------------------------------
// ------------- Zustand Ruestsatz-------------
Systemstate extbg_luftdruck_pneumatiktank_in;
Systemstate extbg_luftdruck_pneumatiktank_out;
Systemstate extbg_luftdruck_stuetze_links_in;
Systemstate extbg_luftdruck_stuetze_links_out;
Systemstate extbg_luftdruck_stuetze_rechts_in;
Systemstate extbg_luftdruck_stuetze_rechts_out;
Systemstate anzeige_zustand_mastantrieb_in;
Systemstate anzeige_zustand_mastantrieb_out;
Systemstate anzeige_zustand_horizontierantriebe_in;
Systemstate anzeige_zustand_horizontierantriebe_out;
Systemstate extbg_zustand_heckverteiler_stoerung_in;
Systemstate extbg_zustand_heckverteiler_stoerung_out;
Systemstate extbg_zustand_heckverteiler_ok_in;
Systemstate extbg_zustand_heckverteiler_ok_out;
Systemstate extbg_kommunikation_ivenet_stoerung_in;
Systemstate extbg_kommunikation_ivenet_stoerung_out;
Systemstate extbg_kommunikation_ivenet_ok_in;
Systemstate extbg_kommunikation_ivenet_ok_out;

// --------------------------------------------
// -------------- Betriebsstunden--------------
Systemstate bag_betriebsstunden_out;
Systemstate bag_betriebsstunden_in;

// --------------------------------------------
// -------------- Antriebe Sollwerte ----------
Systemstate extbg_x_drive_sollposition_out;
Systemstate extbg_x_drive_sollposition_in;
Systemstate extbg_x_drive_sollgeschwindigkeit_out;
Systemstate extbg_x_drive_sollgeschwindigkeit_in;

Systemstate extbg_y_drive_sollposition_out;
Systemstate extbg_y_drive_sollposition_in;
Systemstate extbg_y_drive_sollgeschwindigkeit_out;
Systemstate extbg_y_drive_sollgeschwindigkeit_in;

Systemstate extbg_z_drive_sollposition_out;
Systemstate extbg_z_drive_sollposition_in;
Systemstate extbg_z_drive_sollgeschwindigkeit_out;
Systemstate extbg_z_drive_sollgeschwindigkeit_in;

// --------------------------------------------
// ------------ Zustand Plattform -------------
Systemstate zurrung_plattform_out;
Systemstate zurrung_plattform_in;
Systemstate sensorik_stuetzen_bodenkontakt_stuetze_links_out;
Systemstate sensorik_stuetzen_bodenkontakt_stuetze_links_in;
Systemstate sensorik_stuetzen_bodenkontakt_stuetze_rechts_out;
Systemstate sensorik_stuetzen_bodenkontakt_stuetze_rechts_in;
Systemstate sensorik_stuetzen_SENSOR_SMOL_out;  //  StÃ¼tzenMagnetObenLinks
Systemstate sensorik_stuetzen_SENSOR_SMOL_in;   //  StÃ¼tzenMagnetObenLinks
Systemstate sensorik_stuetzen_SENSOR_SMOR_out;  //  StÃ¼tzenMagnetObenRechts
Systemstate sensorik_stuetzen_SENSOR_SMOR_in;   //  StÃ¼tzenMagnetObenRechts
Systemstate sensorik_stuetzen_SENSOR_SMUL_out;  //  StÃ¼tzenMagnetUntenLinks
Systemstate sensorik_stuetzen_SENSOR_SMUL_in;   //  StÃ¼tzenMagnetUntenLinks
Systemstate sensorik_stuetzen_SENSOR_SMUR_out;  //  StÃ¼tzenMagnetUntenRechts
Systemstate sensorik_stuetzen_SENSOR_SMUR_in;   //  StÃ¼tzenMagnetUntenRechts
Systemstate sensorik_stuetzen_klemmung_links_geschlossen_out;
Systemstate sensorik_stuetzen_klemmung_links_geschlossen_in;
Systemstate sensorik_stuetzen_klemmung_rechts_geschlossen_out;
Systemstate sensorik_stuetzen_klemmung_rechts_geschlossen_in;
Systemstate extbg_sensorik_haube_out;
Systemstate extbg_sensorik_haube_in;
Systemstate istposition_z_achse_out;
Systemstate istposition_z_achse_in;
Systemstate parkposition_radar_out;
Systemstate parkposition_radar_in;

// --------------------------------------------
// ---------- Messwerte Navigation ------------
Systemstate istposition_x_achse_out;
Systemstate istposition_x_achse_in;
Systemstate istposition_y_achse_out;
Systemstate istposition_y_achse_in;
Systemstate istwinkel_talin_x_out;
Systemstate istwinkel_talin_x_in;
Systemstate istwinkel_talin_y_out;
Systemstate istwinkel_talin_y_in;

// --------------------------------------------
// ----------- Zustand Komponenten ------------
Systemstate extbg_zustand_mastantrieb_stoerung_kommunikation_out;
Systemstate extbg_zustand_mastantrieb_stoerung_kommunikation_in;
Systemstate extbg_zustand_mastantrieb_ok_out;
Systemstate extbg_zustand_mastantrieb_ok_in;
Systemstate extbg_zustand_mastantrieb_interner_fehler_out;
Systemstate extbg_zustand_mastantrieb_interner_fehler_in;
Systemstate extbg_zustand_horizontierantriebe_stoerung_kommunikation_out;
Systemstate extbg_zustand_horizontierantriebe_stoerung_kommunikation_in;
Systemstate extbg_zustand_antrieb_x_ok_out;
Systemstate extbg_zustand_antrieb_x_ok_in;
Systemstate extbg_zustand_antrieb_y_ok_out;
Systemstate extbg_zustand_antrieb_y_ok_in;
Systemstate extbg_zustand_talin_daten_gueltig_out;
Systemstate extbg_zustand_talin_daten_gueltig_in;
Systemstate extbg_zustand_antrieb_x_interner_fehler_out;
Systemstate extbg_zustand_antrieb_x_interner_fehler_in;
Systemstate extbg_zustand_antrieb_y_interner_fehler_out;
Systemstate extbg_zustand_antrieb_y_interner_fehler_in;

// --------------------------------------------
// ------------- INITIALIZATION ---------------
Globals
{
  bag_fortschrittsanzeigen_out = 0;
  bag_fortschrittsanzeigen_in = 0;
// Change Counter Fortschrittsanzeigen
  bag_fortschrittsanzeigen_change_counter_out = 0;
  bag_fortschrittsanzeigen_change_counter_in = 0;

  bag_fehler_change_counter_out = 0;
  bag_fehler_change_counter_in = 0;

// Piktogramme
  bag_piktogramm_fzg_spg_out = 0;
  bag_piktogramm_fzg_spg_in = 0;
  bag_piktogramm_horizontierung_out = 0;
  bag_piktogramm_horizontierung_in = 0;
  bag_piktogramm_fue_out = 0;
  bag_piktogramm_fue_in = 0;
  bag_piktogramm_warnlampe_mastbediener_out = 0;
  bag_piktogramm_warnlampe_mastbediener_in = 0;

// Betriebsmodus
  bag_betriebsmodus_out = 0;
  bag_betriebsmodus_in = 0;

// --------------------------------------------
  // --------- Taster Automatikbetrieb ----------
  extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_in = 0;
  extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_in = 0;
  extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_in = 0;
  extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_in = 0;
  extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_in = 0;
  extbg_taster_betaetigung_automatikbetrieb_horizontieren_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_horizontieren_in = 0;
  extbg_taster_betaetigung_automatikbetrieb_abbruch_out = 0;
  extbg_taster_betaetigung_automatikbetrieb_abbruch_in = 0;

  // --------------------------------------------
  // ----------- Taster Einzelbetrieb -----------
  extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_haube_auf_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_haube_auf_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_haube_zu_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_haube_zu_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_mast_auf_zurrposition_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_mast_auf_zurrposition_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_automatisch_ausrichten_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_automatisch_ausrichten_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in = 0;
  extbg_taster_betaetigung_einzelbetrieb_abbruch_out = 0;
  extbg_taster_betaetigung_einzelbetrieb_abbruch_in = 0;

  // --------------------------------------------
  // -------- Taster Manueller Betrieb ----------
  extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_riegel_schliessen_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_riegel_schliessen_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_radar_power_on_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_radar_power_on_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_in = 0;

  // --------------------------------------------
  // ------- Taster Manueller Betrieb 2 ---------
  extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_in = 0;
  extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_out = 0;
  extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_in = 0;

  // --------------------------------------------
  // --------------- Betriebsart ----------------
  extbg_betriebsart_out;
  extbg_betriebsart_in;

  // --------------------------------------------
  // ---------- BAG Software Version ------------
  bag_major_software_version_in = 0;
  bag_major_software_version_out = 0;
  bag_minor_software_version_in = 0;
  bag_minor_software_version_out = 0;

  // --------------------------------------------
  // ----------- Force Transmit PDO -------------
  force_bag_pdo_transmit_counter_in = 0;
  force_bag_pdo_transmit_counter_out = 0;

  // --------------------------------------------
  // ----------------- Motordaten----------------
  fahrzeugnetzspannung_in = 0;
  fahrzeugnetzspannung_out = 0;
  gangstellung_in = 0;
  gangstellung_out = 0;
  feststellbremse_in = 0;
  feststellbremse_out = 0;
  motordrehzahl_in = 0;
  motordrehzahl_out = 0;

  // --------------------------------------------
  // ------------- Zustand Ruestsatz-------------
  bag_fahrzeugwinkel_x_in = 0;
  bag_fahrzeugwinkel_x_out = 0;
  bag_fahrzeugwinkel_y_in = 0;
  bag_fahrzeugwinkel_y_out = 0;
  messwert_windmesser_gueltig_in = 0;
  messwert_windmesser_gueltig_out = 0;
  messwert_windmesser_in = 0;
  messwert_windmesser_out = 0;

  // --------------------------------------------
  // ------------- Zustand Ruestsatz-------------
  extbg_luftdruck_pneumatiktank_in = 0;
  extbg_luftdruck_pneumatiktank_out = 0;
  extbg_luftdruck_stuetze_links_in = 0;
  extbg_luftdruck_stuetze_links_out = 0;
  extbg_luftdruck_stuetze_rechts_in = 0;
  extbg_luftdruck_stuetze_rechts_out = 0;
  anzeige_zustand_mastantrieb_in = 0;
  anzeige_zustand_mastantrieb_out = 0;
  anzeige_zustand_horizontierantriebe_in = 0;
  anzeige_zustand_horizontierantriebe_out = 0;
  extbg_zustand_heckverteiler_stoerung_in = 0;
  extbg_zustand_heckverteiler_stoerung_out = 0;
  extbg_zustand_heckverteiler_ok_in = 0;
  extbg_zustand_heckverteiler_ok_out = 0;
  extbg_kommunikation_ivenet_stoerung_in = 0;
  extbg_kommunikation_ivenet_stoerung_out = 0;
  extbg_kommunikation_ivenet_ok_in = 0;
  extbg_kommunikation_ivenet_ok_out = 0;

  // --------------------------------------------
  // -------------- Betriebsstunden--------------
  bag_betriebsstunden_out = 0;
  bag_betriebsstunden_in = 0;

  // --------------------------------------------
  // -------------- Antriebe Sollwerte ----------
  extbg_x_drive_sollposition_out = 0;
  extbg_x_drive_sollposition_in = 0;
  extbg_x_drive_sollgeschwindigkeit_out = 0;
  extbg_x_drive_sollgeschwindigkeit_in = 0;

  extbg_y_drive_sollposition_out = 0;
  extbg_y_drive_sollposition_in = 0;
  extbg_y_drive_sollgeschwindigkeit_out = 0;
  extbg_y_drive_sollgeschwindigkeit_in = 0;

  extbg_z_drive_sollposition_out = 0;
  extbg_z_drive_sollposition_in = 0;
  extbg_z_drive_sollgeschwindigkeit_out = 0;
  extbg_z_drive_sollgeschwindigkeit_in = 0;

  // --------------------------------------------
  // ------------ Zustand Plattform -------------
  zurrung_plattform_out = 0;
  zurrung_plattform_in = 0;
  sensorik_stuetzen_bodenkontakt_stuetze_links_out = 0;
  sensorik_stuetzen_bodenkontakt_stuetze_links_in = 0;
  sensorik_stuetzen_bodenkontakt_stuetze_rechts_out = 0;
  sensorik_stuetzen_bodenkontakt_stuetze_rechts_in = 0;
  sensorik_stuetzen_SENSOR_SMOL_out = 0;  //  StÃ¼tzenMagnetObenLinks
  sensorik_stuetzen_SENSOR_SMOL_in = 0;   //  StÃ¼tzenMagnetObenLinks
  sensorik_stuetzen_SENSOR_SMOR_out = 0;  //  StÃ¼tzenMagnetObenRechts
  sensorik_stuetzen_SENSOR_SMOR_in = 0;   //  StÃ¼tzenMagnetObenRechts
  sensorik_stuetzen_SENSOR_SMUL_out = 0;  //  StÃ¼tzenMagnetUntenLinks
  sensorik_stuetzen_SENSOR_SMUL_in = 0;   //  StÃ¼tzenMagnetUntenLinks
  sensorik_stuetzen_SENSOR_SMUR_out = 0;  //  StÃ¼tzenMagnetUntenRechts
  sensorik_stuetzen_SENSOR_SMUR_in = 0;   //  StÃ¼tzenMagnetUntenRechts
  sensorik_stuetzen_klemmung_links_geschlossen_out = 0;
  sensorik_stuetzen_klemmung_links_geschlossen_in = 0;
  sensorik_stuetzen_klemmung_rechts_geschlossen_out = 0;
  sensorik_stuetzen_klemmung_rechts_geschlossen_in = 0;
  extbg_sensorik_haube_out = 0;
  extbg_sensorik_haube_in = 0;
  istposition_z_achse_out = 0;
  istposition_z_achse_in = 0;
  parkposition_radar_out = 0;
  parkposition_radar_in = 0;



  // --------------------------------------------
  // ---------- Messwerte Navigation ------------
  istposition_x_achse_out = 0;
  istposition_x_achse_in = 0;
  istposition_y_achse_out = 0;
  istposition_y_achse_in = 0;
  istwinkel_talin_x_out = 0;
  istwinkel_talin_x_in = 0;
  istwinkel_talin_y_out = 0;
  istwinkel_talin_y_in = 0;

  // --------------------------------------------
  // ----------- Zustand Komponenten ------------
  extbg_zustand_mastantrieb_stoerung_kommunikation_out = 0;
  extbg_zustand_mastantrieb_stoerung_kommunikation_in = 0;
  extbg_zustand_mastantrieb_ok_out = 0;
  extbg_zustand_mastantrieb_ok_in = 0;
  extbg_zustand_mastantrieb_interner_fehler_out = 0;
  extbg_zustand_mastantrieb_interner_fehler_in = 0;
  extbg_zustand_horizontierantriebe_stoerung_kommunikation_out = 0;
  extbg_zustand_horizontierantriebe_stoerung_kommunikation_in = 0;
  extbg_zustand_antrieb_x_ok_out = 0;
  extbg_zustand_antrieb_x_ok_in = 0;
  extbg_zustand_antrieb_y_ok_out = 0;
  extbg_zustand_antrieb_y_ok_in = 0;
  extbg_zustand_talin_daten_gueltig_out = 0;
  extbg_zustand_talin_daten_gueltig_in = 0;
  extbg_zustand_antrieb_x_interner_fehler_out = 0;
  extbg_zustand_antrieb_x_interner_fehler_in = 0;
  extbg_zustand_antrieb_y_interner_fehler_out = 0;
  extbg_zustand_antrieb_y_interner_fehler_in = 0;

  // --------------------------------------------
  // --------------- Fehlerwerte ----------------
  extbg_error_0_out = NO_ERROR;
  extbg_error_0_in  = NO_ERROR;
  extbg_error_1_out = NO_ERROR;
  extbg_error_1_in  = NO_ERROR;
  extbg_error_2_out = NO_ERROR;
  extbg_error_2_in  = NO_ERROR;
  extbg_error_3_out = NO_ERROR;
  extbg_error_3_in  = NO_ERROR;
  extbg_error_4_out = NO_ERROR;
  extbg_error_4_in  = NO_ERROR;
};

// --------------------------------------------
// -------------------- RTR -------------------
val rtr_extbg_fortschritt_automatikbetrieb = 0;
val rtr_extbg_taster_betaetigung           = 0;
val rtr_extbg_taster_manuell_betaetigung   = 0;
val rtr_extbg_betriebsart                  = 0;
val rtr_bag_software_version               = 0;
val rtr_force_bag_pdo_transmit             = 0;
val rtr_zustand_ruestsatz                  = 0;
val rtr_motordaten                         = 0;
val rtr_zustand_komponenten                = 0;
val rtr_betriebsstunden                    = 0;
val rtr_extbg_x_drive_sollwerte            = 0;
val rtr_extbg_y_drive_sollwerte            = 0;
val rtr_extbg_z_drive_sollwerte            = 0;
val rtr_zustand_plattform                  = 0;
val rtr_messwerte_navigation               = 0;
val rtr_piktogramme                        = 0;
val rtr_betriebsmodus                      = 0;

// --------------------------------------------
// ------------------ COB-ID ------------------
val cob_extbg_fortschritt_automatikbetrieb  = 0x263;
val cob_extbg_betriebsart                   = 0x1E0;
val cob_extbg_taster_betaetigung            = 0x2E0;
val cob_extbg_taster_manuell_betaetigung    = 0x3E0;
val cob_bag_software_version                = 0x362;
val cob_force_bag_pdo_transmit              = 0x1E1;
val cob_zustand_ruestsatz                   = 0x460;
val cob_motordaten                          = 0x560;
val cob_zustand_komponenten                 = 0x361;
val cob_betriebsstunden                     = 0x461;
val cob_extbg_x_drive_sollwerte             = 0x3E1;
val cob_extbg_y_drive_sollwerte             = 0x4E1;
val cob_extbg_z_drive_sollwerte             = 0x2E1;
val cob_zustand_plattform                   = 0x561;
val cob_messwerte_navigation                = 0x262;
val cob_piktogramme                         = 0x462;
val cob_betriebsmodus                       = 0x363;





/* Example for xmls:
a{1; }; => <a>1</a>
a{xml_attr{"w";2; };1; };=> <a w="2">1</a>
*/

// --------------------------------------------
// ----------------- STATES -------------------

Systemstate ivenet_heartbeat_year_in;
Systemstate ivenet_heartbeat_month_in;
Systemstate ivenet_heartbeat_day_in;
Systemstate ivenet_heartbeat_hour_in;
Systemstate ivenet_heartbeat_minute_in;
Systemstate ivenet_heartbeat_second_in;

Systemstate ivenet_heartbeat_app_version_in;
Systemstate ivenet_own_vehicle_pos_latitude_current_in;
Systemstate ivenet_own_vehicle_pos_longitude_current_in;
Systemstate ivenet_own_vehicle_pos_altitude_current_in;

// --------------------------------------------
// ------------- INITIALIZATION ---------------

Globals
{

  g_is_Abbruch_active = 0;
  
  ivenet_time_source_out                 = "BIOS_Time";
  ivenet_time_source_in                  = "BIOS_Time";

  ivenet_heartbeat_year_in               = -1;
  ivenet_heartbeat_month_in              = -1;
  ivenet_heartbeat_day_in                = -1;
  ivenet_heartbeat_hour_in               = -1;
  ivenet_heartbeat_minute_in             = -1;
  ivenet_heartbeat_second_in             = -1;

  ivenet_heartbeat_app_version_in                  = "";
  ivenet_own_vehicle_pos_latitude_current_in       = -1.0;
  ivenet_own_vehicle_pos_longitude_current_in      = -1.0;
  ivenet_own_vehicle_pos_altitude_current_in       = -1.0;
};


Systemstate t;


// --------------------------------------------
// --------------- PARAMETERS -----------------
Systemstate s_frame_parking_brake_out;
Systemstate s_frame_parking_brake_in;
Systemstate s_frame_motor_speed_out;
Systemstate s_frame_motor_speed_in;
Systemstate s_frame_vehicle_speed_out;
Systemstate s_frame_vehicle_speed_in;
Systemstate s_frame_current_gear_out;
Systemstate s_frame_current_gear_in;
Systemstate s_frame_ambient_air_temp_out;
Systemstate s_frame_ambient_air_temp_in;


// --------------------------------------------
// --------- PARAMETER INITIALIZATION ---------
Globals
{
  s_frame_parking_brake_out   = -1;
  s_frame_parking_brake_in    = -1;
  // 1 : Bremse angezogen
  // 0 : Bremse geoeffnet
  s_frame_motor_speed_out     = 0;
  s_frame_motor_speed_in      = 0; 
  // 0,125 rpm / bit
  s_frame_vehicle_speed_out   = 0;
  s_frame_vehicle_speed_in    = 0;
  // 1/256 km/h / bit
  s_frame_current_gear_out    = -1;
  s_frame_current_gear_in     = -1;
  // -2 : Rueckwaerts 2
  // -1 : Rueckwaerts 1
  //  0 : neutral
  //  1 : crawler
  //  2 : vorwaerts 1
  //  3 : vorwaerts 2
  s_frame_ambient_air_temp_out= 0;
  s_frame_ambient_air_temp_in = 0;
  // 0,03125 Â°C / bit
  // 273Â°C offset
};
// --------------------------------------------
// ------------------ COB-ID ------------------
val COB_ID_GPM_13 = 0x0CFE5FEB;
val COB_ID_GPM_14 = 0x18FE61EB;
val COB_ID_GPM_16 = 0x18FE65EB;


Event ev_x_drive_actual_values, ev_y_drive_actual_values, ev_z_drive_actual_values, ev_antenna_parkpos_state_change;
Event ev_system_pressure_changed, ev_vehicle_inclination_x_changed, ev_vehicle_inclination_y_changed;
Event ev_antenna_alignment_changed, ev_z_drive_SENSOR_UB_Z_changed, ev_z_drive_SENSOR_IP_Z_changed;
Event ev_current_radar_changed, ev_current_others_changed, ev_current_drives_changed, ev_current_pneumatic_changed, ev_wind_speed_changed;

// ------------------------------------------------------------------------
//      RECEPTION of data from IO MODULE, SI MODULE, EXTBG, USV etc.
// ------------------------------------------------------------------------

global_functions
{
  print_drive_state_
  {
    params{ _drive; _DriveName; };
    print ( "========== RX-BAG    - STATUS  ====================== ", _DriveName, "\n"
          , "---------- ANTRIEB_READY:         ", _drive.Status.ANTRIEB_READY, "\n"
          , "---------- ANTRIEB_ENABLE_OUT:    ", _drive.Status.ANTRIEB_ENABLE_OUT, "\n"
          , "---------- ANTRIEB_INPOS:         ", _drive.Status.ANTRIEB_INPOS, "\n"
          , "---------- LIMIT_SWITCH_CW:       ", _drive.Status.ANTRIEB_LIMIT_SWITCH_CW, "\n"
          , "---------- LIMIT_SWITCH_CCW:      ", _drive.Status.ANTRIEB_LIMIT_SWITCH_CCW, "\n"
          , "---------- BREAK_RELEASED:        ", _drive.Status.ANTRIEB_BREAK_RELEASED, "\n"
          , "---------- REMOTE_OUTPUT_STATUS:  ", _drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS, "\n"
          , "---------- ANTRIEB_FAULT:         ", _drive.Status.ANTRIEB_FAULT, "\n"
          , "---------- IstPos    CAN / MKS :  ", _drive.CanIstPos,     " / ", _drive.IstPos,     "\n"
          , "---------- IstGeschw CAN / MKS :  ", _drive.CanIstGeschw,  " / ", _drive.IstGeschw,  "\n"
          , "---------- IstStrom  CAN / MKS :  ", _drive.CanIstStrom,   " / ", _drive.IstStrom,   " ( not used )\n"
          , "=====================================================\n"
          );
  };
//  on_luminance_request{
// //   if ( changed ( "luminance_request_target_value_in" ) )
//     luminance_target_value_changed(luminance_request_target_value_in);
//     // event(payload);
//  };


//     print ( "---------- RECEIVE ---------- ev_io_module_has_heartbeat\n" );
//     print ( "---------- RECEIVE ---------- s_heartbeat_can_id  ", s_heartbeat_can_id, "\n" );
//     print ( "---------- PROCESS ---------- s_heartbeat_payload_in  ", s_heartbeat_payload_in, "\n" );

// ------------------------------------------------------------------------  
//                  SI MODULE
// ------------------------------------------------------------------------
  handler_si_modul_geraetestatus
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_geraetestatus\n" );

  };

  handler_si_modul_digitale_eingaenge
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_digitale_eingaenge\n" );

  };

  handler_si_modul_analoge_eingaenge_1
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_1\n" );

  };

  handler_si_modul_analoge_eingaenge_2
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_2\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_radar = si_modul_analoger_eingang_strom_radar_nicht_verstaerkt_in;
      ev_current_radar_changed;
    };
  };

  handler_si_modul_analoge_eingaenge_3
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_3\n" );

  };

  handler_si_modul_analoge_eingaenge_4
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_4\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_other_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_others = si_modul_analoger_eingang_strom_other_nicht_verstaerkt_in;
      ev_current_others_changed;
    };
  };

  handler_si_modul_analoge_eingaenge_5
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_5\n" );

  };

  handler_si_modul_analoge_eingaenge_6
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_6\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_drives = si_modul_analoger_eingang_strom_antriebe_nicht_verstaerkt_in;
      ev_current_drives_changed;
    };
  };

  handler_si_modul_analoge_eingaenge_7
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_7\n" );

  };

  handler_si_modul_analoge_eingaenge_8
  {
    print ( "---------- RX-BAG  ---------- handler_si_modul_analoge_eingaenge_8\n" );

    if ( changed ( "si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_in" ) )
    {
      Heckverteiler_state.current_pneumatic = si_modul_analoger_eingang_strom_pneumatik_nicht_verstaerkt_in;
      ev_current_pneumatic_changed;
    };
  };

// ------------------------------------------------------------------------  
//                  IO MODULE WIND
// ------------------------------------------------------------------------
  handler_io_modul_sensordaten_windmesser
  {
//    print ( "---------- RX-BAG  ---------- handler_io_modul_sensordaten_windmesser\n" );

    if ( changed ( "io_modul_sensordaten_windmesser_windstaerke_in" )
      || changed ( "io_modul_sensordaten_windmesser_gueltig_in" )
      )
    {
      Heckverteiler_state.wind_gueltig = io_modul_sensordaten_windmesser_gueltig_in;
      Heckverteiler_state.wind_speed   = io_modul_sensordaten_windmesser_windstaerke_in;
      ev_wind_speed_changed;
    };
  };

// ------------------------------------------------------------------------  
//                  IO_MODULE_PNEUMATICS
// ------------------------------------------------------------------------
  handler_io_modul_pneumatiktank
  {
//    print ( "---------- RX-BAG  ---------- handler_io_modul_pneumatiktank\n" );

    if ( changed ( "io_modul_luftdruck_pneumatiktank_systemdruck_in" ) )
    {
      Pneumatics.system_pressure       = Get_Pressure ( io_modul_luftdruck_pneumatiktank_systemdruck_in ) / 2.0;
      print ( "------------ RX-BAG ------------ Pneumatics.system_pressure  ", Pneumatics.system_pressure, "\n" );
      ev_system_pressure_changed;
    };
    if ( changed ( "io_modul_luftdruck_pneumatiktank_druck_stuetze_links_in" ) )
    {
      Pneumatics.stilt_left_pressure   = Get_Pressure ( io_modul_luftdruck_pneumatiktank_druck_stuetze_links_in ) / 2.0;
      print ( "------------ RX-BAG ------------ Pneumatics.stilt_left_pressure  ", Pneumatics.stilt_left_pressure, "\n" );
      ev_stilt_left_state_change; //  arki: nothing better?
    };
    if ( changed ( "io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_in" ) )
    {
      Pneumatics.stilt_right_pressure  = Get_Pressure ( io_modul_luftdruck_pneumatiktank_druck_stuetze_rechts_in ) / 2.0;
      print ( "------------ RX-BAG ------------ Pneumatics.stilt_right_pressure ", Pneumatics.stilt_right_pressure, "\n" );
      ev_stilt_right_state_change; //  arki: nothing better?
    };
  };


// ------------------------------------------------------------------------  
//                  X DRIVE
// ------------------------------------------------------------------------
  handler_x_drive_emcy
  {
    print ( "---------- RX-BAG  ---------- handler_x_drive_emcy\n" );
  };

  handler_x_drive_response
  {
//    print ( "---------- RX-BAG  ---------- handler_x_drive_response\t" );

    if ( changed ( "s_frame_drive_status_ready_xdrv_in" )
      || changed ( "s_frame_drive_status_enable_xdrv_in" )
      || changed ( "s_frame_drive_status_inpos_xdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_cw_xdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_ccw_xdrv_in" )
      || changed ( "s_frame_drive_status_break_released_xdrv_in" )
      || changed ( "s_frame_drive_status_remote_output_status_xdrv_in" )
      || changed ( "s_frame_drive_status_fault_xdrv_in" )
      )
    {
      x_drive.Status.ANTRIEB_READY                = s_frame_drive_status_ready_xdrv_in;
      x_drive.Status.ANTRIEB_ENABLE_OUT           = s_frame_drive_status_enable_xdrv_in;
      x_drive.Status.ANTRIEB_INPOS                = s_frame_drive_status_inpos_xdrv_in;
      x_drive.Status.ANTRIEB_LIMIT_SWITCH_CW      = s_frame_drive_status_limit_switch_cw_xdrv_in;
      x_drive.Status.ANTRIEB_LIMIT_SWITCH_CCW     = s_frame_drive_status_limit_switch_ccw_xdrv_in;
      x_drive.Status.ANTRIEB_BREAK_RELEASED       = s_frame_drive_status_break_released_xdrv_in;
      x_drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS = s_frame_drive_status_remote_output_status_xdrv_in;
      x_drive.Status.ANTRIEB_FAULT                = s_frame_drive_status_fault_xdrv_in;

      print_drive_state_ ( x_drive, "X_drive" );

      if ( ( x_drive.Status.ANTRIEB_READY         == 1 )
        && ( x_drive.Status.ANTRIEB_ENABLE_OUT    == 1 )
        && ( x_drive.Status.ANTRIEB_FAULT         == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_x_drive_is_enabled\n" );
        ev_x_drive_is_enabled;
      };

      if ( ( x_drive.Status.ANTRIEB_READY          == 1 )
        && ( x_drive.Status.ANTRIEB_ENABLE_OUT     == 0 )
        && ( x_drive.Status.ANTRIEB_BREAK_RELEASED == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_x_drive_is_disabled\n" );
        ev_x_drive_is_disabled;
      };

      if ( x_drive.Status.ANTRIEB_INPOS          == 1 )
      {
        print ( "---------- RX-BAG  ---------- ev_x_drive_stop\n" );
        ev_x_drive_stop;
      };
    };

    if ( changed ( "s_frame_drive_actual_pos_xdrv_in" ) )
    {
      x_drive.CanIstPos = s_frame_drive_actual_pos_xdrv_in;
      x_drive.IstPos    = X_IstPosition_Berechnen ( x_drive.CanIstPos );
      print_drive_state_ ( x_drive, "X_drive  CHANGE OF pos" );
      ev_x_drive_actual_values ( x_drive.IstPos );
    };
  };


// ------------------------------------------------------------------------  
//                  Y DRIVE
// ------------------------------------------------------------------------
  handler_y_drive_emcy
  {
    print ( "---------- RX-BAG  ---------- handler_y_drive_emcy\n" );
  };

  handler_y_drive_response
  {
//    print ( "---------- RX-BAG  ---------- handler_y_drive_response\n" );

    if ( changed ( "s_frame_drive_status_ready_ydrv_in" )
      || changed ( "s_frame_drive_status_enable_ydrv_in" )
      || changed ( "s_frame_drive_status_inpos_ydrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_cw_ydrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_ccw_ydrv_in" )
      || changed ( "s_frame_drive_status_break_released_ydrv_in" )
      || changed ( "s_frame_drive_status_remote_output_status_ydrv_in" )
      || changed ( "s_frame_drive_status_fault_ydrv_in" )
      )
    {
      y_drive.Status.ANTRIEB_READY                = s_frame_drive_status_ready_ydrv_in;
      y_drive.Status.ANTRIEB_ENABLE_OUT           = s_frame_drive_status_enable_ydrv_in;
      y_drive.Status.ANTRIEB_INPOS                = s_frame_drive_status_inpos_ydrv_in;
      y_drive.Status.ANTRIEB_LIMIT_SWITCH_CW      = s_frame_drive_status_limit_switch_cw_ydrv_in;
      y_drive.Status.ANTRIEB_LIMIT_SWITCH_CCW     = s_frame_drive_status_limit_switch_ccw_ydrv_in;
      y_drive.Status.ANTRIEB_BREAK_RELEASED       = s_frame_drive_status_break_released_ydrv_in;
      y_drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS = s_frame_drive_status_remote_output_status_ydrv_in;
      y_drive.Status.ANTRIEB_FAULT                = s_frame_drive_status_fault_ydrv_in;

      print_drive_state_ ( y_drive, "Y_drive" );

      if ( ( y_drive.Status.ANTRIEB_READY         == 1 )
        && ( y_drive.Status.ANTRIEB_ENABLE_OUT    == 1 )
        && ( y_drive.Status.ANTRIEB_FAULT         == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_y_drive_is_enabled\n" );
        ev_y_drive_is_enabled;
      };

      if ( ( y_drive.Status.ANTRIEB_READY          == 1 )
        && ( y_drive.Status.ANTRIEB_ENABLE_OUT     == 0 )
        && ( y_drive.Status.ANTRIEB_BREAK_RELEASED == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_y_drive_is_disabled\n" );
        ev_y_drive_is_disabled;
      };

      if ( y_drive.Status.ANTRIEB_INPOS          == 1 )
      {
        print ( "---------- RX-BAG  ---------- ev_y_drive_stop\n" );
        ev_y_drive_stop;
      };
    };

    if ( changed ( "s_frame_drive_actual_pos_ydrv_in" ) )
    {
      y_drive.CanIstPos = s_frame_drive_actual_pos_ydrv_in;
      y_drive.IstPos    = Y_IstPosition_Berechnen ( y_drive.CanIstPos );
      print_drive_state_ ( y_drive, "Y_drive  CHANGE OF pos" );
      ev_y_drive_actual_values ( y_drive.IstPos );
    };
  };


// ------------------------------------------------------------------------  
//                  Z DRIVE
// ------------------------------------------------------------------------
  handler_z_drive_emcy
  {
    print ( "---------- RX-BAG  ---------- handler_z_drive_emcy\n" );
  };

  handler_z_drive_response
  {
//    print ( "---------- RX-BAG  ---------- handler_z_drive_response\t" );

    if ( changed ( "s_frame_drive_status_ready_zdrv_in" )
      || changed ( "s_frame_drive_status_enable_zdrv_in" )
      || changed ( "s_frame_drive_status_inpos_zdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_cw_zdrv_in" )
      || changed ( "s_frame_drive_status_limit_switch_ccw_zdrv_in" )
      || changed ( "s_frame_drive_status_break_released_zdrv_in" )
      || changed ( "s_frame_drive_status_remote_output_status_zdrv_in" )
      || changed ( "s_frame_drive_status_fault_zdrv_in" )
      )
    {
      z_drive.Status.ANTRIEB_READY                = s_frame_drive_status_ready_zdrv_in;
      z_drive.Status.ANTRIEB_ENABLE_OUT           = s_frame_drive_status_enable_zdrv_in;
      z_drive.Status.ANTRIEB_INPOS                = s_frame_drive_status_inpos_zdrv_in;
      z_drive.Status.ANTRIEB_LIMIT_SWITCH_CW      = s_frame_drive_status_limit_switch_cw_zdrv_in;
      z_drive.Status.ANTRIEB_LIMIT_SWITCH_CCW     = s_frame_drive_status_limit_switch_ccw_zdrv_in;
      z_drive.Status.ANTRIEB_BREAK_RELEASED       = s_frame_drive_status_break_released_zdrv_in;
      z_drive.Status.ANTRIEB_REMOTE_OUTPUT_STATUS = s_frame_drive_status_remote_output_status_zdrv_in;
      z_drive.Status.ANTRIEB_FAULT                = s_frame_drive_status_fault_zdrv_in;

      print_drive_state_ ( z_drive, "Z_drive" );

      if ( ( z_drive.Status.ANTRIEB_READY         == 1 )
        && ( z_drive.Status.ANTRIEB_ENABLE_OUT    == 1 )
        && ( z_drive.Status.ANTRIEB_FAULT         == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_z_drive_is_enabled\n" );
        ev_z_drive_is_enabled;
      };

      if ( ( z_drive.Status.ANTRIEB_READY          == 1 )
        && ( z_drive.Status.ANTRIEB_ENABLE_OUT     == 0 )
        && ( z_drive.Status.ANTRIEB_BREAK_RELEASED == 0 )
        )
      {
        print ( "---------- RX-BAG  ---------- ev_z_drive_is_disabled\n" );
        ev_z_drive_is_disabled;
      };

      if ( z_drive.Status.ANTRIEB_INPOS          == 1 )
      {
        print ( "---------- RX-BAG  ---------- ev_z_drive_stop\n" );
        ev_z_drive_stop;
      };
    };

    if ( changed ( "s_frame_drive_actual_pos_zdrv_in" ) )
    {
      z_drive.CanIstPos = s_frame_drive_actual_pos_zdrv_in;
      z_drive.IstPos    = Z_IstPosition_Berechnen ( z_drive.CanIstPos );
      print_drive_state_ ( z_drive, "Z_drive  CHANGE OF pos" );
      ev_z_drive_actual_values ( z_drive.IstPos );
    };
  };





// ------------------------------------------------------------------------  
//                  EXTBG
// ------------------------------------------------------------------------

  handler_force_bag_pdo_transmit 
  {
    print ( "---------- RX-BAG  ---------- handler_force_bag_pdo_transmit\n" );

//    if ( extbg_is_online && changed ( "force_bag_pdo_transmit_counter_in" ) )
//    {
        // Softwareversion
        bag_major_software_version_out = MAJOR_SOFTWARE_VERSION;
        bag_minor_software_version_out = MINOR_SOFTWARE_VERSION;
        send ( frame_bag_software_version, channel_can_1_out );

        // Fahrzeugwinkel X,Y
        bag_fahrzeugwinkel_x_out                = truncate ( Vehicle.angle_x );
        bag_fahrzeugwinkel_y_out                = truncate ( Vehicle.angle_y );
        messwert_windmesser_gueltig_out         = Heckverteiler_state.wind_gueltig;
        messwert_windmesser_out                 = Heckverteiler_state.wind_speed;
        send ( frame_zustand_ruestsatz, channel_can_1_out );

        // Motordaten
        fahrzeugnetzspannung_out                = 0;
        gangstellung_out                        = Vehicle.Gear;
        feststellbremse_out                     = Vehicle.Brake;
        motordrehzahl_out                       = Vehicle.Engine_rpm;
        send ( frame_motordaten, channel_can_1_out );

        // Zustand Komponenten
        extbg_luftdruck_pneumatiktank_out                             = truncate ( Pneumatics.system_pressure      * 2 );
        extbg_luftdruck_stuetze_links_out                             = truncate ( Pneumatics.stilt_left_pressure  * 2 );
        extbg_luftdruck_stuetze_rechts_out                            = truncate ( Pneumatics.stilt_right_pressure * 2 );
        extbg_zustand_mastantrieb_stoerung_kommunikation_out          = !Z_DRIVE_COMMUNICATION_INCIDENT;
        extbg_zustand_mastantrieb_interner_fehler_out                 = z_drive.Status.ANTRIEB_FAULT;
        extbg_zustand_antrieb_x_ok_out                                = !X_DRIVE_COMMUNICATION_INCIDENT;
        extbg_zustand_antrieb_y_ok_out                                = !Y_DRIVE_COMMUNICATION_INCIDENT;
        extbg_zustand_talin_daten_gueltig_out                         = ( Talin_state.isValid > 0 );
        extbg_zustand_antrieb_x_interner_fehler_out                   = x_drive.Status.ANTRIEB_FAULT;
        extbg_zustand_antrieb_y_interner_fehler_out                   = y_drive.Status.ANTRIEB_FAULT;
        extbg_zustand_heckverteiler_ok_out                            = !HV_COMMUNICATION_INCIDENT;
        extbg_kommunikation_ivenet_ok_out                             = !IVENET_COMMUNICATION_INCIDENT;
        send ( frame_zustand_komponenten, channel_can_1_out );

        // Betriebsstunden
        bag_betriebsstunden_out                 = 42;
//        send ( frame_betriebsstunden, channel_can_1_out );

        // Zustand Plattform
        zurrung_plattform_out                                        = ( z_drive.IstPos <= z_drive.MAST_ZURRPOSITION ) && ( !SENSOR_VZ1O &&  SENSOR_VZ1V );
        sensorik_stuetzen_bodenkontakt_stuetze_links_out             = !SENSOR_SMOL && ( Pneumatics.stilt_left_pressure  <= STILT_PRESSURE_GROUND_CONTACT );
        sensorik_stuetzen_bodenkontakt_stuetze_rechts_out            = !SENSOR_SMOR && ( Pneumatics.stilt_right_pressure <= STILT_PRESSURE_GROUND_CONTACT );
        sensorik_stuetzen_SENSOR_SMOL_out                            = SENSOR_SMOL;
        sensorik_stuetzen_SENSOR_SMOR_out                            = SENSOR_SMOR;
        sensorik_stuetzen_SENSOR_SMUL_out                            = SENSOR_SMUL;
        sensorik_stuetzen_SENSOR_SMUR_out                            = SENSOR_SMUR;
        sensorik_stuetzen_klemmung_links_geschlossen_out             = !SENSOR_SEKOL &&  SENSOR_SEKGL;
        sensorik_stuetzen_klemmung_rechts_geschlossen_out            = !SENSOR_SEKOR &&  SENSOR_SEKGR;;
        extbg_sensorik_haube_out                                     = SENSOR_HZO;
        istposition_z_achse_out                                      = truncate ( z_drive.IstPos );
        parkposition_radar_out                                       = SENSOR_IN_PARKPOS;
        send ( frame_zustand_plattform, channel_can_1_out );

        // Messwerte Navigation
        istposition_x_achse_out                                      = truncate ( x_drive.IstPos * 10 );
        istposition_y_achse_out                                      = truncate ( y_drive.IstPos * 10 );
        istwinkel_talin_x_out                                        = truncate ( Talin_state.axis_x * 10 );
        istwinkel_talin_y_out                                        = truncate ( Talin_state.axis_y * 10 );
        send ( frame_messwerte_navigation, channel_can_1_out );

        // Piktogramme
        bag_piktogramm_fzg_spg_out                                   = Evaluiere_Bordnetz_Spannung ( Vehicle.tension_bordnet );
        bag_piktogramm_horizontierung_out                            = ANTENNA_ALIGNMENT_STATUS;
        bag_piktogramm_fue_out                                       = 0;
        bag_piktogramm_warnlampe_mastbediener_out                    = 7;
        send ( frame_bag_piktogramme, channel_can_1_out );

        // Fortschrittsmeldungen

        // Betriebsmodus
        extbg_betriebsart_out                                        = 1;
        send ( frame_betriebsart, channel_can_1_out );
//    }
  };


  handler_extbg_taster_manuell_betaetigung 
  {
    print ( "---------- RX-BAG  ---------- handler_extbg_taster_manuell_betaetigung\n" );

    if ( extbg_is_online )
    {
//                  MANUELLER BETRIEB 
// ------------------------------------------------------------------------
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_riegel_oeffnen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out    = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out    = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_in" ) ) 
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_oeffnen_nothalt_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_haube_schliessen_nothalt_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_oeffnen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_zurrung_antenne_schliessen_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_venturiventil_1_ein_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_stuetzen_klemmung_ein_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else 
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_stuetzen_ausfahren_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_stuetzen_einfahren_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_x_achse_auf_in == 1 )
        {} else
        {};
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_x_achse_ab_in == 1 )
        {} else
        {}
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_y_achse_auf_in == 1 )
        {} else
        {}
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in" ) )
      {
        print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in IS NOT IN USE\n" );
        if ( extbg_taster_betaetigung_manueller_betrieb_y_achse_ab_in == 1 )
        {} else
        {}
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in == 1 )
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in 1\n" );
          ev_mast_move_up;
        } else
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_auf_in 0\n" );
          ev_z_drive_stop;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in  == 1 )
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in 1\n" );
          ev_mast_move_down;
        } else
        {
          print ( "---------- RX-BAG ------------ extbg_taster_betaetigung_manueller_betrieb_z_achse_ab_in 0\n" );
          ev_z_drive_stop;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_z_achse_sollposition_anfahren_in == 1 )
        {
          ev_mast_anfahren;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_radar_power_on_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_radar_power_on_in == 1 )
        {
          io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_out = 1;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          io_modul_ansteuerung_ausgaenge_cs11_radar_power_on_out = 0;
          send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_radar_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_xyz_antriebe_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_pneumatik_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out = 1;  
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out = 0;  
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_versorgung_windsensor_heizung_in == 1 )
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 1;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        } else
        {
          si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 0;
          send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
        };
      };

//              MANUELLER BETRIEB 2
// ------------------------------------------------------------------------
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_2_x_antrieb_auf_zurrposition_in == 1 )
        {
          ev_x_drive_to_indexposition;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_zurrposition_in == 1 )
        {
          ev_y_drive_to_indexposition;
        };
      };
      if ( changed ( "extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_in" ) )
      {
        if ( extbg_taster_betaetigung_manueller_betrieb_2_y_antrieb_auf_90_grad_in == 1 )
        {
          ev_y_drive_to_arbeitsposition;
        };
      };
    };
  };


  handler_extbg_taster_betaetigung 
  {
    print ( "------------------- RX-BAG - handler_extbg_taster_betaetigung\n" );

// ------------------------------------------------------------------------
//                  EINZELBETRIEB 
// ------------------------------------------------------------------------
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_stuetzen_ausfahren_in == 1
      )
    {
      ev_stilts_to_extend;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_stuetzen_einfahren_in ----------\n" );
      ev_stilts_to_retract;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_haube_auf_in" ) 
      &&            extbg_taster_betaetigung_einzelbetrieb_haube_auf_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_haube_auf_in ----------\n" );
      ev_flap_to_open;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_haube_zu_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_haube_zu_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_haube_zu_in ----------\n" );
      ev_flap_to_close;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_entriegeln_in ----------\n" );
      ev_antenna_lashing_unlock;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_zurrung_antenne_verriegeln_in ----------\n" );
      ev_antenna_lashing_lock;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_antenne_aufrichten_in ----------\n" );
      ev_antenna_to_raise;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_antenne_abklappen_in ----------\n" );
      ev_antenna_to_hinge_down;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in = 1----------\n" );
      ev_mast_ausfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in == 0
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_mast_ausfahren_in = 0----------\n" );
      ev_mast_ausfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_mast_einfahren_in ----------\n" );
      ev_mast_einfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_vorne_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_hinten_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_links_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_plattform_rechts_nach_unten_in ----------\n" );
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in" )
      &&            extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in == 1
      )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_staubaustragseinrichtung_aktivieren_in ----------\n" );
      ev_dust_discharge_to_do;
    } else
    if ( changed ( "extbg_taster_betaetigung_einzelbetrieb_abbruch_in" ) )
    {
      print ( "---------- extbg_taster_betaetigung_einzelbetrieb_abbruch_in ----------\n" );
      if ( extbg_taster_betaetigung_einzelbetrieb_abbruch_in > 0 )
      {
        TASTE_E_ABBRUCH = 1;
        ev_taste_e_abbruch_is_active;
      } else 
      {
        TASTE_E_ABBRUCH = 0;
        ev_taste_e_abbruch_is_not_active;
      };
    };

// ------------------------------------------------------------------------
//            AUTOMATIKBETRIEB
// ------------------------------------------------------------------------
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_plattform_ausfahren_in == 1
      )
    {
      ev_system_extend;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_plattform_einfahren_in == 1
      )
    {
      ev_system_retract;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_stuetzen_ausfahren_in == 1
      )
    {
      ev_stilts_to_extend;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_stuetzen_einfahren_in == 1
      )
    {
      ev_stilts_to_retract;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_mast_sollposition_anfahren_in == 1
      )
    {
      ev_mast_anfahren;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_horizontieren_in" )
      &&            extbg_taster_betaetigung_automatikbetrieb_horizontieren_in == 1
      )
    {
      ev_antenna_to_level_out;
    } else
    if ( changed ( "extbg_taster_betaetigung_automatikbetrieb_abbruch_in" ) )
    {
      print ( "---------- extbg_taster_betaetigung_automatikbetrieb_abbruch_in ----------\n" );
      if ( extbg_taster_betaetigung_automatikbetrieb_abbruch_in > 0 )
      {
        //ev_extbg_automatic_mode_program_abortion;
        TASTE_A_ABBRUCH = 1;
        ev_taste_a_abbruch_is_active;
      } else 
      {
        //ev_extbg_automatic_mode_program_abortion;
        TASTE_A_ABBRUCH = 0;
        ev_taste_a_abbruch_is_not_active;
      };
    };
  };

  handler_extbg_z_drive_sollwerte
  {
    print ( "---------- RX-BAG  ---------- handler_extbg_z_drive_sollwerte\n" );

//                  SOLL GESCHW
// ------------------------------------------------------------------------
    if ( changed ( "extbg_z_drive_sollgeschwindigkeit_in" ) )
    {
//      print ( "handler_extbg_z_drive_sollwerte --- extbg_z_drive_sollgeschwindigkeit_in:", extbg_z_drive_sollgeschwindigkeit_in, "\n" );
      z_drive.SollGeschwAbsolut = extbg_z_drive_sollgeschwindigkeit_in;
      if ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_SPEED )
      {
        z_drive.SollGeschw = vorzeichen_speed * z_drive.SollGeschwAbsolut;
        z_drive.CanSollGeschw = Z_Set_Speed ( truncate ( z_drive.SollGeschw ) );
        print ( "handler_extbg_z_drive_sollwerte --- z_drive.SollGeschw:", z_drive.SollGeschw, "\n" );

        assemble_frame_and_send_to_z_drive ( z_drive );
      };
    };

//                  SOLL POS
// ------------------------------------------------------------------------
    if ( changed ( "extbg_z_drive_sollposition_in" ) )
    {
//      print ( "handler_extbg_z_drive_sollwerte --- extbg_z_drive_sollposition_in:", extbg_z_drive_sollposition_in, "\n" );
      z_drive.SollPos = extbg_z_drive_sollposition_in;
      if ( z_drive.Control.ANTRIEB_MODE == DRIVE_OPERATIONAL_MODE_POSITION )
      {
        z_drive.CanSollPos        = Z_SollPosition_Berechnen ( z_drive.SollPos );
        print ( "handler_extbg_z_drive_sollwerte --- z_drive.SollPos:",z_drive.SollPos, "\n" );

        assemble_frame_and_send_to_z_drive ( z_drive );
      };
    };
  };

// ------------------------------------------------------------------------
//                  IO MODUL
// ------------------------------------------------------------------------
  handler_io_modul_sensordaten
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_sensordaten\n" );

    if ( changed ( "io_modul_sensordaten_x_plattform_talin_in" )
      || changed ( "io_modul_sensordaten_y_plattform_talin_in" )
      )
    {
      Talin_state.axis_x          = Get_Talin_Axis ( io_modul_sensordaten_x_plattform_talin_in );
      Talin_state.axis_y          = Get_Talin_Axis ( io_modul_sensordaten_y_plattform_talin_in );
      ev_antenna_alignment_changed;
    };
  };

// ------------------------------------------------------------------------
  handler_io_modul_fahrzeugwinkel
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_fahrzeugwinkel\n" );

    Talin_state.isValid   = io_modul_fahrzeugwinkel_talin_data_valid_in;

    if ( changed ( "io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_in" ) )
    {
      Vehicle.angle_x = Get_Vehicle_Angle ( io_modul_fahrzeugwinkel_x_achse_vom_neigungsgeber_in );
      ev_vehicle_inclination_x_changed ( Vehicle.angle_x );
    };

    if ( changed ( "io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_in" ) )
    {
      Vehicle.angle_y = Get_Vehicle_Angle ( io_modul_fahrzeugwinkel_y_achse_vom_neigungsgeber_in );
      ev_vehicle_inclination_y_changed ( Vehicle.angle_y );
    };
  };

// ------------------------------------------------------------------------
  handler_io_modul_zustand_heckverteiler_1
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_zustand_heckverteiler_1\n" );
//                  ANTRIEBE ENDSCHALTER 
// ------------------------------------------------------------------------

//      print ( "ANTRIEBE ENDSCHALTER \n" );

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in" ) )
    {
      SENSOR_IP_X = io_modul_zustand_heckverteiler_1_cs3_in_index_position_x_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_IP_X: ", SENSOR_IP_X, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in" ) )
    {
      SENSOR_AB_Y = io_modul_zustand_heckverteiler_1_cs3_im_arbeitsbereich_y_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_AB_Y: ", SENSOR_AB_Y, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in" ) )
    {
      SENSOR_IP_Y = io_modul_zustand_heckverteiler_1_cs3_in_index_position_y_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_IP_Y: ", SENSOR_IP_Y, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in" ) )
    {
      SENSOR_EO_Z = io_modul_zustand_heckverteiler_1_cs4_endanschlag_oben_z_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_EO_Z: ", SENSOR_EO_Z, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in" ) )
    {
      SENSOR_EU_Z = io_modul_zustand_heckverteiler_1_cs4_endanschlag_unten_z_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_EU_Z: ", SENSOR_EU_Z, "\n" );
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_in" ) )
    {
      SENSOR_IP_Z = io_modul_zustand_heckverteiler_1_cs4_in_index_position_z_aktiv_in;
      print ( "---------- RX-BAG  ---------- SENSOR_IP_Z: ", SENSOR_IP_Z, ", IstPos: ", z_drive.IstPos, "\n" );
      ev_z_drive_SENSOR_IP_Z_changed;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in" ) )
    {
      SENSOR_UB_Z = io_modul_zustand_heckverteiler_1_cs4_untere_betriebsposition_z_aktiv_in;
      print ( "---------- RX-BAG  ----------  SENSOR_UB_Z: ", SENSOR_UB_Z, "\n" );
      ev_z_drive_SENSOR_UB_Z_changed;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in" ) )
    {
      SENSOR_IN_PARKPOS = io_modul_zustand_heckverteiler_1_cs1_in_parkposition_in;
      print ( "---------- RX-BAG  ----------  SENSOR_IN_PARKPOS: ", SENSOR_IN_PARKPOS, "\n" );
      ev_antenna_parkpos_state_change;
    };

//                HAUBE 
// ------------------------------------------------------------------------
    if ( changed ( "io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in" )
      )
    {
      SENSOR_HZO = io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_offen_aktiv_in;
      SENSOR_HZG = io_modul_zustand_heckverteiler_1_cs6_haubenzylinder_geschlossen_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_HZO / SENSOR_HZG : ", SENSOR_HZO, " / ", SENSOR_HZG, "\n" );

      ev_flap_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in" )
      )
    {
      SENSOR_HR1V = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_verriegelt_aktiv_in;
      SENSOR_HR1O = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_1_offen_aktiv_in;
      SENSOR_HR2V = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_verriegelt_aktiv_in;
      SENSOR_HR2O = io_modul_zustand_heckverteiler_1_cs7_haube_riegel_2_offen_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_HR1V / SENSOR_HR1O : ", SENSOR_HR1V, " / ", SENSOR_HR1O, "\n" );
      print ( "---------- RX-BAG  ---------- SENSOR_HR2V / SENSOR_HR2O : ", SENSOR_HR2V, " / ", SENSOR_HR2O, "\n" );

      ev_flap_lock_state_change;
    };
  };

// ------------------------------------------------------------------------
  handler_io_modul_zustand_heckverteiler_2
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_zustand_heckverteiler_2\n" );
//                  STUETZEN 
// ------------------------------------------------------------------------
    if ( changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in" )
      )
    {
      SENSOR_SEKOL = io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_offen_links_aktiv_in;
      SENSOR_SEKGL = io_modul_zustand_heckverteiler_2_cs8_stuetze_endlage_klemmung_geschlossen_links_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SEKOL / SENSOR_SEKGL : ", SENSOR_SEKOL, " / ", SENSOR_SEKGL, "\n" );

      ev_stilt_left_lock_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in" )
      )
    {
      SENSOR_SEKOR = io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_offen_rechts_aktiv_in;
      SENSOR_SEKGR = io_modul_zustand_heckverteiler_2_cs9_stuetze_endlage_klemmung_geschlossen_rechts_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SEKOR / SENSOR_SEKGR : ", SENSOR_SEKOR, " / ", SENSOR_SEKGR, "\n" );

      ev_stilt_right_lock_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in" )
      )
    {
      SENSOR_SMUL = io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_unten_links_aktiv_in;
      SENSOR_SMOL = io_modul_zustand_heckverteiler_2_cs8_stuetze_magnet_oben_links_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SMUL / SENSOR_SMOL : ", SENSOR_SMUL, " / ", SENSOR_SMOL, "\n" );

      ev_stilt_left_state_change;
    };

    if ( changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in" )
      )
    {
      SENSOR_SMUR = io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_unten_rechts_aktiv_in;
      SENSOR_SMOR = io_modul_zustand_heckverteiler_2_cs9_stuetze_magnet_oben_rechts_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_SMUR / SENSOR_SMOR : ", SENSOR_SMUR, " / ", SENSOR_SMOR, "\n" );

      ev_stilt_right_state_change;
    };

//                  ANTENNE VERZURRUNG 
// ------------------------------------------------------------------------
    if ( changed ( "io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in" )
      || changed ( "io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in" )
      )
    {
      SENSOR_VZ1O = io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_offen_aktiv_in;
      SENSOR_VZ1V = io_modul_zustand_heckverteiler_2_cs10_verzurrung_1_verriegelt_aktiv_in;

      print ( "---------- RX-BAG  ---------- SENSOR_VZ1O / SENSOR_VZ1V : ", SENSOR_VZ1O, " / ", SENSOR_VZ1V, "\n" );

      ev_antenna_lashing_state_change;
    };
 };

// ------------------------------------------------------------------------  
//                  IO MODULE SW Version
// ------------------------------------------------------------------------
  handler_io_modul_software_version
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_software_version\n" );

  };

// ------------------------------------------------------------------------  
//                  IO MODULE Fehler
// ------------------------------------------------------------------------
  handler_io_modul_fehler
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_fehler\n" );

  };

// ------------------------------------------------------------------------  
//                  IO MODULE Rueckmeldung
// ------------------------------------------------------------------------
  handler_io_modul_rueckmeldung_ios
  {
    print ( "---------- RX-BAG  ---------- handler_io_modul_rueckmeldung_ios\n" );

  };

// ------------------------------------------------------------------------  
//                  FUNKTIONSUEBERWACHUNG
// ------------------------------------------------------------------------
  handler_heartbeat_x_drive
  {
    s_x_drive_heartbeat_payload = s_heartbeat_payload_xdrv_in;
    ev_x_drive_has_heartbeat;
  };

  handler_heartbeat_y_drive
  {
    s_y_drive_heartbeat_payload = s_heartbeat_payload_ydrv_in;
    ev_y_drive_has_heartbeat;
  };

  handler_heartbeat_z_drive
  {
    s_z_drive_heartbeat_payload = s_heartbeat_payload_zdrv_in;
    ev_z_drive_has_heartbeat;
  };

  handler_heartbeat_io_module
  {
    s_io_module_heartbeat_payload = s_heartbeat_payload_iomodule_in;
    ev_io_module_has_heartbeat;
  };

  handler_heartbeat_si_module
  {
    s_si_module_heartbeat_payload = s_heartbeat_payload_simodule_in;
    //print ( "---------- RX-BAG ---------- s_si_module_heartbeat_payload: ", s_si_module_heartbeat_payload, "\n" );
    ev_si_module_has_heartbeat;
  };

  handler_heartbeat_usv_1
  {
    s_usv1_heartbeat_payload = s_heartbeat_payload_usv_1_in;
//    print ( "---------- RX-BAG ---------- s_usv1_heartbeat_payload: ", s_usv1_heartbeat_payload, "\n" );
    ev_usv1_has_heartbeat;
  };

  handler_heartbeat_usv_2
  {
    s_usv2_heartbeat_payload = s_heartbeat_payload_usv_2_in;
//    print ( "---------- RX-BAG ---------- s_usv2_heartbeat_payload: ", s_usv2_heartbeat_payload, "\n" );
    ev_usv2_has_heartbeat;
  };

  handler_heartbeat_extbg
  {
    s_extbg_heartbeat_payload = s_heartbeat_payload_extbg_in;
//    print ( "---------- RX-BAG ---------- s_extbg_heartbeat_payload: ", s_extbg_heartbeat_payload, "\n" );
    ev_extbg_has_heartbeat;
  };
};



Event ev_vehicle_gear_changed, ev_vehicle_brake_position_changed;

// ------------------------------------------------------------------------  
//                  RECEPTION of Vehicle data via CAN SAE
// ------------------------------------------------------------------------

global_functions
{
//  on_luminance_request{
// //   if(changed("luminance_request_target_value_in"))
//     luminance_target_value_changed(luminance_request_target_value_in);
//     // event(payload);
//  };

// ------------------------------------------------------------------------  
//                            GPM 13
// ------------------------------------------------------------------------
  handler_GPM_13
  {
    print("RX-BAG GPM_13 - ev_message_from_psm\n");
    // Funktionsueberwachung
    ev_message_from_psm;

    // Feststellbremse
    if(changed("s_frame_parking_brake_in")) 
    {
      Vehicle.Brake = s_frame_parking_brake_in;

      ev_vehicle_brake_position_changed(Vehicle.Brake);
    };

    // Engine Speed
    if(changed("s_frame_motor_speed_in")) 
    {
      Vehicle.Engine_rpm = s_frame_motor_speed_in;
    };

    // Vehicle Speed
    if(changed("s_frame_vehicle_speed_in")) 
    {
      Vehicle.Speed = s_frame_vehicle_speed_in;
    };
  };

// ------------------------------------------------------------------------  
//                            GPM 14
// ------------------------------------------------------------------------
  handler_GPM_14
  {
    print("RX-BAG GPM_14 - ev_message_from_psm\n");
    // Funktionsueberwachung
    ev_message_from_psm;

    // Gangstellung
    if(changed("s_frame_current_gear_in")) 
    {
      Vehicle.Gear = s_frame_current_gear_in;

      ev_vehicle_gear_changed(Vehicle.Gear);
    };
  };

// ------------------------------------------------------------------------  
//                            GPM 16
// ------------------------------------------------------------------------
  handler_GPM_16
  {
    print("RX-BAG GPM_16 - ev_message_from_psm\n");
    // Funktionsueberwachung
    ev_message_from_psm;

    // Aussentemperatur
    if(changed("s_frame_ambient_air_temp_in")) 
    {
      Vehicle.Ambient_Temperature = s_frame_ambient_air_temp_in;
    };
  };
}; // global_functions


// ------------------------------------------------------------------------
//      SEND LOGIC FOR TRGS/BAG
// ------------------------------------------------------------------------

post_event_processing
{

//   if((argv(0) == "ev_antenna_to_raise_starts") && (irgendwas_anderes))
//     send();
  
//   if(DEBUG) print("post_event_processing\n", "Event = ", argv(0), "\n");
//   if (changed("luminance_request_target_value")){
//      print("Value of 'luminance_request_target_value' changed", "\n");
//      send(luminance_request, out_channel);
//    }

// ------------------------------------------------------------------------  
//                  HECKVERTEILER
// ------------------------------------------------------------------------
  if(changed("ivenet_mast_state.value_out") || changed("ivenet_mast_state.isValid_out"))
  {
    ev_send_message_to_ivenet;
  };

  if(changed("ivenet_radar_enabled_state.isRadarWorkingEnabled"))
  {
    ivenet_radar_enabled_state.isValid_out = 1;
  };

  if(changed("ivenet_platform_alignment_state.value"))
  {
    ivenet_platform_alignment_state.isValid_out = 1;
    ev_send_message_to_ivenet;
  };

  if(changed("ivenet_radar_parkposition_request_state.isRequestActive"))
  {
    ivenet_radar_parkposition_request_state.isValid_out = 1;
    ev_send_message_to_ivenet;
  };
};


// ------------------------------------------------------------------------
//      SEND LOGIC FOR TRGS/BAG
// ------------------------------------------------------------------------

global_functions
{
  print_drive_control_
  {
    params{ _drive; _DriveName; };
    print ( "========== TX-BAG    - CONTROL ====================== ", _DriveName, "\n"
          , "---------- ANTRIEB_MODE:           ", _drive.Control.ANTRIEB_MODE, "\n"
          , "---------- ANTRIEB_ENABLE_IN:      ", _drive.Control.ANTRIEB_ENABLE_IN, "\n"
          , "---------- BREAK_RELEASE:          ", _drive.Control.ANTRIEB_BREAK_RELEASE, "\n"
          , "---------- RESET_FAULT:            ", _drive.Control.ANTRIEB_RESET_FAULT, "\n"
          , "---------- SollPos    CAN / MKS :  ", _drive.CanSollPos,     " / ", _drive.SollPos,     "\n"
          , "---------- SollGeschw CAN / MKS :  ", _drive.CanSollGeschw,  " / ", _drive.SollGeschw,  "\n"
          , "---------- SollStrom  CAN / MKS :  ", _drive.CanSollStrom,   " / ", _drive.SollStrom,   " ( not used )\n"
          , "=====================================================\n"
          );
  };
  assemble_frame_and_send_to_x_drive
  {
    params{ _drive; };
    s_frame_drive_target_pos_xdrv_out             = truncate ( _drive.CanSollPos );
    s_frame_drive_target_speed_xdrv_out           = truncate ( _drive.CanSollGeschw );
    s_frame_drive_target_current_xdrv_out         = truncate ( _drive.CanSollStrom );

    s_frame_drive_control_mode_xdrv_out           = truncate ( _drive.Control.ANTRIEB_MODE );
    s_frame_drive_control_enable_xdrv_out         = truncate ( _drive.Control.ANTRIEB_ENABLE_IN );
    s_frame_drive_control_break_release_xdrv_out  = truncate ( _drive.Control.ANTRIEB_BREAK_RELEASE );
    s_frame_drive_control_reset_fault_xdrv_out    = truncate ( _drive.Control.ANTRIEB_RESET_FAULT );
    s_frame_drive_control_calibrate_pos_xdrv_out  = truncate ( _drive.Control.ANTRIEB_CALIBRATE_POS );

 //   print_drive_state(_drive.Control, _drive.Status);
    print_drive_control_ ( _drive, "X_drive" );

    send ( frame_drive_request_x, channel_can_1_out );
  };
  assemble_frame_and_send_to_y_drive
  {
    params{ _drive; };
    s_frame_drive_target_pos_ydrv_out             = truncate ( _drive.CanSollPos );
    s_frame_drive_target_speed_ydrv_out           = truncate ( _drive.CanSollGeschw );
    s_frame_drive_target_current_ydrv_out         = truncate ( _drive.CanSollStrom );

    s_frame_drive_control_mode_ydrv_out           = truncate ( _drive.Control.ANTRIEB_MODE );
    s_frame_drive_control_enable_ydrv_out         = truncate ( _drive.Control.ANTRIEB_ENABLE_IN );
    s_frame_drive_control_break_release_ydrv_out  = truncate ( _drive.Control.ANTRIEB_BREAK_RELEASE );
    s_frame_drive_control_reset_fault_ydrv_out    = truncate ( _drive.Control.ANTRIEB_RESET_FAULT );
    s_frame_drive_control_calibrate_pos_ydrv_out  = truncate ( _drive.Control.ANTRIEB_CALIBRATE_POS );

 //   print_drive_state(_drive.Control, _drive.Status);
    print_drive_control_ ( _drive, "Y_drive" );

    send ( frame_drive_request_y, channel_can_1_out );
  };
  assemble_frame_and_send_to_z_drive
  {
    params{ _drive; };
    s_frame_drive_target_pos_zdrv_out             = truncate ( _drive.CanSollPos );
    s_frame_drive_target_speed_zdrv_out           = truncate ( _drive.CanSollGeschw );
    s_frame_drive_target_current_zdrv_out         = truncate ( _drive.CanSollStrom );

    s_frame_drive_control_mode_zdrv_out           = truncate ( _drive.Control.ANTRIEB_MODE );
    s_frame_drive_control_enable_zdrv_out         = truncate ( _drive.Control.ANTRIEB_ENABLE_IN );
    s_frame_drive_control_break_release_zdrv_out  = truncate ( _drive.Control.ANTRIEB_BREAK_RELEASE );
    s_frame_drive_control_reset_fault_zdrv_out    = truncate ( _drive.Control.ANTRIEB_RESET_FAULT );
    s_frame_drive_control_calibrate_pos_zdrv_out  = truncate ( _drive.Control.ANTRIEB_CALIBRATE_POS );

//    print_drive_state(_drive.Control, _drive.Status);
    print_drive_control_ ( _drive, "Z_drive" );

    send ( frame_drive_request_z, channel_can_1_out );
  };
  assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg
  {
    params{ inEvent; };
    print ( "---------- TX-BAG ---------- Event = ", inEvent, " trigger message to extbg\n" );
    bag_fortschrittsanzeigen_change_counter_out = bag_fortschrittsanzeigen_change_counter_out + 1;
    send ( frame_extbg_fortschritt_automatikbetrieb, channel_can_1_out );
  };
  event_logging
  {
    params{ inEvent; };
    print ( "---------- TX-BAG ---------- Event = ", inEvent, "\n" );
  };
};

post_event_processing
{

//   if ( ( argv ( 0 ) == "ev_antenna_to_raise_starts" ) && (irgendwas_anderes) )
//     send();
  
//   if (DEBUG) print ( "post_event_processing\n", "Event = ", argv(0), "\n" );
//   if (changed("luminance_request_target_value" ) ){
//      print ( "Value of 'luminance_request_target_value' changed", "\n" );
//      send(luminance_request, out_channel);
//    }

  if ( ( argv ( 0 ) == "ev_message_from_psm" )
    || ( argv ( 0 ) == "ev_stilts_preconditioning_timeout" )
    || ( argv ( 0 ) == "ev_io_module_has_heartbeat" )
    || ( argv ( 0 ) == "ev_si_module_has_heartbeat" )
    || ( argv ( 0 ) == "ev_send_message_to_ivenet" )
    || ( argv ( 0 ) == "ev_usv1_has_heartbeat" )
    || ( argv ( 0 ) == "ev_usv2_has_heartbeat" )
    || ( argv ( 0 ) == "ev_x_drive_is_online" )
    || ( argv ( 0 ) == "ev_y_drive_is_online" )
    || ( argv ( 0 ) == "ev_z_drive_is_online" )
    || ( argv ( 0 ) == "ev_x_drive_has_heartbeat" )
    || ( argv ( 0 ) == "ev_y_drive_has_heartbeat" )
    || ( argv ( 0 ) == "ev_z_drive_has_heartbeat" )
    )
  {
    //  for all these events no special handling is needed
    //  and supress logging
  } else
  {
//    print ( "---------------------------------- TX-BAG - Event = ", argv(0), "\n" );

// ------------------------------------------------------------------------  
//                  DRIVES
// ------------------------------------------------------------------------

  // X drive -------------------------------------------------------
  if ( argv ( 0 ) == "ev_x_drive_move" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Control.ANTRIEB_MODE          = x_drive.Control.ANTRIEB_MODE_DEFAULT;

    x_drive.CanSollPos        = X_SollPosition_Berechnen ( x_drive.SollPos );
    x_drive.CanSollGeschw     = X_Set_Speed ( truncate ( x_drive.SollGeschw ) );
    x_drive.CanSollStrom      = truncate ( x_drive.SollStrom );

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else
  if ( argv ( 0 ) == "ev_x_drive_enable" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    x_drive.Control.ANTRIEB_ENABLE_IN     = 1;
    x_drive.Control.ANTRIEB_BREAK_RELEASE = 1;

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else
  if ( argv ( 0 ) == "ev_x_drive_stop" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    x_drive.Control.ANTRIEB_ENABLE_IN     = 0;

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else
  if ( argv ( 0 ) == "ev_x_drive_disable" ) 
  {
    event_logging ( argv ( 0 ) );
    x_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    x_drive.Control.ANTRIEB_ENABLE_IN     = 0;
    x_drive.Control.ANTRIEB_BREAK_RELEASE = 0;

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else
  if ( argv ( 0 ) == "ev_x_drive_set_antrieb_reset_fault" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Control.ANTRIEB_RESET_FAULT     = 1;

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else
  if ( argv ( 0 ) == "ev_x_drive_reset_antrieb_reset_fault" )
  {
    event_logging ( argv ( 0 ) );
    x_drive.Control.ANTRIEB_RESET_FAULT     = 0;

    assemble_frame_and_send_to_x_drive ( x_drive );
  } else


  // Y drive -------------------------------------------------------
  if ( argv ( 0 ) == "ev_y_drive_move" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Control.ANTRIEB_MODE          = y_drive.Control.ANTRIEB_MODE_DEFAULT;

    y_drive.CanSollPos        = Y_SollPosition_Berechnen ( y_drive.SollPos );
    y_drive.CanSollGeschw     = Y_Set_Speed ( truncate ( y_drive.SollGeschw ) );
    y_drive.CanSollStrom      = truncate ( y_drive.SollStrom );

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else
  if ( argv ( 0 ) == "ev_y_drive_enable" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    y_drive.Control.ANTRIEB_ENABLE_IN     = 1;
    y_drive.Control.ANTRIEB_BREAK_RELEASE = 1;

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else
  if ( argv ( 0 ) == "ev_y_drive_stop" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    y_drive.Control.ANTRIEB_ENABLE_IN     = 0;

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else
  if ( argv ( 0 ) == "ev_y_drive_disable" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    y_drive.Control.ANTRIEB_ENABLE_IN     = 0;
    y_drive.Control.ANTRIEB_BREAK_RELEASE = 0;

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else
  if ( argv ( 0 ) == "ev_y_drive_set_antrieb_reset_fault" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Control.ANTRIEB_RESET_FAULT     = 1;

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else
  if ( argv ( 0 ) == "ev_y_drive_reset_antrieb_reset_fault" )
  {
    event_logging ( argv ( 0 ) );
    y_drive.Control.ANTRIEB_RESET_FAULT     = 0;

    assemble_frame_and_send_to_y_drive ( y_drive );
  } else

  // Z drive -------------------------------------------------------
  if ( argv ( 0 ) == "ev_z_drive_move" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Control.ANTRIEB_MODE          = z_drive.Control.ANTRIEB_MODE_DEFAULT;
    z_drive.Control.ANTRIEB_BREAK_RELEASE = 1;

    z_drive.CanSollPos        = Z_SollPosition_Berechnen ( z_drive.SollPos );
    z_drive.CanSollGeschw     = Z_Set_Speed ( truncate ( z_drive.SollGeschw ) );
    z_drive.CanSollStrom      = truncate ( z_drive.SollStrom );

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else
  if ( argv ( 0 ) == "ev_z_drive_enable" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    z_drive.Control.ANTRIEB_ENABLE_IN     = 1;

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else
  if ( argv ( 0 ) == "ev_z_drive_stop" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    z_drive.Control.ANTRIEB_ENABLE_IN     = 0;
    z_drive.Control.ANTRIEB_BREAK_RELEASE = 0;

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else
  if ( argv ( 0 ) == "ev_z_drive_disable" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Control.ANTRIEB_MODE          = DRIVE_OPERATIONAL_MODE_STOP;
    z_drive.Control.ANTRIEB_ENABLE_IN     = 0;
    z_drive.Control.ANTRIEB_BREAK_RELEASE = 0;

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else
  if ( argv ( 0 ) == "ev_z_drive_set_antrieb_reset_fault" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Control.ANTRIEB_RESET_FAULT     = 1;

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else
  if ( argv ( 0 ) == "ev_z_drive_reset_antrieb_reset_fault" )
  {
    event_logging ( argv ( 0 ) );
    z_drive.Control.ANTRIEB_RESET_FAULT     = 0;

    assemble_frame_and_send_to_z_drive ( z_drive );
  } else


// ------------------------------------------------------------------------  
//                  HECKVERTEILER
// ------------------------------------------------------------------------
  if ( argv ( 0 ) == "ev_heckverteiler_is_online" )
  {
    event_logging ( argv ( 0 ) );
    si_modul_ansteuerung_ausgaenge_versorgung_radaranlage_out        = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_xyz_antriebe_out       = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_pneumatik_out          = 1;  
    si_modul_ansteuerung_ausgaenge_versorgung_windsensor_out         = 1;
    si_modul_ansteuerung_ausgaenge_versorgung_windsensor_heizung_out = 1;
    send ( si_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else

// ------------------------------------------------------------------------  
//                  IO MODUL
// ------------------------------------------------------------------------

// ------------------------------------------------------------------------
//                  STUETZEN 

  if ( argv ( 0 ) == "ev_stilts_lock" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_stilts_unlock" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_stilts_extend_is_starting" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_stilts_retract" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_stilts_prepare_moving" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 1;
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( ( argv ( 0 ) == "ev_stilts_stop_moving" )
    || ( argv ( 0 ) == "ev_stilts_preconditioning_was_interrupted" )
    || ( argv ( 0 ) == "ev_stilts_unlock_preconditions_are_not_met" )
    || ( argv ( 0 ) == "ev_stilts_lock_was_interrupted" )
    || ( argv ( 0 ) == "ev_stilts_to_extend_was_interrupted" )
    || ( argv ( 0 ) == "ev_stilts_to_retract_was_interrupted" )
    )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 0;
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_stilts_unlock_was_interrupted" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_einfahren_out = 0;
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_zylinder_ausfahren_out = 0;
    io_modul_ansteuerung_ausgaenge_cs14_stuetze_ventil_klemmung_out           = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
//                  STAUBAUSTRAG 
  if ( argv ( 0 ) == "ev_dust_discharge_start" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_dust_discharge_stop" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs13_venturiventil_1_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else

// ------------------------------------------------------------------------
//                  ANTENNE VERZURRUNG 
  if ( argv ( 0 ) == "ev_antenna_lock" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out    = 0;
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_antenna_unlock" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out    = 1;
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_antenna_prepare_usage" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out    = 1;
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( ( argv ( 0 ) == "ev_antenna_lock_precondition_was_interrupted" ) 
    || ( argv ( 0 ) == "ev_antenna_stop_using_lock" )
    )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_oeffnen_out    = 0;
    io_modul_ansteuerung_ausgaenge_cs13_verzurrung_zylinder_1_schliessen_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else

// ------------------------------------------------------------------------  
//                  HAUBE
  if ( argv ( 0 ) == "ev_flap_VHR_open" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out    = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_flap_VHR_close" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out    = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_flap_prepare_moving" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out         = 1;
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out            = 1;
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 1;
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out    = 1;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_flap_stop_moving" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out         = 0;
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out            = 0;
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 0;
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out    = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_flap_HVZS_close" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else
  if ( argv ( 0 ) == "ev_flap_HVZO_close" )
  {
    event_logging ( argv ( 0 ) );
    io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out = 0;
    send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
  } else

// ------------------------------------------------------------------------  
//                  FUNKTIONSUEBERWACHUNG
// ------------------------------------------------------------------------  
    if ( argv ( 0 ) == "ev_bag_has_heartbeat" )
    {
      s_heartbeat_payload_bag_out = s_bag_heartbeat_payload;
      send ( frame_heartbeat_bag, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_x_drive_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_X_DRIVE;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_y_drive_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_Y_DRIVE;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_z_drive_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_Z_DRIVE;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_io_module_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_IO_MODULE;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_si_module_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_SI_MODULE;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_usv1_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_USV_1;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_usv2_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_USV_2;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( argv ( 0 ) == "ev_extbg_set_operational" )
    {
      event_logging ( argv ( 0 ) );
      s_set_operational_node_id = CAN_ID_EXTBG;
      send ( frame_set_operational, channel_can_1_out );
    } else
    if ( ( argv ( 0 ) == "ev_flap_unlock_was_interrupted" )
      || ( argv ( 0 ) == "ev_flap_unlock_preconditions_are_not_met" )
      || ( argv ( 0 ) == "ev_flap_lock_was_interrupted" )
      || ( argv ( 0 ) == "ev_flap_precondition_was_interrupted" )
      || ( argv ( 0 ) == "ev_flap_open_timeout" )
      || ( argv ( 0 ) == "ev_flap_close_timeout" )
      || ( argv ( 0 ) == "ev_flap_to_open_was_interrupted" )
      || ( argv ( 0 ) == "ev_flap_to_close_was_interrupted" )
      )
    {
      event_logging ( argv ( 0 ) );
      io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_out         = 0;
      io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_out            = 0;
      io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_schliessen_nothalt_out = 0;
      io_modul_ansteuerung_ausgaenge_cs14_haube_ventil_zylinder_oeffnen_nothalt_out    = 0;
      io_modul_ansteuerung_ausgaenge_cs14_haube_riegel_oeffnen_out                     = 0;
      send ( io_modul_ansteuerung_ausgaenge, channel_can_1_out );
    } else

    // ------------------------------------------------------------------------
    //                  EXTBG
    // ------------------------------------------------------------------------
    if ( argv ( 0 ) == "ev_extbg_send_data" ) 
    {
//      event_logging ( argv ( 0 ) );
      handler_force_bag_pdo_transmit;
    } else
    {
      //  use for debugging
//       event_logging ( argv ( 0 ) );
//       print ( "===  this event has no special handling  ===\n" );
    };
  };

  if ( extbg_is_online )
  {
    // ------------- Fehlermeldungen ---------------
    if ( changed ( "extbg_error_0" )
      || changed ( "extbg_error_1" )
      || changed ( "extbg_error_2" )
      || changed ( "extbg_error_3" )
      || changed ( "extbg_error_4" )
      )
    {
      extbg_error_0_out = extbg_error_0;
      extbg_error_1_out = extbg_error_1;
      extbg_error_2_out = extbg_error_2;
      extbg_error_3_out = extbg_error_3;
      extbg_error_4_out = extbg_error_4;

      if ( ( extbg_error_0_out != NO_ERROR )
        || ( extbg_error_1_out != NO_ERROR )
        || ( extbg_error_2_out != NO_ERROR )
        || ( extbg_error_3_out != NO_ERROR )
        || ( extbg_error_4_out != NO_ERROR )
        )
      {
        bag_fehler_change_counter_out = bag_fehler_change_counter_out + 1;
        send ( frame_extbg_fortschritt_automatikbetrieb, channel_can_1_out );
      }
    };

    // ---- Fortschrittsanzeige Automatikbetrieb ---
    if ( argv ( 0 ) == "ev_platform_extend_is_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Plattform_Aus_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_platform_extend_is_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Plattform_Aus_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_platform_retract_is_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out= FA_Plattform_Ein_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else 
    if ( argv ( 0 ) == "ev_platform_retract_is_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out= FA_Plattform_Ein_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else 

    // Haube Entriegeln ----------------------------------------------
    if ( argv ( 0 ) == "ev_flap_unlock" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Entriegeln_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_unlock_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Entriegeln;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( ( argv ( 0 ) == "ev_flap_unlock_was_interrupted" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_flap_unlock_preconditions_are_not_met" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Entriegeln_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_unlock_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Entriegeln_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Haube Entriegeln ----------------------------------------------
    if ( argv ( 0 ) == "ev_flap_lock" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Verriegeln_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_lock_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Verriegeln;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_lock_was_interrupted" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Verriegeln_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_lock_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Verriegeln_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Haube Zylinderdruck  ------------------------------------------
    if ( argv ( 0 ) == "ev_flap_prepare_moving" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Zylinderdruck;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_precondition_was_interrupted" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Zylinderdruck_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_preconditioning_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Zylinderdruck_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Haube Oeffnen  ------------------------------------------------
    if ( argv ( 0 ) == "ev_flap_open_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Oeffnen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_open_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Oeffnen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( ( argv ( 0 ) == "ev_flap_open_timeout" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_flap_to_open_was_interrupted" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Oeffnen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_open_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Oeffnen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Haube Schliessen ----------------------------------------------
    if ( argv ( 0 ) == "ev_flap_close_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Schliessen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_close_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Schliessen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( ( argv ( 0 ) == "ev_flap_close_timeout" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_flap_to_close_was_interrupted" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Schliessen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_flap_close_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Haube_Schliessen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Zurrung Antenne - Vorkonditionierung --------------------------
    if ( argv ( 0 ) == "ev_antenna_prepare_usage" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Warten;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_lock_precondition_was_interrupted" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Warten_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Zurrung Antenne - Oeffnen  ------------------------------------
    if ( argv ( 0 ) == "ev_antenna_lashing_unlock_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Oeffnen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_lashing_unlock_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Oeffnen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_lashing_unlock_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Oeffnen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_is_unlocked" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Oeffnen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Zurrung Antenne - Schliessen ----------------------------------
    if ( argv ( 0 ) == "ev_antenna_lashing_lock_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Schliessen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_lashing_lock_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Schliessen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_lashing_lock_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Schliessen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_is_locked" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Zurrung_Ant_Schliessen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Mast auf Indexposition ----------------------------------------
    if ( argv ( 0 ) == "ev_mast_ausfahren" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufIndexpos_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_move_to_indexposition_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufIndexpos_Fahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_to_indexposition_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufIndexpos_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_is_in_indexposition" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufIndexpos_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Mast auf Zurrposition  ----------------------------------------
    if ( argv ( 0 ) == "ev_mast_einfahren" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufZurrpos_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_move_to_lashing_position_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufZurrpos_Fahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_to_lashing_position_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufZurrpos_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_is_in_indexposition" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufZurrpos_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Mast auf Sollposition  ----------------------------------------
    if ( argv ( 0 ) == "ev_mast_anfahren" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufSollpos_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_move_to_target_position_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufSollpos_Fahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "a_z_drive_to_target_position_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufSollpos_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_is_in_target_position" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_MastAufSollpos_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // X Antrieb auf Indexposition  ----------------------------------
    if ( argv ( 0 ) == "ev_x_drive_to_indexposition" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_In_Nullpos_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_to_indexposition_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_In_Nullpos_Fahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_is_disabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_In_Nullpos_Erreicht;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_to_indexposition_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_In_Nullpos_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_is_in_indexposition" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_In_Nullpos_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Antenne Aufrichten --------------------------------------------
    if ( argv ( 0 ) == "ev_antenna_to_raise" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Aufrichten_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_to_raise_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Aufrichten;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_to_rise_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Aufrichten_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_is_risen" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Aufrichten_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Antenne Abklappen  --------------------------------------------
    if ( argv ( 0 ) == "ev_antenna_to_hinge_down" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Abklappen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_y_drive_move_starts" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Abklappen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "a_y_drive_to_indexposition_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Abklappen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "a_y_drive_is_in_indexposition" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Abklappen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Antenne hat ihre Position erreicht ----------------------------
    if ( argv ( 0 ) == "ev_y_drive_is_disabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Antenne_Hat_SollPosition_Erreicht;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Antenne Parkposition Anfordern --------------------------------
    if ( argv ( 0 ) == "ev_antenna_is_moving_to_parking_position" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Parkposition_Anfordern;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_to_parking_position_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Parkposition_Anfordern_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_is_in_parking_position" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Parkposition_Erreicht;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Stuetzen Druckaufbau ------------------------------------------
    if ( argv ( 0 ) == "ev_stilts_prepare_moving" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Zylinderdruck;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_preconditioning_was_interrupted" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Zylinderdruck_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_are_preconditioned" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Zylinderdruck_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Stuetzen Klemmung oeffnen  ------------------------------------
    if ( ( argv ( 0 ) == "ev_stilts_to_extend_started_stilts_unlock" )   //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_to_retract_started_stilts_unlock" )  //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Oeffnen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_unlock" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Oeffnen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_unlock_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Oeffnen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_are_unlocked" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Oeffnen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Stuetzen Klemmung schliessen ----------------------------------
    if ( ( argv ( 0 ) == "ev_stilts_to_extend_started_stilts_lock" )   //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_to_retract_started_stilts_lock" )  //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Schliessen_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_lock" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Schliessen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_lock_timeout" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Schliessen_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_are_locked" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Klemmung_Schliessen_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Stuetzen ausfahren --------------------------------------------
    if ( ( argv ( 0 ) == "ev_stilts_to_extend_started_stilts_extend" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_extend" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Ausfahren_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_extend_is_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Ausfahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( ( argv ( 0 ) == "ev_stilts_extend_timeout" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_to_extend_timeout" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_extended_stilt_detected" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Ausfahren_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_have_ground_contact" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Ausfahren_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Stuetzen einfahren --------------------------------------------
    if ( ( argv ( 0 ) == "ev_stilts_to_retract_started_stilts_retract" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_retract" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Einfahren_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_retract_is_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Einfahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( ( argv ( 0 ) == "ev_stilts_retract_timeout" ) //  bag_fortschrittsanzeigen_out
      || ( argv ( 0 ) == "ev_stilts_to_retract_timeout" ) //  bag_fortschrittsanzeigen_out
      )
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Einfahren_Abgebrochen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_stilts_are_retracted" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Stuetzen_Einfahren_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Horizontierung ------------------------------------------------
    if ( argv ( 0 ) == "ev_antenna_to_level_out" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_to_level_out_is_not_necessary" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Nicht_Notwendig;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_to_level_out_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Im_Arbeitsbereich;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_level_out_x" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_X_Fahren_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_level_out_x_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_X_Fahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_level_out_x_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_X_Erreicht;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_level_out_y" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Y_Fahren_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_level_out_y_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Y_Fahren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_level_out_y_finished" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Y_Erreicht;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_antenna_is_levelled_out" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Horizontierung_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Staubaustragseinrichtung --------------------------------------
    if ( argv ( 0 ) == "ev_dust_discharge_started" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Staubaustrag_Gestartet;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_dust_discharge_start" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_VV1_Aktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_dust_discharge_stop" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_VV1_Deaktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_dust_discharge_done" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Staubaustrag_Abgeschlossen;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // X Antrieb -----------------------------------------------------
    if ( argv ( 0 ) == "ev_x_drive_enable_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_Aktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_is_enabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_Aktiviert;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_disable_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_Deaktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_x_drive_is_disabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_X_Deaktiviert;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Y Antrieb -----------------------------------------------------
    if ( argv ( 0 ) == "ev_y_drive_enable_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Y_Aktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_y_drive_is_enabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Y_Aktiviert;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_y_drive_disable_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Y_Deaktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_y_drive_is_disabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Y_Deaktiviert;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else

    // Z Antrieb -----------------------------------------------------
    if ( argv ( 0 ) == "ev_z_drive_enable_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Z_Aktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_is_enabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Z_Aktiviert;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_disable_starting" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Z_Deaktivieren;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    } else
    if ( argv ( 0 ) == "ev_z_drive_is_disabled" ) //  bag_fortschrittsanzeigen_out
    {
      bag_fortschrittsanzeigen_out = FA_Z_Deaktiviert;
      assemble_next_frame_fortschritt_automatikbetrieb_and_send_to_extbg ( argv ( 0 ) );
    };
  }; // g_extBG_is_online

};


Simulation{};





























































