/* out.cpp 
   CREATED Thu Sep 22 16:25:30 2016

   GENERATED BY THE sm4ceps C++ GENERATOR VERSION 0.80 (c) 2016 Tomas Prerovsky <tomas.prerovsky@gmail.com>, ALL RIGHTS RESERVED. 
   BASED ON cepS VERSION 1.1 (May 28 2016) BUILT WITH GCC 5.2.1 20151010 on GNU/LINUX 64BIT (C) BY THE AUTHORS OF ceps (ceps is hosted at github: https://github.com/cepsdev/ceps.git) 

   Input files:
      substatemachines_basic_a.ceps

   THIS IS A GENERATED FILE.

   *** DO NOT MODIFY. ***
*/




#include "out.hpp"

#include<cmath>
using namespace std;




 std::ostream& systemstates::operator << (std::ostream& o, systemstates::State<int> & v){
  o << v.value();
  return o;
 }

 std::ostream& systemstates::operator << (std::ostream& o, systemstates::State<double> & v){
  o << v.value();
  return o;
 }

 
 systemstates::State<int>& systemstates::set_value(systemstates::State<int>& lhs, Variant const & rhs){
  if (rhs.what_ == sm4ceps_plugin_int::Variant::Double) {
    int v = rhs.dv_;
    lhs.set_changed(lhs.value() != v); lhs.value() = v;
  } else if (rhs.what_ == sm4ceps_plugin_int::Variant::Int) {
   lhs.set_changed(lhs.value() != rhs.iv_); lhs.value() = rhs.iv_;
  }
  return lhs;
 }

 systemstates::State<int>& systemstates::set_value(systemstates::State<int>& lhs, int rhs){lhs.set_changed(lhs.value() != rhs);lhs.value() = rhs; return lhs;}
 systemstates::State<double>& systemstates::set_value(systemstates::State<double>& lhs, double rhs){lhs.set_changed(lhs.value() != rhs);lhs.value() = rhs; return lhs;}
 systemstates::State<double>& systemstates::set_value(systemstates::State<double>& lhs, Variant const & rhs){
  if (rhs.what_ == sm4ceps_plugin_int::Variant::Int) {
   lhs.set_changed(lhs.value() != rhs.iv_); lhs.value() = rhs.iv_;}
  else if  (rhs.what_ == sm4ceps_plugin_int::Variant::Double){
   lhs.set_changed(lhs.value() != rhs.dv_); lhs.value() = rhs.dv_;}

  return lhs;
 }

 systemstates::State<std::string>& systemstates::set_value(systemstates::State<std::string>& lhs, std::string rhs){lhs.set_changed(lhs.value() != rhs);lhs.value() = rhs; return lhs;}



void init_frame_ctxts();


void user_defined_init(){
 init_frame_ctxts();
}


 void init_frame_ctxts(){
 }
 void globfuncs::S1__action__t1(){
  std::cout<<std::string{R"(S1:: Initial-> S1::S1a
)"};
 }
 void globfuncs::S1__action__t2(){
  std::cout<<std::string{R"(S1:: Initial-> Initial
)"};
 }
 void globfuncs::S1__action__t3(){
  std::cout<<std::string{R"(S1:: Initial-> S2
)"};
 }
 void globfuncs::S1__action__t4(){
  std::cout<<std::string{R"(S1:: Initial-> state_a
)"};
 }
 void globfuncs::S1__action__on_enter(){
  std::cout<<std::string{R"(S1::on_enter
)"};
 }
 void globfuncs::S1__action__on_exit(){
  std::cout<<std::string{R"(S1::on_exit
)"};
 }
 void globfuncs::S1__S1a__action__t1(){
  std::cout<<std::string{R"(S1::S1a Initial-> S1::S1a::S1aa
)"};
 }
 void globfuncs::S1__S1a__action__t2(){
  std::cout<<std::string{R"(S1::S1a Initial-> Initial
)"};
 }
 void globfuncs::S1__S1a__action__t3(){
  std::cout<<std::string{R"(S1::S1a S1aa -> S1ab
)"};
 }
 void globfuncs::S1__S1a__action__t4(){
  std::cout<<std::string{R"(S1::S1a S1ab -> S1ac
)"};
 }
 void globfuncs::S1__S1a__action__t5(){
  std::cout<<std::string{R"(S1::S1a S1ac -> S1aa
)"};
 }
 void globfuncs::S1__S1a__action__on_enter(){
  std::cout<<std::string{R"(S1::S1a::on_enter
)"};
 }
 void globfuncs::S1__S1a__action__on_exit(){
  std::cout<<std::string{R"(S1::S1a::on_exit
)"};
 }
 void globfuncs::S1__S1a__S1aa__action__on_enter(){
  std::cout<<std::string{R"(S1::S1a::S1aa::on_enter
)"};
 }
 void globfuncs::S1__S1a__S1aa__action__on_exit(){
  std::cout<<std::string{R"(S1::S1a::S1aa::on_exit
)"};
 }
 void globfuncs::S1__S1a__S1ab__action__on_enter(){
  std::cout<<std::string{R"(S1::S1a::S1ab::on_enter
)"};
 }
 void globfuncs::S1__S1a__S1ab__action__on_exit(){
  std::cout<<std::string{R"(S1::S1a::S1ab::on_exit
)"};
 }
 void globfuncs::S1__S1a__S1ac__action__on_enter(){
  std::cout<<std::string{R"(S1::S1a::S1ac::on_enter
)"};
 }
 void globfuncs::S1__S1a__S1ac__action__on_exit(){
  std::cout<<std::string{R"(S1::S1a::S1ac::on_exit
)"};
 }
 void globfuncs::S2__action__on_enter(){
  std::cout<<std::string{R"(S2::on_enter
)"};
 }
 void globfuncs::S2__action__on_exit(){
  std::cout<<std::string{R"(S2::on_enter
)"};
 }
 void globfuncs::S3__action__a1(){
  std::cout<<std::string{R"(

#############--------->S3.a1
)"};
 }
 void globfuncs::S4__action__a(){
  start_periodic_timer(0.01 , systemstates::ev{"A"});
 }


extern "C" void init_plugin(IUserdefined_function_registry* smc){
smcore_interface = smc->get_plugin_interface();
smc->register_global_init(user_defined_init);
smc->register_action("S1","t1", globfuncs::S1__action__t1);
smc->register_action("S1","t2", globfuncs::S1__action__t2);
smc->register_action("S1","t3", globfuncs::S1__action__t3);
smc->register_action("S1","t4", globfuncs::S1__action__t4);
smc->register_action("S1","on_enter", globfuncs::S1__action__on_enter);
smc->register_action("S1","on_exit", globfuncs::S1__action__on_exit);
smc->register_action("S1.S1a","t1", globfuncs::S1__S1a__action__t1);
smc->register_action("S1.S1a","t2", globfuncs::S1__S1a__action__t2);
smc->register_action("S1.S1a","t3", globfuncs::S1__S1a__action__t3);
smc->register_action("S1.S1a","t4", globfuncs::S1__S1a__action__t4);
smc->register_action("S1.S1a","t5", globfuncs::S1__S1a__action__t5);
smc->register_action("S1.S1a","on_enter", globfuncs::S1__S1a__action__on_enter);
smc->register_action("S1.S1a","on_exit", globfuncs::S1__S1a__action__on_exit);
smc->register_action("S1.S1a.S1aa","on_enter", globfuncs::S1__S1a__S1aa__action__on_enter);
smc->register_action("S1.S1a.S1aa","on_exit", globfuncs::S1__S1a__S1aa__action__on_exit);
smc->register_action("S1.S1a.S1ab","on_enter", globfuncs::S1__S1a__S1ab__action__on_enter);
smc->register_action("S1.S1a.S1ab","on_exit", globfuncs::S1__S1a__S1ab__action__on_exit);
smc->register_action("S1.S1a.S1ac","on_enter", globfuncs::S1__S1a__S1ac__action__on_enter);
smc->register_action("S1.S1a.S1ac","on_exit", globfuncs::S1__S1a__S1ac__action__on_exit);
smc->register_action("S2","on_enter", globfuncs::S2__action__on_enter);
smc->register_action("S2","on_exit", globfuncs::S2__action__on_exit);
smc->register_action("S3","a1", globfuncs::S3__action__a1);
smc->register_action("S4","a", globfuncs::S4__action__a);
}

std::ostream& operator << (std::ostream& o, systemstates::Variant const & v)
{
 if (v.what_ == systemstates::Variant::Int)
  o << v.iv_;
 else if (v.what_ == systemstates::Variant::Double)
  o << std::to_string(v.dv_);
 else if (v.what_ == systemstates::Variant::String)
  o << v.sv_;
 else
  o << "(Undefined)";
 return o;
}

size_t globfuncs::argc(){
 return smcore_interface->argc();
}sm4ceps_plugin_int::Variant globfuncs::argv(size_t j){
 return smcore_interface->argv(j);
}
void globfuncs::start_timer(double t,sm4ceps_plugin_int::ev ev_){ smcore_interface->start_timer(t,ev_); }
void globfuncs::start_timer(double t,sm4ceps_plugin_int::ev ev_,sm4ceps_plugin_int::id id_){smcore_interface->start_timer(t,ev_,id_);}
void globfuncs::start_periodic_timer(double t ,sm4ceps_plugin_int::ev ev_){smcore_interface->start_periodic_timer(t,ev_);}
void globfuncs::start_periodic_timer(double t,sm4ceps_plugin_int::ev ev_,sm4ceps_plugin_int::id id_){smcore_interface->start_periodic_timer(t,ev_,id_);}
void globfuncs::start_periodic_timer(double t,sm4ceps_plugin_int::Variant (*fp)(),sm4ceps_plugin_int::id id_){smcore_interface->start_periodic_timer(t,fp,id_);}
void globfuncs::start_periodic_timer(double t,sm4ceps_plugin_int::Variant (*fp)()){smcore_interface->start_periodic_timer(t,fp);}
void globfuncs::stop_timer(sm4ceps_plugin_int::id id_){smcore_interface->stop_timer(id_);}
bool globfuncs::in_state(std::initializer_list<sm4ceps_plugin_int::id> state_ids){return smcore_interface->in_state(state_ids);}
