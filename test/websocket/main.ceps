kind Event;
kind Guard;
kind Systemstate;
Event ev,ev2;


Systemstate some_text;
some_text = "";

Systemstate counter;
counter = 0.0;

frame{
 id{frm;};
 data{
 "{";
 "\"name\":";"\"Latitude\",";
 "\"signal\":";as_string(sin(counter));
 "}";
 };
};

receiver
{
 id { ws_server; };
 when { frm; };
 emit { ev; };
 transport
 {
  websocket_server;
  generic_tcp_in
  {
   port { 
    "8181"; 
   }; 
   ip {
    "127.0.0.1";
   };
  };
 };
};

sender
{
 id{ws_server_out;};
 transport {use { ws_server; };};
};

Event start_signal_logger;
Event signal_logger_dump;

statemachine{
 signal_logger;
 states{Initial;Logging;Error;};
 Actions{
  starttimer{
   print(counter,"!\n");start_periodic_timer(0.05*s,signal_logger_dump,signal_logger_dump_timer);
  };
  dump{ send(frm,ws_server_out); };
 };
 t{Initial;Logging;start_signal_logger;starttimer;};
 t{Logging;Logging;signal_logger_dump;dump;};
};

statemachine{
 print_websocket_message;
 states{Initial;};
 Actions{
  msg_arrived{
   print("Received data: ", argv(1),"\n");
   start_signal_logger;
  };
 };
 t{Initial;Initial;ev;msg_arrived;};
};

Event ev_incr_counter;

statemachine{
 increment_counter;
 states{Initial;Counting;};
 Actions{
  do_increment{counter = counter + 0.1;}; 
  starttimer{start_periodic_timer(0.1*s,ev_incr_counter,incr_counter_producer_timer);};
 };
 t{Initial;Counting;starttimer;};
 t{Counting;Counting;ev_incr_counter;do_increment;};
};


Simulation{Start{print_websocket_message;signal_logger;increment_counter;};start_signal_logger;};