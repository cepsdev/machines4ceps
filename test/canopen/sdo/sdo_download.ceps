kind Systemstate;
kind Event;
kind Guard;

Event canopen_od_write,can_frame_received;

Systemstate data_sent,data_remains,t;

val int = 0;
val size = 0;

event_signature{
 canopen_od_write;
 remote_node(id);  
 od_index(int);
 od_subindex(int);
 data_chunk(any);
};

sender
{
  id { can1; };
  transport { 
   canbus { 
    bus_id { "vcan0"; };
    can_id_mapping{
     sdo_node1_slave; 0x601;
     sdo_node1_master; 0x601;
     sdo_node2_slave; 0x602;
     sdo_node2_master; 0x602;
    };
   }; 
  };
};

lookup{
 channels;
 node1;can1;
 node2;can1;
 node3;can1;
};


Statemachine {
 id { SDO_Download; };
 States { Initial; };
 Statemachine {
  id{ Initiate_SDO_Download_Request; };
  States{ Initial; 
          Request_Sent; 
          Response_OK; 
          Data_Sent_Waiting_For_ACK; };
  Actions{
   send_download_request{
     send(lookup(channels,remote_node) /* channel */,
          as_id("sdo_"+as_text(remote_node)+"_slave" ) /* communication object */ ,
          make_byte_sequence(byte(32),uint16(od_index),byte(od_subindex),uint32(0)));
   };
  };
  Transition{Initial;Request_Sent;send_download_request;};
 };
 Transition{Initial;Initiate_SDO_Download_Request;canopen_od_write;};
};


Simulation{ 
 Start{SDO_Download;};
 canopen_od_write(node1,3,4,"abcdefabcdef");
};
