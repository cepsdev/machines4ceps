kind Event;
kind Systemstate;
kind Parameter;
Event job_finished_successfully_event,job_failed_event;

static_for(i : 1 .. 100){

params{
 comment{
  "Jenkins Parameters";
 };
 param{
  name{"sapcode";};value{i;};
 };
 param{
  name{"ROLLOUTNAME";};value{"R"+text(i);};
 };
};

}

static_for(i : 1 .. 2){

sm{
 as_identifier("S"+text(i));
 comment{
  "Statemachine controlling Jenkins job";
 };

 states{Initial;JobFinishedSuccessfully;JobFailed;};

 on_enter{
 Parameter on_job_queued,
           option,
           command,
           url,
           parameters,
           hostname,
           port,
           job_name,
           authorization,
           on_success,
           on_error;

  jenkins(
          command                = "build",
          option                 = "follow",
          authorization          = env("ROLLAUT_JENKINS_AUTH"),
          url                    = "http://localhost:8080",
          job_name               = "pos_rollout_automated_002_auto_prepare_and_start_rollout_protocol",
          parameters             = root.params.at(i-1).content(),
          on_success             = as_symbol("job_finished_successfully_event"+text(i),"Event"),
          on_error               = as_symbol("job_failed_event"+text(i),"Event"));
 };

Actions{
  do_print_success{
   print("[",timestamp(),"] Job #",i," '",argv(1),"' finished successfully.\n");
  };
  do_print_failure{
   print("[",timestamp(),"] Job #",i," '",argv(1), "' failed: ",argv(2),"\n");
  };
 };

 t{Initial;JobFinishedSuccessfully;as_symbol("job_finished_successfully_event"+text(i),"Event");do_print_success;};
 t{Initial;JobFailed;as_symbol("job_failed_event"+text(i),"Event");do_print_failure;};
};

}

Simulation{
 comment{
  "Start Statemachine, wait a couple of seconds and exit.";
 };

 Event EXIT;
 Start{static_for(i : 1 .. 2){as_identifier("S"+text(i));}};
 start_timer(3600.0 * s, EXIT);

};
