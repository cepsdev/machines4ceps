/*
Copyright 2025 Tomas Prerovsky (cepsdev@hotmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

kind Event;
kind Guard;
kind Systemstate;

Event AnEvent;
kind OblectamentaMsgDefDirective;
        
OblectamentaDataLabel msg_buffer2, msg_buffer,msg_text, one, some_number;
OblectamentaMessageTag i32;
OblectamentaMessageTag sz;

oblectamenta{
 global{
   data{
        one; 1; 
        msg_text;"Hello there!";0;
        some_number; 43;
        123;
        msg_buffer; for (i : 1 .. 256){0;} // here goes the serialized message as generated in S::Actions::doSendEvent()
        123;
        msg_buffer2;
        msg{
            A{
                id{
                    1;
                };
                name{
                    "Hello there!";
                };
                B{
                    age{
                        10;
                    };
                };
            };
            B{
                id1{ id2{}; };
            };
            C{};
        };//msg
    };
 };
};
sm/*state machine*/{
    /*name*/S;
    states{Initial; A;};
    Actions{
        doSendEvent{
            oblectamenta{
            text{
                asm{                  
                                   
                msg{
                    OblectamentaMsgDefDirective this_is_a_msg_to_be_serialized;
                    this_is_a_msg_to_be_serialized; // we want this to be treated as a message. 
                    msg_buffer; // That's the location the resulting byte stream should be written to
                    abcddd{
                        defff{
                            ldi32(12);
                            i32;
                        };
                    };
                    ghi{
                        lea(msg_text);
                        sz;
                    };
                    jkl{};
                    mn{
                        op{};
                        qr{st{};uv{};};
                        wxy{};
                    };
                };//msg
                dbg_print_data(0);
                dbg_print_cs_and_regs(0);
                dbg_print_stack(0);
                dbg_deserialize_protobufish_to_json(msg_buffer);
                halt;
              };//asm
             };//text
            };//oblectamenta
        };//doSendEvent
    };//Actions
    t/*transition*/{/*from*/Initial; /*to*/A;/*action*/doSendEvent;};
};

sm/*state machine*/{
    /*name*/T;
    states{Initial; A;};
    Actions{
        doReceiveEvent{
            print("doReceiveEvent\n");
        };
    };
    t/*transition*/{/*from*/Initial; /*to*/A;/*Triggering Event*/AnEvent;/*Action*/doReceiveEvent;};
};

Simulation{
    Start{S;T;};
};
