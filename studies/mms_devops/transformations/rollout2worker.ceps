kind Event;
kind Guard;
kind Systemstate;

Event success;
Event start_rollout;

static_for(e:root.rollout){
 val rollout2worker_market_counter = 1;
 static_for(market:e.markets.content()){
  as_symbol("current_warn_level_"+text(rollout2worker_market_counter),"Guard");
  as_symbol("timestamp_"+text(rollout2worker_market_counter),"Systemstate");
  sm{
   val market_name = text(strip(market.content().id.content()));
   val market_code = text(strip(market.content().code.content())); 
   as_identifier(market_name+"_worker");
   hidden;
   
   states { 
    Initial;
    WaitForStart;
    Final;
    val sc = 1;
    static_for(e:e.steps.content().is_id()){
        as_identifier("SystemErrorStep"+text(sc));
        ignore_value { sc = sc+1;};
    }   
   };

   sm{
        as_identifier("Workflow_warnlevel_"+text(rollout2worker_market_counter));
        states{Initial;Normal;Warn;Error;};
        on_enter{
            as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=0;
        };
        Actions{
            set_current_warn_level_to_normal{as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=0;};
            set_current_warn_level_to_error{as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=2;};
            set_current_warn_level_to_warn{as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=1;};
        };
        t{Initial;Normal;set_current_warn_level_to_normal;};
        t{Normal;Warn;as_symbol("EnterWarnMode_"+text(rollout2worker_market_counter),"Event");set_current_warn_level_to_warn;};
        t{Normal;Error;as_symbol("EnterErrorMode_"+text(rollout2worker_market_counter),"Event");set_current_warn_level_to_error;};
        t{Warn;Normal;as_symbol("EnterNormalMode_"+text(rollout2worker_market_counter),"Event");set_current_warn_level_to_normal;};
        t{Warn;Error;as_symbol("EnterErrorMode_"+text(rollout2worker_market_counter),"Event");set_current_warn_level_to_error;};   
        t{Error;Warn;as_symbol("EnterWarnMode_"+text(rollout2worker_market_counter),"Event");set_current_warn_level_to_warn;};
        t{Error;Normal;as_symbol("EnterNormalMode_"+text(rollout2worker_market_counter),"Event");set_current_warn_level_to_normal;};
   };
   
   val rollout2worker_step_counter = 1;
   val market_code = text(market.content().code.content());

   static_for(step: e.steps.content().step_details) {
    sm{
        as_identifier(strip(step.content().id.content()));
        val identification = text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter);
        val jenkins_job_check_normal = text(step.job_check.content());
        val jenkins_job_run_normal = text(step.job_run.content());
        val arguments_check_normal = make_struct("params",
                                      make_struct("param",
                                       make_struct("name",env("ROLLAUT_JENKINS_SAPCODE_PARAM")),
                                       make_struct("value",market.content().code.content())              
                                      ),
                                      step.params_ext.content().check.content()
                                     );
        val arguments_run_normal = make_struct("params",
                                     make_struct("param",
                                      make_struct("name",env("ROLLAUT_JENKINS_SAPCODE_PARAM")),
                                      make_struct("value",market.content().code.content())              
                                     ),
                                     step.params_ext.content().run.content()
                                    );

        states {Initial;Final;WarnMode;NormalMode;};
        on_enter{
            as_symbol("EnterNormalMode_"+text(rollout2worker_market_counter),"Event");
        };
        sm{
         NormalModeDoCheck;
         states{Initial;JobQueued;TrackJob;};
         on_enter{
            as_symbol("timestamp_"+text(rollout2worker_market_counter),"Systemstate") = timestamp();
            kind Parameter;
            Parameter on_job_queued,option,command,url,parameters,
                      hostname,port,job_name,authorization,on_success,on_error;
            jenkins(
                command                      = "build",
                //option                     = "follow",
                authorization                = env("ROLLAUT_JENKINS_AUTH"),
                url                          = env("ROLLAUT_JENKINS_URL"),
                job_name                     = jenkins_job_check_normal,
                parameters                   = arguments_check_normal,
                //on_success                 = job_finished_successfully_event,
                on_error                     = as_symbol("ev_step_"+identification+"_failed","Event"),
                on_success/*on_job_queued*/  = as_symbol("ev_check_"+identification+"_start_tracking","Event")
            );
         };
         Actions{
            do_track_job{
                kind Parameter;
                Parameter hostname, passwd, user, time_stamp, database, job_name, sap_code, time_delta;
                Parameter check_for_empty_resultset_only, on_error, on_success, on_success_code_is_not_zero,on_success_code_is_zero;
                mms_rollaut_db_check(
                  hostname                     = env("ROLLAUT_DB_HOST"),
                  user                         = env("ROLLAUT_DB_USER"),
                  passwd                       = env("ROLLAUT_DB_PASSWD"),
                  database                     = env("ROLLAUT_DB_DB"),
                  sap_code                     = market_code,
                  job_name                     = jenkins_job_check_normal,
                  time_stamp                   = as_symbol("timestamp_"+text(rollout2worker_market_counter),"Systemstate"),
                  on_success_code_is_not_zero  = as_symbol("small_step_"+identification,"Event"),
                  on_success_code_is_zero      = as_symbol("big_step_"+identification,"Event")
                );
            };
         };

         t{Initial;JobQueued;as_symbol("ev_check_"+identification+"_start_tracking","Event");do_track_job;};
        };
        
        sm{
          NormalModeDoRun;
          if (jenkins_job_run_normal == ""){
           states{Initial;};
           on_enter{
            as_symbol("small_step_"+identification,"Event");
           };
          } else {
            states{Initial;JobQueued;TrackJob;};
            on_enter{
                as_symbol("timestamp_"+text(rollout2worker_market_counter),"Systemstate") = timestamp();
                kind Parameter;
                Parameter on_job_queued,option,command,url,parameters,
                          hostname,port,job_name,authorization,on_success,on_error;
                jenkins(
                    command                      = "build",
                    //option                     = "follow",
                    authorization                = env("ROLLAUT_JENKINS_AUTH"),
                    url                          = env("ROLLAUT_JENKINS_URL"),
                    job_name                     = jenkins_job_run_normal,
                    parameters                   = arguments_run_normal,
                    //on_success                 = job_finished_successfully_event,
                    on_error                     = as_symbol("ev_step_"+identification+"_failed","Event"),
                    on_success/*on_job_queued*/  = as_symbol("ev_check_"+identification+"_start_tracking","Event")
                );
             };
             Actions{
                do_track_job{
                    kind Parameter;
                    Parameter hostname, passwd, user, time_stamp, database, job_name, sap_code, time_delta;
                    Parameter check_for_empty_resultset_only, on_error, on_success, on_success_code_is_not_zero,on_success_code_is_zero;
                    mms_rollaut_db_check(
                      hostname                     = env("ROLLAUT_DB_HOST"),
                      user                         = env("ROLLAUT_DB_USER"),
                      passwd                       = env("ROLLAUT_DB_PASSWD"),
                      database                     = env("ROLLAUT_DB_DB"),
                      sap_code                     = market_code,
                      job_name                     = jenkins_job_run_normal,
                      time_stamp                   = as_symbol("timestamp_"+text(rollout2worker_market_counter),"Systemstate"),
                      on_success                   = as_symbol("small_step_"+identification,"Event")
                    );
                };
             };
             t{Initial;JobQueued;as_symbol("ev_check_"+identification+"_start_tracking","Event");do_track_job;};
          }
         };
        sm{
         WarnModeDoCheck;
         states{Initial;};
         on_enter{};
        };
        sm{
         WarnModeDoRun;
         states{Initial;};
         on_enter{};
        };
        sm{
         ErrorModeDoRun;
         states{Initial;};
         on_enter{};
        };
     
        t{Initial;NormalModeDoCheck;};
        t{NormalModeDoCheck;NormalModeDoRun;as_symbol("small_step_"+identification,"Event");};
     
        t{WarnModeDoCheck;WarnModeDoRun;as_symbol("small_step_"+identification,"Event");};
     
        t{NormalModeDoRun;NormalModeDoCheck;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==0;as_symbol("small_step_"+identification,"Event");};
        t{NormalModeDoRun;WarnModeDoCheck;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==1;as_symbol("small_step_"+identification,"Event");};
        t{NormalModeDoRun;ErrorModeDoRun;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==2;as_symbol("small_step_"+identification,"Event");};
     
        t{WarnModeDoRun;NormalModeDoCheck;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==0;as_symbol("small_step_"+identification,"Event");};
        t{WarnModeDoRun;WarnModeDoCheck;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==1;as_symbol("small_step_"+identification,"Event");};
        t{WarnModeDoRun;ErrorModeDoRun;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==2;as_symbol("small_step_"+identification,"Event");};
     
        t{ErrorModeDoRun;NormalModeDoCheck;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==0;as_symbol("small_step_"+identification,"Event");};
        t{ErrorModeDoRun;WarnModeDoCheck;as_symbol("current_warn_level_"+text(workflow_counter),"Guard")==1;as_symbol("small_step_"+identification,"Event");};
    };
    rollout2worker_step_counter = rollout2worker_step_counter + 1;
   }

   Actions{
       val rollout2worker_step_counter = 1;
       static_for( step:e.steps.content().is_id() ) {
           val identification = text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter); 
           make_struct("propagate_"+identification+"_done",
            as_symbol("ev_step_"+identification+"_finished","Event")
           );
           rollout2worker_step_counter = rollout2worker_step_counter + 1;
       }
   };

   val prev = e.steps.content().is_id().first();
   t{
     Initial;as_identifier("Workflow_warnlevel_"+text(rollout2worker_market_counter));
   };

   t{
     Initial;
     WaitForStart;
   };

   t{
     WaitForStart;
     prev;
     as_symbol("start_rollout_"+market_name,"Event");
   };

   val rollout2worker_step_counter = 1;
   static_for( step: tail(e.steps.content().is_id()) ) {
    val identification = text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter);
    t {
      prev;
      step;
      as_symbol("big_step_"+identification,"Event");
      as_identifier("propagate_"+identification+"_done");
    };
    t{
     prev;
     as_identifier("SystemErrorStep"+text(rollout2worker_step_counter));
     as_symbol("ev_step_"+identification+"_failed","Event");
    };
    ignore_value { prev = step;rollout2worker_step_counter = rollout2worker_step_counter + 1;};
   }

   t{
    prev;
    as_identifier("SystemErrorStep"+text(rollout2worker_step_counter));
    as_symbol("ev_step_"+text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter)+"_failed","Event"); 
   };

   t { prev;
       Final;
       as_symbol("big_step_"+text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter),"Event");
       as_identifier("propagate_"+text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter)+"_done"); 
   };
 };
 rollout2worker_market_counter = rollout2worker_market_counter+1;
 } 
}