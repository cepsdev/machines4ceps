kind Event;
Event success;
Event start_rollout;

Systemstate WATCHDOG_TEMP;
WATCHDOG_TEMP = 0;

static_for(e:root.rollout){
 static_for(market:e.markets.market){
 
  sm{
   val market_name = text(market.content().id.content()); 
   as_identifier("watch_dog_"+market_name);
   hidden;

   states { Initial;
            Done;
            Final;
          };

   static_for( step:e.steps.step_details ) {
     sm{
         val step_id = text(strip(step.id.content()));
         as_identifier(step_id);
         states{Initial;};
         if (step.criticality_def.content().size() > 0){
            on_enter{
                //print("WATCH_DOG ENTER","\n");
                write_system_state(market_name+"_warn_state",0);
                write_system_state(market_name+"_error_state",0);


                if (step.criticality_def.warn.timeout.size()>0){
                    val timeout = strip(step.criticality_def.warn.timeout.content());
                    start_timer(timeout*s,
                                as_symbol(market_name+text(strip(step.id.content()))+"_critical","Event"),
                                as_identifier(market_name+text(strip(step.id.content()))+"_critical_timer")
                                );
                }
                if (step.criticality_def.error.timeout.size()>0){
                    val timeout = strip(step.criticality_def.error.timeout.content());
                    start_timer(timeout*s,
                                as_symbol(market_name+text(strip(step.id.content()))+"_failed","Event"),
                                as_identifier(market_name+text(strip(step.id.content()))+"_failure_timer")
                                );
                }
                write_system_state(step_id+market_name+"_tries",0);
            };
            on_exit{
                //print("WATCH_DOG EXIT","\n");

                write_system_state(market_name+"_warn_state",0);
                write_system_state(market_name+"_error_state",0);


                if (step.criticality_def.warn.timeout.size()>0){
                    kill_timer(
                        as_identifier(market_name+text(strip(step.id.content()))+"_critical_timer")
                    );
                }
                if (step.criticality_def.error.timeout.size()>0){                    
                    kill_timer(
                        as_identifier(market_name+text(strip(step.id.content()))+"_failure_timer")
                    );
                }
            };

            //as_symbol(prefix+"small_step"+postfix,"Event");
            Actions{
                val job_check_warn = text(strip(step.content().job_check_warn.content()));
                val job_run_warn = text(strip(step.content().job_run_warn.content()));

                enter_warn_state{
                    write_system_state(market_name+"_warn_state",1);
      
                };

                enter_error_state{
                    write_system_state(market_name+"_error_state",1);
                };

                handle_result{
                    //print ("WATCH_DOG handle_result\n");
                    write_system_state(step_id+market_name+"_tries",read_system_state(step_id+market_name+"_tries")+1);
                    //print("WATCH_DOG TRIES", read_system_state(step_id+market_name+"_tries"));

                    static_for(e:step.criticality_def.warn.result){
                        val code = as_int(strip(e.content()));
                        if (code == read_system_state("small_step_"+market_name+"_rcode")){
                            write_system_state(market_name+"_warn_state",1);
                            as_symbol(market_name+text(strip(step.id.content()))+"_critical","Event");
                        }           
                    }
                    static_for(e:step.criticality_def.error.result){
                        val code = as_int(strip(e.content()));
                        if (code == read_system_state("small_step_"+market_name+"_rcode")){
                            write_system_state(market_name+"_error_state",1);
                            as_symbol(market_name+text(strip(step.id.content()))+"_failed","Event");
                        }           
                    }
                    static_for(e:step.criticality_def.warn.tries){
                        val tries = as_int(strip(e.content()))+1;
                        if (tries == read_system_state(step_id+market_name+"_tries")){
                            write_system_state(market_name+"_warn_state",1);
                            as_symbol(market_name+text(strip(step.id.content()))+"_critical","Event");
                        }           
                    }
                    static_for(e:step.criticality_def.error.tries){
                        val tries = as_int(strip(e.content()))+1;
                        if (tries == read_system_state(step_id+market_name+"_tries")){
                            write_system_state(market_name+"_error_state",1);
                            as_symbol(market_name+text(strip(step.id.content()))+"_failed","Event");
                        }           
                    }
                    

                };
            };

            //as_symbol(prefix+"small_step_check_result"+postfix,"Event");

            if (
                //step.criticality_def.warn.result.content().size() > 0 || 
                //step.criticality_def.error.result.content().size() >0
                step.criticality_def.warn.content().size() > 0 || step.criticality_def.error.content().size() > 0
                
                ){
                t{Initial;Initial;as_symbol("small_step_check_result_"+market_name,"Event");handle_result;};
            }
            t{Initial;Initial;as_symbol(market_name+text(strip(step.id.content()))+"_critical","Event");enter_warn_state;};
            t{Initial;Initial;as_symbol(market_name+text(strip(step.id.content()))+"_failed","Event");enter_error_state;};
         }
     };
   }

   t {  
      Initial; 
      e.steps.content().is_id().first();
      as_symbol("start_rollout_"+market_name,"Event");        
     };

   val prev = e.steps.content().is_id().first();

   static_for( step:tail(e.steps.content().is_id()) ) {
   
    t { prev;
        step;
        as_symbol(market_name+text(prev)+"_finished","Event");
    };
    
    ignore_value { prev = step; };
   };
   t{Done;Final;};
 };
 }
}
