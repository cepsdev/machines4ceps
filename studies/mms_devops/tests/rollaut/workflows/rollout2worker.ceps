kind Event;
Event success;
Event start_rollout;


static_for(e:root.rollout){
 val rollout2worker_market_counter = 1;
 static_for(market:e.markets.content()){
  sm{
   val market_name = text(strip(market.content().id.content()));
   val market_code = text(strip(market.content().code.content())); 
   as_identifier(market_name+"_worker");
   hidden;

   states { 
       Initial;
       Final;    
   };
   val rollout2worker_step_counter = 1;
   static_for(step: e.steps.content().step_details) {
    sm{
        as_identifier(strip(step.content().id.content()));
        val identification = text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter); 
        
        on_enter{
        };
     
        states{
            Initial;
            CheckError;
            RunError;
            Critical;
            Final;
        };      

        sub_step_check { 
            Check;
            step.job_check.content();
            make_struct("params",
             make_struct("param",
              make_struct("name",env("ROLLAUT_JENKINS_SAPCODE_PARAM")),
              make_struct("value",market.content().code.content())              
             ),
             step.params_ext.content().check.content()
            );
            identification;
            market.content().code.content();
        };
                       
        sub_step_run{ Run; };

        t{Initial;Check;};
        t{Check;CheckError;as_symbol("ev_step_"+identification+"_failed","Event");};

        t{Check;Run;as_symbol("small_step_"+identification,"Event");};
        t{Run;Check;as_symbol("small_step_"+identification,"Event");};
        t{Run;RunError;as_symbol("ev_step_"+identification+"_failed","Event");};
    };
    rollout2worker_step_counter = rollout2worker_step_counter + 1;
   }

   Actions{
       val rollout2worker_step_counter = 1;
       static_for( step:e.steps.content().is_id() ) {
           val identification = text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter); 
           make_struct("propagate_"+identification+"_done",
            as_symbol("ev_step_finished_"+identification,"Event")
           );
           rollout2worker_step_counter = rollout2worker_step_counter + 1;
       }
   };

   val prev = e.steps.content().is_id().first();

   t{
     Initial;
     prev;
     as_symbol("start_rollout_"+market_name,"Event");
   };
   val rollout2worker_step_counter = 1;
   static_for( step: tail(e.steps.content().is_id()) ) {
    val identification = text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter);
    t {
      prev;
      step;
      as_symbol("big_step_"+identification,"Event");
      as_identifier("propagate_"+identification+"_done");
    };
    ignore_value { prev = step;rollout2worker_step_counter = rollout2worker_step_counter + 1;};
   }

   t { prev;
       Final;
       as_symbol("big_step_"+text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter),"Event");
       as_identifier("propagate_"+text(rollout2worker_market_counter)+"_"+text(rollout2worker_step_counter)+"_done"); 
   };
 };
 }
 rollout2worker_market_counter = rollout2worker_market_counter+1;
}



