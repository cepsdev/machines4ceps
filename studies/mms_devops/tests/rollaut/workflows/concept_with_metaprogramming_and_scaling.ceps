kind Event;kind Systemstate;kind Guard;
Event BigStep,SmallStep,EnterErrorMode,Loop,EnterWarnMode,EnterNormalMode,E,F,G,H,I,J,K;

val t_delta = 0.1;
val steps_per_workflow = 30;
val workflows = 1000;

static_for(workflow_counter: 1 .. workflows){
as_symbol("current_warn_level_"+text(workflow_counter),"Guard");
sm{
    as_identifier("Workflow_warnlevel_"+text(workflow_counter));
    states{Initial;Normal;Warn;Error;};
    Actions{
        set_current_warn_level_to_normal{as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=0;};
        set_current_warn_level_to_error{as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=2;};
        set_current_warn_level_to_warn{as_symbol("current_warn_level_"+text(workflow_counter),"Guard")=1;};
    };
    t{Initial;Normal;set_current_warn_level_to_normal;};
    t{Normal;Warn;EnterWarnMode;set_current_warn_level_to_warn;};
    t{Normal;Error;EnterErrorMode;set_current_warn_level_to_error;};
    t{Warn;Normal;EnterNormalMode;set_current_warn_level_to_normal;};
    t{Warn;Error;EnterErrorMode;set_current_warn_level_to_error;};   
    t{Error;Warn;EnterWarnMode;set_current_warn_level_to_warn;};
    t{Error;Normal;EnterNormalMode;set_current_warn_level_to_normal;};
};
}
static_for(workflow_counter: 1 .. workflows){
 sm{
    as_identifier("Workflow_"+text(workflow_counter));
    static_for(step_counter: 1 .. steps_per_workflow){
  sm{
   as_identifier("Step_"+text(step_counter));
   states {Initial;Final;WarnMode;NormalMode;};
   on_enter{
    as_symbol("current_warn_level","Guard") = 0;
   };
   sm{
    NormalModeDoCheck;
    states{Initial;};
    on_enter{};
   };
   sm{
    NormalModeDoRun;
    states{Initial;};
    on_enter{};
   };
   sm{
    WarnModeDoCheck;
    states{Initial;};
    on_enter{};
   };
   sm{
    WarnModeDoRun;
    states{Initial;};
    on_enter{};
   };
   sm{
    ErrorModeDoRun;
    states{Initial;};
    on_enter{};
   };

   t{Initial;NormalModeDoCheck;};
   t{NormalModeDoCheck;NormalModeDoRun;SmallStep;};

   t{WarnModeDoCheck;WarnModeDoRun;SmallStep;};

   t{NormalModeDoRun;NormalModeDoCheck;as_symbol("current_warn_level","Guard")==0;SmallStep;};
   t{NormalModeDoRun;WarnModeDoCheck;as_symbol("current_warn_level","Guard")==1;SmallStep;};
   t{NormalModeDoRun;ErrorModeDoRun;as_symbol("current_warn_level","Guard")==2;SmallStep;};

   t{WarnModeDoRun;NormalModeDoCheck;as_symbol("current_warn_level","Guard")==0;SmallStep;};
   t{WarnModeDoRun;WarnModeDoCheck;as_symbol("current_warn_level","Guard")==1;SmallStep;};
   t{WarnModeDoRun;ErrorModeDoRun;as_symbol("current_warn_level","Guard")==2;SmallStep;};

   t{ErrorModeDoRun;NormalModeDoCheck;as_symbol("current_warn_level","Guard")==0;SmallStep;};
   t{ErrorModeDoRun;WarnModeDoCheck;as_symbol("current_warn_level","Guard")==1;SmallStep;};
  };
 }

 states{Initial;Final;};
 
 t{Initial;Step_1;};
 static_for(step_counter: 1 .. steps_per_workflow-1){
   t{as_identifier("Step_"+text(step_counter));as_identifier("Step_"+text(step_counter+1));BigStep;};  
 }
 t{as_identifier("Step_"+text(steps_per_workflow));Final;};
 };
}


Simulation{
 Start{
  static_for(workflow_counter: 1 .. workflows){
    as_identifier("Workflow_"+text(workflow_counter));
    as_identifier("Workflow_warnlevel_"+text(workflow_counter));
  }
 };
};