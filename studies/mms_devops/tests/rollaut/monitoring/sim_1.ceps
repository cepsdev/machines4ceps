static_for(e:root.rollout){
    val counter = 0.0;
    val mc = 1;
    static_for(market:e.markets.market){
       val market_name = text(market.content().id.content());
       sm{
        as_identifier("Simulation of "+market_name);

        states{ Initial;
            Done;
            Final;
            Killed;
            e.steps.content().is_id();
            static_for(step : e.steps.content().is_id()){as_identifier(text(step)+"_error");as_identifier(text(step)+"_critical");};
        };

        on_enter{
            start_periodic_timer(SIMULATION_BASE_PERIOD*s+counter*s,as_symbol(market_name+"sim_next","Event"));
        };

        Actions{
         val action_counter = 1;
         val sc = 1;
         static_for( step:e.steps.content().is_id()) {
            make_struct("do_action_"+text(action_counter), as_symbol("ev_step_"+text(mc)+"_"+text(sc)+"_finished","Event") );
            ignore_value { prev = step;action_counter=action_counter+1;sc=sc+1; };
         }
        };

        t{  
           Initial; 
           e.steps.content().is_id().first();                   
        };
        
        val prev = e.steps.content().is_id().first();
        val action_counter = 1;

        static_for( step:tail(e.steps.content().is_id()) ) {
             t { prev;
                 step;
                 as_identifier("do_action_"+text(action_counter));
                 as_symbol(market_name+"sim_next","Event");
             };    
            ignore_value { prev = step;action_counter=action_counter+1; };
        }
        t{prev;Final; as_symbol(market_name+"sim_next","Event");as_identifier("do_action_"+text(action_counter));};

       };
       counter = counter + 0.1;
       mc = mc + 1;
    }
 }