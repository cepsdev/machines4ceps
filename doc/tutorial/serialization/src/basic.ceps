/*
Copyright 2025 Tomas Prerovsky (cepsdev@hotmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

kind Event;
kind Guard;
kind Systemstate;

Event AnEvent;

kind OblectamentaMsgDefDirective;        
OblectamentaDataLabel firstname1,initial1,lastname1,msg_buffer2, msg_buffer,msg_text, one, some_number;

//Global Data
oblectamenta{
 global{
   data{
        msg_text;"Hello there!";0;
        
        firstname1;"Max";0;
        initial1;"M";0;
        lastname1;"Mustermann";0;

        msg_buffer; for (i : 1 .. 256){0;} // here goes the serialized message as generated in S::Actions::doSendEvent()
    };
 };
};

sm/*state machine*/{
    /*name*/S;
    states{Initial; A;};
    Actions{
        doSendEvent{
            oblectamenta{
            text{
                asm{
                    OblectamentaMessageTag i32;
                    OblectamentaMessageTag sz;                                   
                msg{
                    OblectamentaMsgDefDirective this_is_a_msg_to_be_serialized;
                    this_is_a_msg_to_be_serialized; // we want this to be treated as a message. 
                    msg_buffer; // That's the location the resulting byte stream should be written to

                   firstName{
                    //lea(firstname2);
                    sz;
                   };
                };//msg                
                dbg_deserialize_protobufish_to_json(msg_buffer);
              };//asm
             };//text
            };//oblectamenta
        };//doSendEvent
    };//Actions
    t/*transition*/{/*from*/Initial; /*to*/A;/*action*/doSendEvent;};
};

sm/*state machine*/{
    /*name*/T;
    states{Initial; A;};
    Actions{
        doReceiveEvent{
            print("doReceiveEvent\n");
        };
    };
    t/*transition*/{/*from*/Initial; /*to*/A;/*Triggering Event*/AnEvent;/*Action*/doReceiveEvent;};
};

Simulation{
    Start{S;T;};
};
