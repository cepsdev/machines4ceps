/*
Copyright 2025 Tomas Prerovsky (cepsdev@hotmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

kind Event;
kind Guard;
kind Systemstate;

Event AnEvent;

kind OblectamentaMsgDefDirective;        
kind OblectamentaMsgReadDirective;        

OblectamentaDataLabel zip,street,firstname1,initial1,lastname1,msg_buffer2, msg_buffer,msg_text, one, some_number;

//Global Data
oblectamenta{
 global{
   data{
        msg_text;"Hello there!";0;
        
        firstname1;"Max";0;
        initial1;"M";0;
        lastname1;"Mustermann";0;
        street;"Pennsylvania Avenue";0;
        zip;"78996-5643";0;
        msg_buffer; for (i : 1 .. 256){0;} // here goes the serialized message as generated in S::Actions::doSendEvent()
    };
 };
};

sm/*state machine*/{
    /*name*/S;
    states{Initial; A;};
    Actions{
        doSendEvent{
            oblectamenta{
                    OblectamentaMessageTag i32;
                    OblectamentaMessageTag i64;
                    OblectamentaMessageTag f64;
                    OblectamentaMessageTag sz;                                   
                    OblectamentaMsgDefDirective write;
                    OblectamentaMsgReadDirective read;
            text{
                asm{
                  msg{
                    write; // we want this to be treated as a message. 
                    msg_buffer; // That's the location the resulting byte stream should be written to
                   age{
                    ldi32(33);
                    i32;
                   };
                   id{
                    ldi64(11);
                    i64;
                   };
                   salary{
                    lddbl(33.3);
                    //dbg_print_cs_and_regs(0);
                    f64;
                   };
                   firstName{
                    lea(firstname1);
                    sz;
                   };
                   initialName{
                    lea(initial1);
                    sz;
                   };
                   lastName{
                    lea(lastname1);
                    sz;
                   };
                   address{
                    street{lea(street);sz;};
                    no{ldi32(1000);i32;};
                    zip{lea(zip);sz;};
                   };
                };//msg
                //dbg_print_data(0);
                //dbg_deserialize_protobufish_to_json(msg_buffer);
                msg{
                    read;
                    msg_buffer;
                    age{
                        i32;
                        dbg_print_cs_and_regs(0);//Expectation: 33 is top i32 element of CS
                        discardtopi32;
                        dbg_print_cs_and_regs(0);
                    };
                };
                  
              };//asm
             };//text
            };//oblectamenta
        };//doSendEvent
    };//Actions
    t/*transition*/{/*from*/Initial; /*to*/A;/*action*/doSendEvent;};
};

sm/*state machine*/{
    /*name*/T;
    states{Initial; A;};
    Actions{
        doReceiveEvent{
            print("doReceiveEvent\n");
        };
    };
    t/*transition*/{/*from*/Initial; /*to*/A;/*Triggering Event*/AnEvent;/*Action*/doReceiveEvent;};
};

Simulation{
    Start{S;T;};
};
